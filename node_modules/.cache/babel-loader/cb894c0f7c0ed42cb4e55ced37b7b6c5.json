{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RegularPolygon = void 0;\n\nconst Factory_1 = require(\"../Factory\");\n\nconst Shape_1 = require(\"../Shape\");\n\nconst Validators_1 = require(\"../Validators\");\n\nconst Global_1 = require(\"../Global\");\n\nclass RegularPolygon extends Shape_1.Shape {\n  _sceneFunc(context) {\n    const points = this._getPoints();\n\n    context.beginPath();\n    context.moveTo(points[0].x, points[0].y);\n\n    for (var n = 1; n < points.length; n++) {\n      context.lineTo(points[n].x, points[n].y);\n    }\n\n    context.closePath();\n    context.fillStrokeShape(this);\n  }\n\n  _getPoints() {\n    const sides = this.attrs.sides;\n    const radius = this.attrs.radius || 0;\n    const points = [];\n\n    for (var n = 0; n < sides; n++) {\n      points.push({\n        x: radius * Math.sin(n * 2 * Math.PI / sides),\n        y: -1 * radius * Math.cos(n * 2 * Math.PI / sides)\n      });\n    }\n\n    return points;\n  }\n\n  getSelfRect() {\n    const points = this._getPoints();\n\n    var minX = points[0].x;\n    var maxX = points[0].y;\n    var minY = points[0].x;\n    var maxY = points[0].y;\n    points.forEach(point => {\n      minX = Math.min(minX, point.x);\n      maxX = Math.max(maxX, point.x);\n      minY = Math.min(minY, point.y);\n      maxY = Math.max(maxY, point.y);\n    });\n    return {\n      x: minX,\n      y: minY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  }\n\n  getWidth() {\n    return this.radius() * 2;\n  }\n\n  getHeight() {\n    return this.radius() * 2;\n  }\n\n  setWidth(width) {\n    this.radius(width / 2);\n  }\n\n  setHeight(height) {\n    this.radius(height / 2);\n  }\n\n}\n\nexports.RegularPolygon = RegularPolygon;\nRegularPolygon.prototype.className = 'RegularPolygon';\nRegularPolygon.prototype._centroid = true;\nRegularPolygon.prototype._attrsAffectingSize = ['radius'];\n(0, Global_1._registerNode)(RegularPolygon);\nFactory_1.Factory.addGetterSetter(RegularPolygon, 'radius', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(RegularPolygon, 'sides', 0, (0, Validators_1.getNumberValidator)());","map":{"version":3,"names":["Object","defineProperty","exports","value","RegularPolygon","Factory_1","require","Shape_1","Validators_1","Global_1","Shape","_sceneFunc","context","points","_getPoints","beginPath","moveTo","x","y","n","length","lineTo","closePath","fillStrokeShape","sides","attrs","radius","push","Math","sin","PI","cos","getSelfRect","minX","maxX","minY","maxY","forEach","point","min","max","width","height","getWidth","getHeight","setWidth","setHeight","prototype","className","_centroid","_attrsAffectingSize","_registerNode","Factory","addGetterSetter","getNumberValidator"],"sources":["D:/screenshort-extension/image-editor-react/node_modules/konva/lib/shapes/RegularPolygon.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RegularPolygon = void 0;\nconst Factory_1 = require(\"../Factory\");\nconst Shape_1 = require(\"../Shape\");\nconst Validators_1 = require(\"../Validators\");\nconst Global_1 = require(\"../Global\");\nclass RegularPolygon extends Shape_1.Shape {\n    _sceneFunc(context) {\n        const points = this._getPoints();\n        context.beginPath();\n        context.moveTo(points[0].x, points[0].y);\n        for (var n = 1; n < points.length; n++) {\n            context.lineTo(points[n].x, points[n].y);\n        }\n        context.closePath();\n        context.fillStrokeShape(this);\n    }\n    _getPoints() {\n        const sides = this.attrs.sides;\n        const radius = this.attrs.radius || 0;\n        const points = [];\n        for (var n = 0; n < sides; n++) {\n            points.push({\n                x: radius * Math.sin((n * 2 * Math.PI) / sides),\n                y: -1 * radius * Math.cos((n * 2 * Math.PI) / sides),\n            });\n        }\n        return points;\n    }\n    getSelfRect() {\n        const points = this._getPoints();\n        var minX = points[0].x;\n        var maxX = points[0].y;\n        var minY = points[0].x;\n        var maxY = points[0].y;\n        points.forEach((point) => {\n            minX = Math.min(minX, point.x);\n            maxX = Math.max(maxX, point.x);\n            minY = Math.min(minY, point.y);\n            maxY = Math.max(maxY, point.y);\n        });\n        return {\n            x: minX,\n            y: minY,\n            width: maxX - minX,\n            height: maxY - minY,\n        };\n    }\n    getWidth() {\n        return this.radius() * 2;\n    }\n    getHeight() {\n        return this.radius() * 2;\n    }\n    setWidth(width) {\n        this.radius(width / 2);\n    }\n    setHeight(height) {\n        this.radius(height / 2);\n    }\n}\nexports.RegularPolygon = RegularPolygon;\nRegularPolygon.prototype.className = 'RegularPolygon';\nRegularPolygon.prototype._centroid = true;\nRegularPolygon.prototype._attrsAffectingSize = ['radius'];\n(0, Global_1._registerNode)(RegularPolygon);\nFactory_1.Factory.addGetterSetter(RegularPolygon, 'radius', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(RegularPolygon, 'sides', 0, (0, Validators_1.getNumberValidator)());\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}