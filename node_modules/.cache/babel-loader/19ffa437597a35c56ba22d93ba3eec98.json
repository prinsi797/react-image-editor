{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TextPath = void 0;\n\nconst Util_1 = require(\"../Util\");\n\nconst Factory_1 = require(\"../Factory\");\n\nconst Shape_1 = require(\"../Shape\");\n\nconst Path_1 = require(\"./Path\");\n\nconst Text_1 = require(\"./Text\");\n\nconst Validators_1 = require(\"../Validators\");\n\nconst Global_1 = require(\"../Global\");\n\nvar EMPTY_STRING = '',\n    NORMAL = 'normal';\n\nfunction _fillFunc(context) {\n  context.fillText(this.partialText, 0, 0);\n}\n\nfunction _strokeFunc(context) {\n  context.strokeText(this.partialText, 0, 0);\n}\n\nclass TextPath extends Shape_1.Shape {\n  constructor(config) {\n    super(config);\n    this.dummyCanvas = Util_1.Util.createCanvasElement();\n    this.dataArray = [];\n\n    this._readDataAttribute();\n\n    this.on('dataChange.konva', function () {\n      this._readDataAttribute();\n\n      this._setTextData();\n    });\n    this.on('textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva fontSizeChange.konva fontFamilyChange.konva', this._setTextData);\n\n    this._setTextData();\n  }\n\n  _getTextPathLength() {\n    return Path_1.Path.getPathLength(this.dataArray);\n  }\n\n  _getPointAtLength(length) {\n    if (!this.attrs.data) {\n      return null;\n    }\n\n    const totalLength = this.pathLength;\n\n    if (length - 1 > totalLength) {\n      return null;\n    }\n\n    return Path_1.Path.getPointAtLengthOfDataArray(length, this.dataArray);\n  }\n\n  _readDataAttribute() {\n    this.dataArray = Path_1.Path.parsePathData(this.attrs.data);\n    this.pathLength = this._getTextPathLength();\n  }\n\n  _sceneFunc(context) {\n    context.setAttr('font', this._getContextFont());\n    context.setAttr('textBaseline', this.textBaseline());\n    context.setAttr('textAlign', 'left');\n    context.save();\n    var textDecoration = this.textDecoration();\n    var fill = this.fill();\n    var fontSize = this.fontSize();\n    var glyphInfo = this.glyphInfo;\n\n    if (textDecoration === 'underline') {\n      context.beginPath();\n    }\n\n    for (var i = 0; i < glyphInfo.length; i++) {\n      context.save();\n      var p0 = glyphInfo[i].p0;\n      context.translate(p0.x, p0.y);\n      context.rotate(glyphInfo[i].rotation);\n      this.partialText = glyphInfo[i].text;\n      context.fillStrokeShape(this);\n\n      if (textDecoration === 'underline') {\n        if (i === 0) {\n          context.moveTo(0, fontSize / 2 + 1);\n        }\n\n        context.lineTo(fontSize, fontSize / 2 + 1);\n      }\n\n      context.restore();\n    }\n\n    if (textDecoration === 'underline') {\n      context.strokeStyle = fill;\n      context.lineWidth = fontSize / 20;\n      context.stroke();\n    }\n\n    context.restore();\n  }\n\n  _hitFunc(context) {\n    context.beginPath();\n    var glyphInfo = this.glyphInfo;\n\n    if (glyphInfo.length >= 1) {\n      var p0 = glyphInfo[0].p0;\n      context.moveTo(p0.x, p0.y);\n    }\n\n    for (var i = 0; i < glyphInfo.length; i++) {\n      var p1 = glyphInfo[i].p1;\n      context.lineTo(p1.x, p1.y);\n    }\n\n    context.setAttr('lineWidth', this.fontSize());\n    context.setAttr('strokeStyle', this.colorKey);\n    context.stroke();\n  }\n\n  getTextWidth() {\n    return this.textWidth;\n  }\n\n  getTextHeight() {\n    Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n    return this.textHeight;\n  }\n\n  setText(text) {\n    return Text_1.Text.prototype.setText.call(this, text);\n  }\n\n  _getContextFont() {\n    return Text_1.Text.prototype._getContextFont.call(this);\n  }\n\n  _getTextSize(text) {\n    var dummyCanvas = this.dummyCanvas;\n\n    var _context = dummyCanvas.getContext('2d');\n\n    _context.save();\n\n    _context.font = this._getContextFont();\n\n    var metrics = _context.measureText(text);\n\n    _context.restore();\n\n    return {\n      width: metrics.width,\n      height: parseInt(`${this.fontSize()}`, 10)\n    };\n  }\n\n  _setTextData() {\n    const {\n      width,\n      height\n    } = this._getTextSize(this.attrs.text);\n\n    this.textWidth = width;\n    this.textHeight = height;\n    this.glyphInfo = [];\n\n    if (!this.attrs.data) {\n      return null;\n    }\n\n    const letterSpacing = this.letterSpacing();\n    const align = this.align();\n    const kerningFunc = this.kerningFunc();\n    const textWidth = Math.max(this.textWidth + ((this.attrs.text || '').length - 1) * letterSpacing, 0);\n    let offset = 0;\n\n    if (align === 'center') {\n      offset = Math.max(0, this.pathLength / 2 - textWidth / 2);\n    }\n\n    if (align === 'right') {\n      offset = Math.max(0, this.pathLength - textWidth);\n    }\n\n    const charArr = (0, Text_1.stringToArray)(this.text());\n    let offsetToGlyph = offset;\n\n    for (var i = 0; i < charArr.length; i++) {\n      const charStartPoint = this._getPointAtLength(offsetToGlyph);\n\n      if (!charStartPoint) return;\n      let glyphWidth = this._getTextSize(charArr[i]).width + letterSpacing;\n\n      if (charArr[i] === ' ' && align === 'justify') {\n        const numberOfSpaces = this.text().split(' ').length - 1;\n        glyphWidth += (this.pathLength - textWidth) / numberOfSpaces;\n      }\n\n      const charEndPoint = this._getPointAtLength(offsetToGlyph + glyphWidth);\n\n      if (!charEndPoint) return;\n      const width = Path_1.Path.getLineLength(charStartPoint.x, charStartPoint.y, charEndPoint.x, charEndPoint.y);\n      let kern = 0;\n\n      if (kerningFunc) {\n        try {\n          kern = kerningFunc(charArr[i - 1], charArr[i]) * this.fontSize();\n        } catch (e) {\n          kern = 0;\n        }\n      }\n\n      charStartPoint.x += kern;\n      charEndPoint.x += kern;\n      this.textWidth += kern;\n      const midpoint = Path_1.Path.getPointOnLine(kern + width / 2.0, charStartPoint.x, charStartPoint.y, charEndPoint.x, charEndPoint.y);\n      const rotation = Math.atan2(charEndPoint.y - charStartPoint.y, charEndPoint.x - charStartPoint.x);\n      this.glyphInfo.push({\n        transposeX: midpoint.x,\n        transposeY: midpoint.y,\n        text: charArr[i],\n        rotation: rotation,\n        p0: charStartPoint,\n        p1: charEndPoint\n      });\n      offsetToGlyph += glyphWidth;\n    }\n  }\n\n  getSelfRect() {\n    if (!this.glyphInfo.length) {\n      return {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      };\n    }\n\n    var points = [];\n    this.glyphInfo.forEach(function (info) {\n      points.push(info.p0.x);\n      points.push(info.p0.y);\n      points.push(info.p1.x);\n      points.push(info.p1.y);\n    });\n    var minX = points[0] || 0;\n    var maxX = points[0] || 0;\n    var minY = points[1] || 0;\n    var maxY = points[1] || 0;\n    var x, y;\n\n    for (var i = 0; i < points.length / 2; i++) {\n      x = points[i * 2];\n      y = points[i * 2 + 1];\n      minX = Math.min(minX, x);\n      maxX = Math.max(maxX, x);\n      minY = Math.min(minY, y);\n      maxY = Math.max(maxY, y);\n    }\n\n    var fontSize = this.fontSize();\n    return {\n      x: minX - fontSize / 2,\n      y: minY - fontSize / 2,\n      width: maxX - minX + fontSize,\n      height: maxY - minY + fontSize\n    };\n  }\n\n  destroy() {\n    Util_1.Util.releaseCanvas(this.dummyCanvas);\n    return super.destroy();\n  }\n\n}\n\nexports.TextPath = TextPath;\nTextPath.prototype._fillFunc = _fillFunc;\nTextPath.prototype._strokeFunc = _strokeFunc;\nTextPath.prototype._fillFuncHit = _fillFunc;\nTextPath.prototype._strokeFuncHit = _strokeFunc;\nTextPath.prototype.className = 'TextPath';\nTextPath.prototype._attrsAffectingSize = ['text', 'fontSize', 'data'];\n(0, Global_1._registerNode)(TextPath);\nFactory_1.Factory.addGetterSetter(TextPath, 'data');\nFactory_1.Factory.addGetterSetter(TextPath, 'fontFamily', 'Arial');\nFactory_1.Factory.addGetterSetter(TextPath, 'fontSize', 12, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(TextPath, 'fontStyle', NORMAL);\nFactory_1.Factory.addGetterSetter(TextPath, 'align', 'left');\nFactory_1.Factory.addGetterSetter(TextPath, 'letterSpacing', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(TextPath, 'textBaseline', 'middle');\nFactory_1.Factory.addGetterSetter(TextPath, 'fontVariant', NORMAL);\nFactory_1.Factory.addGetterSetter(TextPath, 'text', EMPTY_STRING);\nFactory_1.Factory.addGetterSetter(TextPath, 'textDecoration', null);\nFactory_1.Factory.addGetterSetter(TextPath, 'kerningFunc', null);","map":{"version":3,"names":["Object","defineProperty","exports","value","TextPath","Util_1","require","Factory_1","Shape_1","Path_1","Text_1","Validators_1","Global_1","EMPTY_STRING","NORMAL","_fillFunc","context","fillText","partialText","_strokeFunc","strokeText","Shape","constructor","config","dummyCanvas","Util","createCanvasElement","dataArray","_readDataAttribute","on","_setTextData","_getTextPathLength","Path","getPathLength","_getPointAtLength","length","attrs","data","totalLength","pathLength","getPointAtLengthOfDataArray","parsePathData","_sceneFunc","setAttr","_getContextFont","textBaseline","save","textDecoration","fill","fontSize","glyphInfo","beginPath","i","p0","translate","x","y","rotate","rotation","text","fillStrokeShape","moveTo","lineTo","restore","strokeStyle","lineWidth","stroke","_hitFunc","p1","colorKey","getTextWidth","textWidth","getTextHeight","warn","textHeight","setText","Text","prototype","call","_getTextSize","_context","getContext","font","metrics","measureText","width","height","parseInt","letterSpacing","align","kerningFunc","Math","max","offset","charArr","stringToArray","offsetToGlyph","charStartPoint","glyphWidth","numberOfSpaces","split","charEndPoint","getLineLength","kern","e","midpoint","getPointOnLine","atan2","push","transposeX","transposeY","getSelfRect","points","forEach","info","minX","maxX","minY","maxY","min","destroy","releaseCanvas","_fillFuncHit","_strokeFuncHit","className","_attrsAffectingSize","_registerNode","Factory","addGetterSetter","getNumberValidator"],"sources":["D:/screenshort-extension/image-editor-react/node_modules/konva/lib/shapes/TextPath.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TextPath = void 0;\nconst Util_1 = require(\"../Util\");\nconst Factory_1 = require(\"../Factory\");\nconst Shape_1 = require(\"../Shape\");\nconst Path_1 = require(\"./Path\");\nconst Text_1 = require(\"./Text\");\nconst Validators_1 = require(\"../Validators\");\nconst Global_1 = require(\"../Global\");\nvar EMPTY_STRING = '', NORMAL = 'normal';\nfunction _fillFunc(context) {\n    context.fillText(this.partialText, 0, 0);\n}\nfunction _strokeFunc(context) {\n    context.strokeText(this.partialText, 0, 0);\n}\nclass TextPath extends Shape_1.Shape {\n    constructor(config) {\n        super(config);\n        this.dummyCanvas = Util_1.Util.createCanvasElement();\n        this.dataArray = [];\n        this._readDataAttribute();\n        this.on('dataChange.konva', function () {\n            this._readDataAttribute();\n            this._setTextData();\n        });\n        this.on('textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva fontSizeChange.konva fontFamilyChange.konva', this._setTextData);\n        this._setTextData();\n    }\n    _getTextPathLength() {\n        return Path_1.Path.getPathLength(this.dataArray);\n    }\n    _getPointAtLength(length) {\n        if (!this.attrs.data) {\n            return null;\n        }\n        const totalLength = this.pathLength;\n        if (length - 1 > totalLength) {\n            return null;\n        }\n        return Path_1.Path.getPointAtLengthOfDataArray(length, this.dataArray);\n    }\n    _readDataAttribute() {\n        this.dataArray = Path_1.Path.parsePathData(this.attrs.data);\n        this.pathLength = this._getTextPathLength();\n    }\n    _sceneFunc(context) {\n        context.setAttr('font', this._getContextFont());\n        context.setAttr('textBaseline', this.textBaseline());\n        context.setAttr('textAlign', 'left');\n        context.save();\n        var textDecoration = this.textDecoration();\n        var fill = this.fill();\n        var fontSize = this.fontSize();\n        var glyphInfo = this.glyphInfo;\n        if (textDecoration === 'underline') {\n            context.beginPath();\n        }\n        for (var i = 0; i < glyphInfo.length; i++) {\n            context.save();\n            var p0 = glyphInfo[i].p0;\n            context.translate(p0.x, p0.y);\n            context.rotate(glyphInfo[i].rotation);\n            this.partialText = glyphInfo[i].text;\n            context.fillStrokeShape(this);\n            if (textDecoration === 'underline') {\n                if (i === 0) {\n                    context.moveTo(0, fontSize / 2 + 1);\n                }\n                context.lineTo(fontSize, fontSize / 2 + 1);\n            }\n            context.restore();\n        }\n        if (textDecoration === 'underline') {\n            context.strokeStyle = fill;\n            context.lineWidth = fontSize / 20;\n            context.stroke();\n        }\n        context.restore();\n    }\n    _hitFunc(context) {\n        context.beginPath();\n        var glyphInfo = this.glyphInfo;\n        if (glyphInfo.length >= 1) {\n            var p0 = glyphInfo[0].p0;\n            context.moveTo(p0.x, p0.y);\n        }\n        for (var i = 0; i < glyphInfo.length; i++) {\n            var p1 = glyphInfo[i].p1;\n            context.lineTo(p1.x, p1.y);\n        }\n        context.setAttr('lineWidth', this.fontSize());\n        context.setAttr('strokeStyle', this.colorKey);\n        context.stroke();\n    }\n    getTextWidth() {\n        return this.textWidth;\n    }\n    getTextHeight() {\n        Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n        return this.textHeight;\n    }\n    setText(text) {\n        return Text_1.Text.prototype.setText.call(this, text);\n    }\n    _getContextFont() {\n        return Text_1.Text.prototype._getContextFont.call(this);\n    }\n    _getTextSize(text) {\n        var dummyCanvas = this.dummyCanvas;\n        var _context = dummyCanvas.getContext('2d');\n        _context.save();\n        _context.font = this._getContextFont();\n        var metrics = _context.measureText(text);\n        _context.restore();\n        return {\n            width: metrics.width,\n            height: parseInt(`${this.fontSize()}`, 10),\n        };\n    }\n    _setTextData() {\n        const { width, height } = this._getTextSize(this.attrs.text);\n        this.textWidth = width;\n        this.textHeight = height;\n        this.glyphInfo = [];\n        if (!this.attrs.data) {\n            return null;\n        }\n        const letterSpacing = this.letterSpacing();\n        const align = this.align();\n        const kerningFunc = this.kerningFunc();\n        const textWidth = Math.max(this.textWidth + ((this.attrs.text || '').length - 1) * letterSpacing, 0);\n        let offset = 0;\n        if (align === 'center') {\n            offset = Math.max(0, this.pathLength / 2 - textWidth / 2);\n        }\n        if (align === 'right') {\n            offset = Math.max(0, this.pathLength - textWidth);\n        }\n        const charArr = (0, Text_1.stringToArray)(this.text());\n        let offsetToGlyph = offset;\n        for (var i = 0; i < charArr.length; i++) {\n            const charStartPoint = this._getPointAtLength(offsetToGlyph);\n            if (!charStartPoint)\n                return;\n            let glyphWidth = this._getTextSize(charArr[i]).width + letterSpacing;\n            if (charArr[i] === ' ' && align === 'justify') {\n                const numberOfSpaces = this.text().split(' ').length - 1;\n                glyphWidth += (this.pathLength - textWidth) / numberOfSpaces;\n            }\n            const charEndPoint = this._getPointAtLength(offsetToGlyph + glyphWidth);\n            if (!charEndPoint)\n                return;\n            const width = Path_1.Path.getLineLength(charStartPoint.x, charStartPoint.y, charEndPoint.x, charEndPoint.y);\n            let kern = 0;\n            if (kerningFunc) {\n                try {\n                    kern = kerningFunc(charArr[i - 1], charArr[i]) * this.fontSize();\n                }\n                catch (e) {\n                    kern = 0;\n                }\n            }\n            charStartPoint.x += kern;\n            charEndPoint.x += kern;\n            this.textWidth += kern;\n            const midpoint = Path_1.Path.getPointOnLine(kern + width / 2.0, charStartPoint.x, charStartPoint.y, charEndPoint.x, charEndPoint.y);\n            const rotation = Math.atan2(charEndPoint.y - charStartPoint.y, charEndPoint.x - charStartPoint.x);\n            this.glyphInfo.push({\n                transposeX: midpoint.x,\n                transposeY: midpoint.y,\n                text: charArr[i],\n                rotation: rotation,\n                p0: charStartPoint,\n                p1: charEndPoint,\n            });\n            offsetToGlyph += glyphWidth;\n        }\n    }\n    getSelfRect() {\n        if (!this.glyphInfo.length) {\n            return {\n                x: 0,\n                y: 0,\n                width: 0,\n                height: 0,\n            };\n        }\n        var points = [];\n        this.glyphInfo.forEach(function (info) {\n            points.push(info.p0.x);\n            points.push(info.p0.y);\n            points.push(info.p1.x);\n            points.push(info.p1.y);\n        });\n        var minX = points[0] || 0;\n        var maxX = points[0] || 0;\n        var minY = points[1] || 0;\n        var maxY = points[1] || 0;\n        var x, y;\n        for (var i = 0; i < points.length / 2; i++) {\n            x = points[i * 2];\n            y = points[i * 2 + 1];\n            minX = Math.min(minX, x);\n            maxX = Math.max(maxX, x);\n            minY = Math.min(minY, y);\n            maxY = Math.max(maxY, y);\n        }\n        var fontSize = this.fontSize();\n        return {\n            x: minX - fontSize / 2,\n            y: minY - fontSize / 2,\n            width: maxX - minX + fontSize,\n            height: maxY - minY + fontSize,\n        };\n    }\n    destroy() {\n        Util_1.Util.releaseCanvas(this.dummyCanvas);\n        return super.destroy();\n    }\n}\nexports.TextPath = TextPath;\nTextPath.prototype._fillFunc = _fillFunc;\nTextPath.prototype._strokeFunc = _strokeFunc;\nTextPath.prototype._fillFuncHit = _fillFunc;\nTextPath.prototype._strokeFuncHit = _strokeFunc;\nTextPath.prototype.className = 'TextPath';\nTextPath.prototype._attrsAffectingSize = ['text', 'fontSize', 'data'];\n(0, Global_1._registerNode)(TextPath);\nFactory_1.Factory.addGetterSetter(TextPath, 'data');\nFactory_1.Factory.addGetterSetter(TextPath, 'fontFamily', 'Arial');\nFactory_1.Factory.addGetterSetter(TextPath, 'fontSize', 12, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(TextPath, 'fontStyle', NORMAL);\nFactory_1.Factory.addGetterSetter(TextPath, 'align', 'left');\nFactory_1.Factory.addGetterSetter(TextPath, 'letterSpacing', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(TextPath, 'textBaseline', 'middle');\nFactory_1.Factory.addGetterSetter(TextPath, 'fontVariant', NORMAL);\nFactory_1.Factory.addGetterSetter(TextPath, 'text', EMPTY_STRING);\nFactory_1.Factory.addGetterSetter(TextPath, 'textDecoration', null);\nFactory_1.Factory.addGetterSetter(TextPath, 'kerningFunc', null);\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,QAAR,GAAmB,KAAK,CAAxB;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMK,YAAY,GAAGL,OAAO,CAAC,eAAD,CAA5B;;AACA,MAAMM,QAAQ,GAAGN,OAAO,CAAC,WAAD,CAAxB;;AACA,IAAIO,YAAY,GAAG,EAAnB;AAAA,IAAuBC,MAAM,GAAG,QAAhC;;AACA,SAASC,SAAT,CAAmBC,OAAnB,EAA4B;EACxBA,OAAO,CAACC,QAAR,CAAiB,KAAKC,WAAtB,EAAmC,CAAnC,EAAsC,CAAtC;AACH;;AACD,SAASC,WAAT,CAAqBH,OAArB,EAA8B;EAC1BA,OAAO,CAACI,UAAR,CAAmB,KAAKF,WAAxB,EAAqC,CAArC,EAAwC,CAAxC;AACH;;AACD,MAAMd,QAAN,SAAuBI,OAAO,CAACa,KAA/B,CAAqC;EACjCC,WAAW,CAACC,MAAD,EAAS;IAChB,MAAMA,MAAN;IACA,KAAKC,WAAL,GAAmBnB,MAAM,CAACoB,IAAP,CAAYC,mBAAZ,EAAnB;IACA,KAAKC,SAAL,GAAiB,EAAjB;;IACA,KAAKC,kBAAL;;IACA,KAAKC,EAAL,CAAQ,kBAAR,EAA4B,YAAY;MACpC,KAAKD,kBAAL;;MACA,KAAKE,YAAL;IACH,CAHD;IAIA,KAAKD,EAAL,CAAQ,kIAAR,EAA4I,KAAKC,YAAjJ;;IACA,KAAKA,YAAL;EACH;;EACDC,kBAAkB,GAAG;IACjB,OAAOtB,MAAM,CAACuB,IAAP,CAAYC,aAAZ,CAA0B,KAAKN,SAA/B,CAAP;EACH;;EACDO,iBAAiB,CAACC,MAAD,EAAS;IACtB,IAAI,CAAC,KAAKC,KAAL,CAAWC,IAAhB,EAAsB;MAClB,OAAO,IAAP;IACH;;IACD,MAAMC,WAAW,GAAG,KAAKC,UAAzB;;IACA,IAAIJ,MAAM,GAAG,CAAT,GAAaG,WAAjB,EAA8B;MAC1B,OAAO,IAAP;IACH;;IACD,OAAO7B,MAAM,CAACuB,IAAP,CAAYQ,2BAAZ,CAAwCL,MAAxC,EAAgD,KAAKR,SAArD,CAAP;EACH;;EACDC,kBAAkB,GAAG;IACjB,KAAKD,SAAL,GAAiBlB,MAAM,CAACuB,IAAP,CAAYS,aAAZ,CAA0B,KAAKL,KAAL,CAAWC,IAArC,CAAjB;IACA,KAAKE,UAAL,GAAkB,KAAKR,kBAAL,EAAlB;EACH;;EACDW,UAAU,CAAC1B,OAAD,EAAU;IAChBA,OAAO,CAAC2B,OAAR,CAAgB,MAAhB,EAAwB,KAAKC,eAAL,EAAxB;IACA5B,OAAO,CAAC2B,OAAR,CAAgB,cAAhB,EAAgC,KAAKE,YAAL,EAAhC;IACA7B,OAAO,CAAC2B,OAAR,CAAgB,WAAhB,EAA6B,MAA7B;IACA3B,OAAO,CAAC8B,IAAR;IACA,IAAIC,cAAc,GAAG,KAAKA,cAAL,EAArB;IACA,IAAIC,IAAI,GAAG,KAAKA,IAAL,EAAX;IACA,IAAIC,QAAQ,GAAG,KAAKA,QAAL,EAAf;IACA,IAAIC,SAAS,GAAG,KAAKA,SAArB;;IACA,IAAIH,cAAc,KAAK,WAAvB,EAAoC;MAChC/B,OAAO,CAACmC,SAAR;IACH;;IACD,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACf,MAA9B,EAAsCiB,CAAC,EAAvC,EAA2C;MACvCpC,OAAO,CAAC8B,IAAR;MACA,IAAIO,EAAE,GAAGH,SAAS,CAACE,CAAD,CAAT,CAAaC,EAAtB;MACArC,OAAO,CAACsC,SAAR,CAAkBD,EAAE,CAACE,CAArB,EAAwBF,EAAE,CAACG,CAA3B;MACAxC,OAAO,CAACyC,MAAR,CAAeP,SAAS,CAACE,CAAD,CAAT,CAAaM,QAA5B;MACA,KAAKxC,WAAL,GAAmBgC,SAAS,CAACE,CAAD,CAAT,CAAaO,IAAhC;MACA3C,OAAO,CAAC4C,eAAR,CAAwB,IAAxB;;MACA,IAAIb,cAAc,KAAK,WAAvB,EAAoC;QAChC,IAAIK,CAAC,KAAK,CAAV,EAAa;UACTpC,OAAO,CAAC6C,MAAR,CAAe,CAAf,EAAkBZ,QAAQ,GAAG,CAAX,GAAe,CAAjC;QACH;;QACDjC,OAAO,CAAC8C,MAAR,CAAeb,QAAf,EAAyBA,QAAQ,GAAG,CAAX,GAAe,CAAxC;MACH;;MACDjC,OAAO,CAAC+C,OAAR;IACH;;IACD,IAAIhB,cAAc,KAAK,WAAvB,EAAoC;MAChC/B,OAAO,CAACgD,WAAR,GAAsBhB,IAAtB;MACAhC,OAAO,CAACiD,SAAR,GAAoBhB,QAAQ,GAAG,EAA/B;MACAjC,OAAO,CAACkD,MAAR;IACH;;IACDlD,OAAO,CAAC+C,OAAR;EACH;;EACDI,QAAQ,CAACnD,OAAD,EAAU;IACdA,OAAO,CAACmC,SAAR;IACA,IAAID,SAAS,GAAG,KAAKA,SAArB;;IACA,IAAIA,SAAS,CAACf,MAAV,IAAoB,CAAxB,EAA2B;MACvB,IAAIkB,EAAE,GAAGH,SAAS,CAAC,CAAD,CAAT,CAAaG,EAAtB;MACArC,OAAO,CAAC6C,MAAR,CAAeR,EAAE,CAACE,CAAlB,EAAqBF,EAAE,CAACG,CAAxB;IACH;;IACD,KAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACf,MAA9B,EAAsCiB,CAAC,EAAvC,EAA2C;MACvC,IAAIgB,EAAE,GAAGlB,SAAS,CAACE,CAAD,CAAT,CAAagB,EAAtB;MACApD,OAAO,CAAC8C,MAAR,CAAeM,EAAE,CAACb,CAAlB,EAAqBa,EAAE,CAACZ,CAAxB;IACH;;IACDxC,OAAO,CAAC2B,OAAR,CAAgB,WAAhB,EAA6B,KAAKM,QAAL,EAA7B;IACAjC,OAAO,CAAC2B,OAAR,CAAgB,aAAhB,EAA+B,KAAK0B,QAApC;IACArD,OAAO,CAACkD,MAAR;EACH;;EACDI,YAAY,GAAG;IACX,OAAO,KAAKC,SAAZ;EACH;;EACDC,aAAa,GAAG;IACZnE,MAAM,CAACoB,IAAP,CAAYgD,IAAZ,CAAiB,2HAAjB;IACA,OAAO,KAAKC,UAAZ;EACH;;EACDC,OAAO,CAAChB,IAAD,EAAO;IACV,OAAOjD,MAAM,CAACkE,IAAP,CAAYC,SAAZ,CAAsBF,OAAtB,CAA8BG,IAA9B,CAAmC,IAAnC,EAAyCnB,IAAzC,CAAP;EACH;;EACDf,eAAe,GAAG;IACd,OAAOlC,MAAM,CAACkE,IAAP,CAAYC,SAAZ,CAAsBjC,eAAtB,CAAsCkC,IAAtC,CAA2C,IAA3C,CAAP;EACH;;EACDC,YAAY,CAACpB,IAAD,EAAO;IACf,IAAInC,WAAW,GAAG,KAAKA,WAAvB;;IACA,IAAIwD,QAAQ,GAAGxD,WAAW,CAACyD,UAAZ,CAAuB,IAAvB,CAAf;;IACAD,QAAQ,CAAClC,IAAT;;IACAkC,QAAQ,CAACE,IAAT,GAAgB,KAAKtC,eAAL,EAAhB;;IACA,IAAIuC,OAAO,GAAGH,QAAQ,CAACI,WAAT,CAAqBzB,IAArB,CAAd;;IACAqB,QAAQ,CAACjB,OAAT;;IACA,OAAO;MACHsB,KAAK,EAAEF,OAAO,CAACE,KADZ;MAEHC,MAAM,EAAEC,QAAQ,CAAE,GAAE,KAAKtC,QAAL,EAAgB,EAApB,EAAuB,EAAvB;IAFb,CAAP;EAIH;;EACDnB,YAAY,GAAG;IACX,MAAM;MAAEuD,KAAF;MAASC;IAAT,IAAoB,KAAKP,YAAL,CAAkB,KAAK3C,KAAL,CAAWuB,IAA7B,CAA1B;;IACA,KAAKY,SAAL,GAAiBc,KAAjB;IACA,KAAKX,UAAL,GAAkBY,MAAlB;IACA,KAAKpC,SAAL,GAAiB,EAAjB;;IACA,IAAI,CAAC,KAAKd,KAAL,CAAWC,IAAhB,EAAsB;MAClB,OAAO,IAAP;IACH;;IACD,MAAMmD,aAAa,GAAG,KAAKA,aAAL,EAAtB;IACA,MAAMC,KAAK,GAAG,KAAKA,KAAL,EAAd;IACA,MAAMC,WAAW,GAAG,KAAKA,WAAL,EAApB;IACA,MAAMnB,SAAS,GAAGoB,IAAI,CAACC,GAAL,CAAS,KAAKrB,SAAL,GAAiB,CAAC,CAAC,KAAKnC,KAAL,CAAWuB,IAAX,IAAmB,EAApB,EAAwBxB,MAAxB,GAAiC,CAAlC,IAAuCqD,aAAjE,EAAgF,CAAhF,CAAlB;IACA,IAAIK,MAAM,GAAG,CAAb;;IACA,IAAIJ,KAAK,KAAK,QAAd,EAAwB;MACpBI,MAAM,GAAGF,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,KAAKrD,UAAL,GAAkB,CAAlB,GAAsBgC,SAAS,GAAG,CAA9C,CAAT;IACH;;IACD,IAAIkB,KAAK,KAAK,OAAd,EAAuB;MACnBI,MAAM,GAAGF,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,KAAKrD,UAAL,GAAkBgC,SAA9B,CAAT;IACH;;IACD,MAAMuB,OAAO,GAAG,CAAC,GAAGpF,MAAM,CAACqF,aAAX,EAA0B,KAAKpC,IAAL,EAA1B,CAAhB;IACA,IAAIqC,aAAa,GAAGH,MAApB;;IACA,KAAK,IAAIzC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0C,OAAO,CAAC3D,MAA5B,EAAoCiB,CAAC,EAArC,EAAyC;MACrC,MAAM6C,cAAc,GAAG,KAAK/D,iBAAL,CAAuB8D,aAAvB,CAAvB;;MACA,IAAI,CAACC,cAAL,EACI;MACJ,IAAIC,UAAU,GAAG,KAAKnB,YAAL,CAAkBe,OAAO,CAAC1C,CAAD,CAAzB,EAA8BiC,KAA9B,GAAsCG,aAAvD;;MACA,IAAIM,OAAO,CAAC1C,CAAD,CAAP,KAAe,GAAf,IAAsBqC,KAAK,KAAK,SAApC,EAA+C;QAC3C,MAAMU,cAAc,GAAG,KAAKxC,IAAL,GAAYyC,KAAZ,CAAkB,GAAlB,EAAuBjE,MAAvB,GAAgC,CAAvD;QACA+D,UAAU,IAAI,CAAC,KAAK3D,UAAL,GAAkBgC,SAAnB,IAAgC4B,cAA9C;MACH;;MACD,MAAME,YAAY,GAAG,KAAKnE,iBAAL,CAAuB8D,aAAa,GAAGE,UAAvC,CAArB;;MACA,IAAI,CAACG,YAAL,EACI;MACJ,MAAMhB,KAAK,GAAG5E,MAAM,CAACuB,IAAP,CAAYsE,aAAZ,CAA0BL,cAAc,CAAC1C,CAAzC,EAA4C0C,cAAc,CAACzC,CAA3D,EAA8D6C,YAAY,CAAC9C,CAA3E,EAA8E8C,YAAY,CAAC7C,CAA3F,CAAd;MACA,IAAI+C,IAAI,GAAG,CAAX;;MACA,IAAIb,WAAJ,EAAiB;QACb,IAAI;UACAa,IAAI,GAAGb,WAAW,CAACI,OAAO,CAAC1C,CAAC,GAAG,CAAL,CAAR,EAAiB0C,OAAO,CAAC1C,CAAD,CAAxB,CAAX,GAA0C,KAAKH,QAAL,EAAjD;QACH,CAFD,CAGA,OAAOuD,CAAP,EAAU;UACND,IAAI,GAAG,CAAP;QACH;MACJ;;MACDN,cAAc,CAAC1C,CAAf,IAAoBgD,IAApB;MACAF,YAAY,CAAC9C,CAAb,IAAkBgD,IAAlB;MACA,KAAKhC,SAAL,IAAkBgC,IAAlB;MACA,MAAME,QAAQ,GAAGhG,MAAM,CAACuB,IAAP,CAAY0E,cAAZ,CAA2BH,IAAI,GAAGlB,KAAK,GAAG,GAA1C,EAA+CY,cAAc,CAAC1C,CAA9D,EAAiE0C,cAAc,CAACzC,CAAhF,EAAmF6C,YAAY,CAAC9C,CAAhG,EAAmG8C,YAAY,CAAC7C,CAAhH,CAAjB;MACA,MAAME,QAAQ,GAAGiC,IAAI,CAACgB,KAAL,CAAWN,YAAY,CAAC7C,CAAb,GAAiByC,cAAc,CAACzC,CAA3C,EAA8C6C,YAAY,CAAC9C,CAAb,GAAiB0C,cAAc,CAAC1C,CAA9E,CAAjB;MACA,KAAKL,SAAL,CAAe0D,IAAf,CAAoB;QAChBC,UAAU,EAAEJ,QAAQ,CAAClD,CADL;QAEhBuD,UAAU,EAAEL,QAAQ,CAACjD,CAFL;QAGhBG,IAAI,EAAEmC,OAAO,CAAC1C,CAAD,CAHG;QAIhBM,QAAQ,EAAEA,QAJM;QAKhBL,EAAE,EAAE4C,cALY;QAMhB7B,EAAE,EAAEiC;MANY,CAApB;MAQAL,aAAa,IAAIE,UAAjB;IACH;EACJ;;EACDa,WAAW,GAAG;IACV,IAAI,CAAC,KAAK7D,SAAL,CAAef,MAApB,EAA4B;MACxB,OAAO;QACHoB,CAAC,EAAE,CADA;QAEHC,CAAC,EAAE,CAFA;QAGH6B,KAAK,EAAE,CAHJ;QAIHC,MAAM,EAAE;MAJL,CAAP;IAMH;;IACD,IAAI0B,MAAM,GAAG,EAAb;IACA,KAAK9D,SAAL,CAAe+D,OAAf,CAAuB,UAAUC,IAAV,EAAgB;MACnCF,MAAM,CAACJ,IAAP,CAAYM,IAAI,CAAC7D,EAAL,CAAQE,CAApB;MACAyD,MAAM,CAACJ,IAAP,CAAYM,IAAI,CAAC7D,EAAL,CAAQG,CAApB;MACAwD,MAAM,CAACJ,IAAP,CAAYM,IAAI,CAAC9C,EAAL,CAAQb,CAApB;MACAyD,MAAM,CAACJ,IAAP,CAAYM,IAAI,CAAC9C,EAAL,CAAQZ,CAApB;IACH,CALD;IAMA,IAAI2D,IAAI,GAAGH,MAAM,CAAC,CAAD,CAAN,IAAa,CAAxB;IACA,IAAII,IAAI,GAAGJ,MAAM,CAAC,CAAD,CAAN,IAAa,CAAxB;IACA,IAAIK,IAAI,GAAGL,MAAM,CAAC,CAAD,CAAN,IAAa,CAAxB;IACA,IAAIM,IAAI,GAAGN,MAAM,CAAC,CAAD,CAAN,IAAa,CAAxB;IACA,IAAIzD,CAAJ,EAAOC,CAAP;;IACA,KAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4D,MAAM,CAAC7E,MAAP,GAAgB,CAApC,EAAuCiB,CAAC,EAAxC,EAA4C;MACxCG,CAAC,GAAGyD,MAAM,CAAC5D,CAAC,GAAG,CAAL,CAAV;MACAI,CAAC,GAAGwD,MAAM,CAAC5D,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAV;MACA+D,IAAI,GAAGxB,IAAI,CAAC4B,GAAL,CAASJ,IAAT,EAAe5D,CAAf,CAAP;MACA6D,IAAI,GAAGzB,IAAI,CAACC,GAAL,CAASwB,IAAT,EAAe7D,CAAf,CAAP;MACA8D,IAAI,GAAG1B,IAAI,CAAC4B,GAAL,CAASF,IAAT,EAAe7D,CAAf,CAAP;MACA8D,IAAI,GAAG3B,IAAI,CAACC,GAAL,CAAS0B,IAAT,EAAe9D,CAAf,CAAP;IACH;;IACD,IAAIP,QAAQ,GAAG,KAAKA,QAAL,EAAf;IACA,OAAO;MACHM,CAAC,EAAE4D,IAAI,GAAGlE,QAAQ,GAAG,CADlB;MAEHO,CAAC,EAAE6D,IAAI,GAAGpE,QAAQ,GAAG,CAFlB;MAGHoC,KAAK,EAAE+B,IAAI,GAAGD,IAAP,GAAclE,QAHlB;MAIHqC,MAAM,EAAEgC,IAAI,GAAGD,IAAP,GAAcpE;IAJnB,CAAP;EAMH;;EACDuE,OAAO,GAAG;IACNnH,MAAM,CAACoB,IAAP,CAAYgG,aAAZ,CAA0B,KAAKjG,WAA/B;IACA,OAAO,MAAMgG,OAAN,EAAP;EACH;;AA3MgC;;AA6MrCtH,OAAO,CAACE,QAAR,GAAmBA,QAAnB;AACAA,QAAQ,CAACyE,SAAT,CAAmB9D,SAAnB,GAA+BA,SAA/B;AACAX,QAAQ,CAACyE,SAAT,CAAmB1D,WAAnB,GAAiCA,WAAjC;AACAf,QAAQ,CAACyE,SAAT,CAAmB6C,YAAnB,GAAkC3G,SAAlC;AACAX,QAAQ,CAACyE,SAAT,CAAmB8C,cAAnB,GAAoCxG,WAApC;AACAf,QAAQ,CAACyE,SAAT,CAAmB+C,SAAnB,GAA+B,UAA/B;AACAxH,QAAQ,CAACyE,SAAT,CAAmBgD,mBAAnB,GAAyC,CAAC,MAAD,EAAS,UAAT,EAAqB,MAArB,CAAzC;AACA,CAAC,GAAGjH,QAAQ,CAACkH,aAAb,EAA4B1H,QAA5B;AACAG,SAAS,CAACwH,OAAV,CAAkBC,eAAlB,CAAkC5H,QAAlC,EAA4C,MAA5C;AACAG,SAAS,CAACwH,OAAV,CAAkBC,eAAlB,CAAkC5H,QAAlC,EAA4C,YAA5C,EAA0D,OAA1D;AACAG,SAAS,CAACwH,OAAV,CAAkBC,eAAlB,CAAkC5H,QAAlC,EAA4C,UAA5C,EAAwD,EAAxD,EAA4D,CAAC,GAAGO,YAAY,CAACsH,kBAAjB,GAA5D;AACA1H,SAAS,CAACwH,OAAV,CAAkBC,eAAlB,CAAkC5H,QAAlC,EAA4C,WAA5C,EAAyDU,MAAzD;AACAP,SAAS,CAACwH,OAAV,CAAkBC,eAAlB,CAAkC5H,QAAlC,EAA4C,OAA5C,EAAqD,MAArD;AACAG,SAAS,CAACwH,OAAV,CAAkBC,eAAlB,CAAkC5H,QAAlC,EAA4C,eAA5C,EAA6D,CAA7D,EAAgE,CAAC,GAAGO,YAAY,CAACsH,kBAAjB,GAAhE;AACA1H,SAAS,CAACwH,OAAV,CAAkBC,eAAlB,CAAkC5H,QAAlC,EAA4C,cAA5C,EAA4D,QAA5D;AACAG,SAAS,CAACwH,OAAV,CAAkBC,eAAlB,CAAkC5H,QAAlC,EAA4C,aAA5C,EAA2DU,MAA3D;AACAP,SAAS,CAACwH,OAAV,CAAkBC,eAAlB,CAAkC5H,QAAlC,EAA4C,MAA5C,EAAoDS,YAApD;AACAN,SAAS,CAACwH,OAAV,CAAkBC,eAAlB,CAAkC5H,QAAlC,EAA4C,gBAA5C,EAA8D,IAA9D;AACAG,SAAS,CAACwH,OAAV,CAAkBC,eAAlB,CAAkC5H,QAAlC,EAA4C,aAA5C,EAA2D,IAA3D"},"metadata":{},"sourceType":"script"}