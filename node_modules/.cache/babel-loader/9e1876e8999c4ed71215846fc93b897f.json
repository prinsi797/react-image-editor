{"ast":null,"code":"var _jsxFileName = \"D:\\\\screenshort-extension\\\\image-editor-react\\\\src\\\\component\\\\Main.jsx\",\n    _s = $RefreshSig$();\n\n// import React, { useState, useRef, useEffect } from 'react';\n// import './style/main.scss';\n// import ReactCrop from 'react-image-crop';\n// import 'react-image-crop/dist/ReactCrop.css';\n// import { GrRotateLeft, GrRotateRight, GrEdit, GrSuperscript } from 'react-icons/gr';\n// import { CgMergeVertical, CgMergeHorizontal } from 'react-icons/cg';\n// import { IoMdUndo, IoMdRedo, IoIosSave, IoIosImage } from 'react-icons/io';\n// import storeData from './LinkedList';\n// import logo from './style/logo.jpeg';\n// const Main = () => {\n//     const filterElement = [\n//         { name: 'brightness', maxValue: 200 },\n//         { name: 'grayscale', maxValue: 100 },\n//         { name: 'sepia', maxValue: 100 },\n//         { name: 'saturate', maxValue: 200 },\n//         { name: 'contrast', maxValue: 200 },\n//         { name: 'hueRotate', maxValue: 360 }\n//     ];\n//     const [property, setProperty] = useState({ name: 'brightness', maxValue: 200 });\n//     const [details, setDetails] = useState(null);\n//     const [crop, setCrop] = useState({});\n//     const [drawing, setDrawing] = useState(false);\n//     const [text, setText] = useState({ value: '', x: 50, y: 50 });\n//     const [editingText, setEditingText] = useState(false);\n//     const canvasRef = useRef(null);\n//     const [state, setState] = useState({\n//         image: '',\n//         brightness: 100,\n//         grayscale: 0,\n//         sepia: 0,\n//         saturate: 100,\n//         contrast: 100,\n//         hueRotate: 0,\n//         rotate: 0,\n//         vartical: 1,\n//         horizental: 1\n//     });\n//     useEffect(() => {\n//         if (details) {\n//             drawImage();\n//         }\n//     }, [state, details, crop, text]);\n//     const drawImage = () => {\n//         const canvas = canvasRef.current;\n//         const ctx = canvas.getContext('2d');\n//         if (!details || !canvas) return;\n//         const { width, height } = canvas;\n//         // Adjust the canvas size to match the image size\n//         canvas.width = details.naturalWidth;\n//         canvas.height = details.naturalHeight;\n//         ctx.clearRect(0, 0, width, height);\n//         ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\n//         ctx.translate(width / 2, height / 2);\n//         ctx.rotate(state.rotate * Math.PI / 180);\n//         ctx.scale(state.vartical, state.horizental);\n//         ctx.drawImage(details, -width / 2, -height / 2, width, height);\n//         ctx.resetTransform();\n//         if (text.value) {\n//             ctx.font = '30px Arial';\n//             ctx.fillStyle = 'red';\n//             ctx.fillText(text.value, text.x, text.y);\n//         }\n//     };\n//     const inputHandle = (e) => {\n//         setState({\n//             ...state,\n//             [e.target.name]: e.target.value\n//         });\n//     };\n//     const leftRotate = () => {\n//         setState(prevState => ({\n//             ...prevState,\n//             rotate: prevState.rotate - 90\n//         }));\n//         storeData.insert({ ...state, rotate: state.rotate - 90 });\n//     };\n//     const rightRotate = () => {\n//         setState(prevState => ({\n//             ...prevState,\n//             rotate: prevState.rotate + 90\n//         }));\n//         storeData.insert({ ...state, rotate: state.rotate + 90 });\n//     };\n//     const varticalFlip = () => {\n//         setState(prevState => ({\n//             ...prevState,\n//             vartical: prevState.vartical === 1 ? -1 : 1\n//         }));\n//         storeData.insert({ ...state, vartical: state.vartical === 1 ? -1 : 1 });\n//     };\n//     const horizentalFlip = () => {\n//         setState(prevState => ({\n//             ...prevState,\n//             horizental: prevState.horizental === 1 ? -1 : 1\n//         }));\n//         storeData.insert({ ...state, horizental: state.horizental === 1 ? -1 : 1 });\n//     };\n//     const redo = () => {\n//         const data = storeData.redoEdit();\n//         if (data) {\n//             setState(data);\n//         }\n//     };\n//     const undo = () => {\n//         const data = storeData.undoEdit();\n//         if (data) {\n//             setState(data);\n//         }\n//     };\n//     const imageHandle = (e) => {\n//         if (e.target.files.length !== 0) {\n//             const reader = new FileReader();\n//             reader.onload = () => {\n//                 const img = new Image();\n//                 img.src = reader.result;\n//                 img.onload = () => {\n//                     setDetails(img);\n//                     setState({\n//                         ...state,\n//                         image: reader.result\n//                     });\n//                     storeData.insert({\n//                         image: reader.result,\n//                         brightness: 100,\n//                         grayscale: 0,\n//                         sepia: 0,\n//                         saturate: 100,\n//                         contrast: 100,\n//                         hueRotate: 0,\n//                         rotate: 0,\n//                         vartical: 1,\n//                         horizental: 1\n//                     });\n//                 };\n//             };\n//             reader.readAsDataURL(e.target.files[0]);\n//         }\n//     };\n//     const imageCrop = () => {\n//         if (!details || !crop || !canvasRef.current) return;\n//         const canvas = document.createElement('canvas');\n//         const ctx = canvas.getContext('2d');\n//         const scaleX = details.naturalWidth / details.width;\n//         const scaleY = details.naturalHeight / details.height;\n//         canvas.width = crop.width;\n//         canvas.height = crop.height;\n//         ctx.drawImage(\n//             details,\n//             crop.x * scaleX,\n//             crop.y * scaleY,\n//             crop.width * scaleX,\n//             crop.height * scaleY,\n//             0,\n//             0,\n//             crop.width,\n//             crop.height\n//         );\n//         const base64Url = canvas.toDataURL('image/jpeg');\n//         setState({\n//             ...state,\n//             image: base64Url\n//         });\n//     };\n//     const saveImage = () => {\n//         const canvas = document.createElement('canvas');\n//         const ctx = canvas.getContext('2d');\n//         if (!details) return;\n//         canvas.width = details.naturalWidth;\n//         canvas.height = details.naturalHeight;\n//         ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\n//         ctx.translate(canvas.width / 2, canvas.height / 2);\n//         ctx.rotate(state.rotate * Math.PI / 180);\n//         ctx.scale(state.vartical, state.horizental);\n//         ctx.drawImage(\n//             details,\n//             -canvas.width / 2,\n//             -canvas.height / 2,\n//             canvas.width,\n//             canvas.height\n//         );\n//         ctx.resetTransform();\n//         if (text.value) {\n//             ctx.font = '30px Arial';\n//             ctx.fillStyle = 'red';\n//             ctx.fillText(text.value, text.x, text.y);\n//         }\n//         const link = document.createElement('a');\n//         link.download = 'image_edit.jpg';\n//         link.href = canvas.toDataURL();\n//         link.click();\n//     };\n//     const startDrawing = (e) => {\n//         if (drawing) {\n//             const canvas = canvasRef.current;\n//             const ctx = canvas.getContext('2d');\n//             ctx.beginPath();\n//             ctx.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n//         }\n//     };\n//     const draw = (e) => {\n//         if (drawing) {\n//             const canvas = canvasRef.current;\n//             const ctx = canvas.getContext('2d');\n//             ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n//             ctx.strokeStyle = '#000000'; // Set the pencil color (black)\n//             ctx.lineWidth = 2; // Set the pencil width\n//             ctx.lineCap = 'round'; // Set the line cap for smoother lines\n//             ctx.stroke();\n//         }\n//     };\n//     const stopDrawing = () => {\n//         if (drawing) {\n//             const canvas = canvasRef.current;\n//             const ctx = canvas.getContext('2d');\n//             ctx.closePath();\n//         }\n//     };\n//     const enableDrawing = () => {\n//         setDrawing(!drawing);\n//     };\n//     const textAdd = () => {\n//         setText({ value: 'Hello World', x: 50, y: 50 });\n//         setEditingText(true);\n//     };\n//     const handleTextChange = (e) => {\n//         setText({ ...text, value: e.target.value });\n//     };\n//     const handleTextDrag = (e) => {\n//         if (editingText) {\n//             const canvas = canvasRef.current;\n//             const { offsetX, offsetY } = e.nativeEvent;\n//             // Ensure the text input remains within the canvas bounds\n//             const x = Math.max(0, Math.min(offsetX, canvas.width));\n//             const y = Math.max(0, Math.min(offsetY, canvas.height));\n//             setText({ ...text, x, y });\n//         }\n//     };\n//     const stopEditingText = () => {\n//         setEditingText(false);\n//     };\n//     return (\n//         <div className=\"image-editor\">\n//             <header className=\"header\">\n//                 {/* <img src={logo} alt=\"Logo\" className=\"logo\" /> */}\n//                 <h2 className=\"logo\">E D I T O R</h2>\n//                 <div className=\"header-buttons\">\n//                     <button onClick={saveImage}><IoIosSave />Save</button>\n//                     <button onClick={undo}><IoMdUndo />Undo</button>\n//                     <button onClick={redo}><IoMdRedo />Redo</button>\n//                 </div>\n//             </header>\n//             <div className=\"sidebar\">\n//                 <div className=\"sidebar-buttons\">\n//                     <label htmlFor=\"choose\" className=\"image-upload\">\n//                         <IoIosImage />\n//                         <span>Choose Image</span>\n//                         <input type=\"file\" accept=\"image/*\" id=\"choose\" onChange={imageHandle} />\n//                     </label>\n//                 </div>\n//                 <div className=\"draw-text-buttons\">\n//                     <button onClick={enableDrawing}><GrEdit />Draw</button>\n//                     <button onClick={textAdd}><GrSuperscript />Text</button>\n//                 </div>\n//                 <div className=\"adjustment-sliders\">\n//                     {filterElement.map((v, i) => (\n//                         <button key={i} onClick={() => setProperty(v)}>{v.name}</button>\n//                     ))}\n//                 </div>\n//                 <div className=\"slider\">\n//                     <input\n//                         type=\"range\"\n//                         name={property.name}\n//                         max={property.maxValue}\n//                         value={state[property.name]}\n//                         onChange={inputHandle}\n//                     />\n//                 </div>\n//                 <div className=\"rotation-buttons\">\n//                     <button onClick={leftRotate}><GrRotateLeft /></button>\n//                     <button onClick={rightRotate}><GrRotateRight /></button>\n//                     <button onClick={varticalFlip}><CgMergeVertical /></button>\n//                     <button onClick={horizentalFlip}><CgMergeHorizontal /></button>\n//                 </div>\n//                 <div className=\"history-buttons\">\n//                     {/* Removed from sidebar */}\n//                 </div>\n//             </div>\n//             <div className=\"app-content\">\n//                 <div className=\"canvas-container\">\n//                     <canvas\n//                         className=\"responsive-canvas\"\n//                         ref={canvasRef}\n//                         onMouseDown={startDrawing}\n//                         onMouseMove={draw}\n//                         onMouseUp={stopDrawing}\n//                         onMouseLeave={stopDrawing}\n//                         onClick={handleTextDrag}\n//                         onDoubleClick={stopEditingText}\n//                     />\n//                     {editingText && (\n//                         <input\n//                             type=\"text\"\n//                             value={text.value}\n//                             onChange={handleTextChange}\n//                             onMouseDown={(e) => e.stopPropagation()}\n//                         />\n//                     )}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n// export default Main;\nimport React, { useState, useRef, useEffect } from 'react';\nimport './style/main.scss';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { GrRotateLeft, GrRotateRight, GrEdit, GrSuperscript } from 'react-icons/gr';\nimport { CgMergeVertical, CgMergeHorizontal } from 'react-icons/cg';\nimport { IoMdUndo, IoMdRedo, IoIosSave, IoIosImage } from 'react-icons/io';\nimport { ChromePicker } from 'react-color'; // Import the color picker\n\nimport storeData from './LinkedList';\nimport logo from './style/logo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Main = () => {\n  _s();\n\n  const filterElement = [{\n    name: 'brightness',\n    maxValue: 200\n  }, {\n    name: 'grayscale',\n    maxValue: 100\n  }, {\n    name: 'sepia',\n    maxValue: 100\n  }, {\n    name: 'saturate',\n    maxValue: 200\n  }, {\n    name: 'contrast',\n    maxValue: 200\n  }, {\n    name: 'hueRotate',\n    maxValue: 360\n  }];\n  const [property, setProperty] = useState({\n    name: 'brightness',\n    maxValue: 200\n  });\n  const [details, setDetails] = useState(null);\n  const [crop, setCrop] = useState({});\n  const [drawing, setDrawing] = useState(false);\n  const [drawingEnabled, setDrawingEnabled] = useState(false);\n  const [text, setText] = useState({\n    value: '',\n    x: 50,\n    y: 50\n  });\n  const [editingText, setEditingText] = useState(false);\n  const [textColor, setTextColor] = useState('#ff0000'); // State for text color\n\n  const canvasRef = useRef(null);\n  const [state, setState] = useState({\n    image: '',\n    brightness: 100,\n    grayscale: 0,\n    sepia: 0,\n    saturate: 100,\n    contrast: 100,\n    hueRotate: 0,\n    rotate: 0,\n    vartical: 1,\n    horizental: 1\n  });\n  useEffect(() => {\n    if (details) {\n      drawImage();\n    }\n  }, [state, details, crop, text]);\n\n  const drawImage = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!details || !canvas) return;\n    const {\n      width,\n      height\n    } = canvas; // Adjust the canvas size to match the image size\n\n    canvas.width = details.naturalWidth;\n    canvas.height = details.naturalHeight;\n    ctx.clearRect(0, 0, width, height);\n    ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\n    ctx.translate(width / 2, height / 2);\n    ctx.rotate(state.rotate * Math.PI / 180);\n    ctx.scale(state.vartical, state.horizental);\n    ctx.drawImage(details, -width / 2, -height / 2, width, height);\n    ctx.resetTransform();\n\n    if (text.value) {\n      ctx.font = '30px Arial';\n      ctx.fillStyle = textColor; // Use the selected text color\n\n      ctx.fillText(text.value, text.x, text.y);\n    }\n  };\n\n  const inputHandle = e => {\n    setState({ ...state,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const leftRotate = () => {\n    setState(prevState => ({ ...prevState,\n      rotate: prevState.rotate - 90\n    }));\n    storeData.insert({ ...state,\n      rotate: state.rotate - 90\n    });\n  };\n\n  const rightRotate = () => {\n    setState(prevState => ({ ...prevState,\n      rotate: prevState.rotate + 90\n    }));\n    storeData.insert({ ...state,\n      rotate: state.rotate + 90\n    });\n  };\n\n  const varticalFlip = () => {\n    setState(prevState => ({ ...prevState,\n      vartical: prevState.vartical === 1 ? -1 : 1\n    }));\n    storeData.insert({ ...state,\n      vartical: state.vartical === 1 ? -1 : 1\n    });\n  };\n\n  const horizentalFlip = () => {\n    setState(prevState => ({ ...prevState,\n      horizental: prevState.horizental === 1 ? -1 : 1\n    }));\n    storeData.insert({ ...state,\n      horizental: state.horizental === 1 ? -1 : 1\n    });\n  };\n\n  const redo = () => {\n    const data = storeData.redoEdit();\n\n    if (data) {\n      setState(data);\n    }\n  };\n\n  const undo = () => {\n    const data = storeData.undoEdit();\n\n    if (data) {\n      setState(data);\n    }\n  };\n\n  const imageHandle = e => {\n    if (e.target.files.length !== 0) {\n      const reader = new FileReader();\n\n      reader.onload = () => {\n        const img = new Image();\n        img.src = reader.result;\n\n        img.onload = () => {\n          setDetails(img);\n          setState({ ...state,\n            image: reader.result\n          });\n          storeData.insert({\n            image: reader.result,\n            brightness: 100,\n            grayscale: 0,\n            sepia: 0,\n            saturate: 100,\n            contrast: 100,\n            hueRotate: 0,\n            rotate: 0,\n            vartical: 1,\n            horizental: 1\n          });\n        };\n      };\n\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  const imageCrop = () => {\n    if (!details || !crop || !canvasRef.current) return;\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    const scaleX = details.naturalWidth / details.width;\n    const scaleY = details.naturalHeight / details.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    ctx.drawImage(details, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    const base64Url = canvas.toDataURL('image/jpeg');\n    setState({ ...state,\n      image: base64Url\n    });\n  };\n\n  const saveImage = () => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    if (!details) return;\n    canvas.width = details.naturalWidth;\n    canvas.height = details.naturalHeight;\n    ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\n    ctx.translate(canvas.width / 2, canvas.height / 2);\n    ctx.rotate(state.rotate * Math.PI / 180);\n    ctx.scale(state.vartical, state.horizental);\n    ctx.drawImage(details, -canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);\n    ctx.resetTransform(); // Draw the text\n\n    if (text.value) {\n      ctx.font = '30px Arial';\n      ctx.fillStyle = textColor; // Use the selected text color\n\n      ctx.fillText(text.value, text.x, text.y);\n    } // Draw the current content of the canvas (including lines)\n\n\n    const currentCanvas = canvasRef.current;\n\n    if (currentCanvas) {\n      ctx.drawImage(currentCanvas, 0, 0);\n    }\n\n    const link = document.createElement('a');\n    link.download = 'image_edit.jpg';\n    link.href = canvas.toDataURL();\n    link.click();\n  };\n\n  const startDrawing = e => {\n    if (drawingEnabled) {\n      setDrawing(true);\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.beginPath();\n      ctx.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n    }\n  };\n\n  const draw = e => {\n    if (drawing && drawingEnabled) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n      ctx.strokeStyle = '#000000'; // Set the pencil color (black)\n\n      ctx.lineWidth = 2; // Set the pencil width\n\n      ctx.lineCap = 'round'; // Set the line cap for smoother lines\n\n      ctx.stroke();\n    }\n  };\n\n  const stopDrawing = () => {\n    if (drawing) {\n      setDrawing(false);\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.closePath();\n    }\n  };\n\n  const handleTextChange = e => {\n    setText({ ...text,\n      value: e.target.value\n    });\n  };\n\n  const handleTextPosition = e => {\n    setText({ ...text,\n      x: e.nativeEvent.offsetX,\n      y: e.nativeEvent.offsetY\n    });\n  };\n\n  const handleTextEditToggle = () => {\n    setEditingText(!editingText);\n  };\n\n  const handleTextColorChange = color => {\n    setTextColor(color.hex); // Update text color with selected color\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"Logo\",\n        className: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: imageHandle,\n        className: \"upload-button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: leftRotate,\n        className: \"rotate-button\",\n        children: /*#__PURE__*/_jsxDEV(GrRotateLeft, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: rightRotate,\n        className: \"rotate-button\",\n        children: /*#__PURE__*/_jsxDEV(GrRotateRight, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: varticalFlip,\n        className: \"flip-button\",\n        children: /*#__PURE__*/_jsxDEV(CgMergeVertical, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: horizentalFlip,\n        className: \"flip-button\",\n        children: /*#__PURE__*/_jsxDEV(CgMergeHorizontal, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: undo,\n        className: \"undo-button\",\n        children: /*#__PURE__*/_jsxDEV(IoMdUndo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: redo,\n        className: \"redo-button\",\n        children: /*#__PURE__*/_jsxDEV(IoMdRedo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveImage,\n        className: \"save-button\",\n        children: /*#__PURE__*/_jsxDEV(IoIosSave, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 662,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 635,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidebar\",\n      children: [filterElement.map(filter => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: filter.name,\n          children: filter.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 668,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          id: filter.name,\n          name: filter.name,\n          min: \"0\",\n          max: filter.maxValue,\n          value: state[filter.name],\n          onChange: inputHandle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 25\n        }, this)]\n      }, filter.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-tools\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleTextEditToggle,\n          className: \"text-edit-button\",\n          children: /*#__PURE__*/_jsxDEV(GrEdit, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 682,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 21\n        }, this), editingText && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-editor\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: text.value,\n            onChange: handleTextChange,\n            onClick: handleTextPosition\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(ChromePicker, {\n            color: textColor,\n            onChangeComplete: handleTextColorChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 692,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"canvas-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"canvas\",\n        onMouseDown: startDrawing,\n        onMouseMove: draw,\n        onMouseUp: stopDrawing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 701,\n        columnNumber: 17\n      }, this), details && /*#__PURE__*/_jsxDEV(ReactCrop, {\n        src: state.image,\n        crop: crop,\n        onChange: setCrop,\n        onComplete: imageCrop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 700,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 634,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Main, \"Liv+4/z+JIGmFxPOl+YTxvZVOV8=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ReactCrop","GrRotateLeft","GrRotateRight","GrEdit","GrSuperscript","CgMergeVertical","CgMergeHorizontal","IoMdUndo","IoMdRedo","IoIosSave","IoIosImage","ChromePicker","storeData","logo","Main","filterElement","name","maxValue","property","setProperty","details","setDetails","crop","setCrop","drawing","setDrawing","drawingEnabled","setDrawingEnabled","text","setText","value","x","y","editingText","setEditingText","textColor","setTextColor","canvasRef","state","setState","image","brightness","grayscale","sepia","saturate","contrast","hueRotate","rotate","vartical","horizental","drawImage","canvas","current","ctx","getContext","width","height","naturalWidth","naturalHeight","clearRect","filter","translate","Math","PI","scale","resetTransform","font","fillStyle","fillText","inputHandle","e","target","leftRotate","prevState","insert","rightRotate","varticalFlip","horizentalFlip","redo","data","redoEdit","undo","undoEdit","imageHandle","files","length","reader","FileReader","onload","img","Image","src","result","readAsDataURL","imageCrop","document","createElement","scaleX","scaleY","base64Url","toDataURL","saveImage","currentCanvas","link","download","href","click","startDrawing","beginPath","moveTo","nativeEvent","offsetX","offsetY","draw","lineTo","strokeStyle","lineWidth","lineCap","stroke","stopDrawing","closePath","handleTextChange","handleTextPosition","handleTextEditToggle","handleTextColorChange","color","hex","map"],"sources":["D:/screenshort-extension/image-editor-react/src/component/Main.jsx"],"sourcesContent":["// import React, { useState, useRef, useEffect } from 'react';\r\n// import './style/main.scss';\r\n// import ReactCrop from 'react-image-crop';\r\n// import 'react-image-crop/dist/ReactCrop.css';\r\n// import { GrRotateLeft, GrRotateRight, GrEdit, GrSuperscript } from 'react-icons/gr';\r\n// import { CgMergeVertical, CgMergeHorizontal } from 'react-icons/cg';\r\n// import { IoMdUndo, IoMdRedo, IoIosSave, IoIosImage } from 'react-icons/io';\r\n// import storeData from './LinkedList';\r\n// import logo from './style/logo.jpeg';\r\n\r\n// const Main = () => {\r\n//     const filterElement = [\r\n//         { name: 'brightness', maxValue: 200 },\r\n//         { name: 'grayscale', maxValue: 100 },\r\n//         { name: 'sepia', maxValue: 100 },\r\n//         { name: 'saturate', maxValue: 200 },\r\n//         { name: 'contrast', maxValue: 200 },\r\n//         { name: 'hueRotate', maxValue: 360 }\r\n//     ];\r\n\r\n//     const [property, setProperty] = useState({ name: 'brightness', maxValue: 200 });\r\n//     const [details, setDetails] = useState(null);\r\n//     const [crop, setCrop] = useState({});\r\n//     const [drawing, setDrawing] = useState(false);\r\n//     const [text, setText] = useState({ value: '', x: 50, y: 50 });\r\n//     const [editingText, setEditingText] = useState(false);\r\n//     const canvasRef = useRef(null);\r\n\r\n//     const [state, setState] = useState({\r\n//         image: '',\r\n//         brightness: 100,\r\n//         grayscale: 0,\r\n//         sepia: 0,\r\n//         saturate: 100,\r\n//         contrast: 100,\r\n//         hueRotate: 0,\r\n//         rotate: 0,\r\n//         vartical: 1,\r\n//         horizental: 1\r\n//     });\r\n\r\n//     useEffect(() => {\r\n//         if (details) {\r\n//             drawImage();\r\n//         }\r\n//     }, [state, details, crop, text]);\r\n\r\n//     const drawImage = () => {\r\n//         const canvas = canvasRef.current;\r\n//         const ctx = canvas.getContext('2d');\r\n//         if (!details || !canvas) return;\r\n    \r\n//         const { width, height } = canvas;\r\n    \r\n//         // Adjust the canvas size to match the image size\r\n//         canvas.width = details.naturalWidth;\r\n//         canvas.height = details.naturalHeight;\r\n    \r\n//         ctx.clearRect(0, 0, width, height);\r\n    \r\n//         ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\r\n//         ctx.translate(width / 2, height / 2);\r\n//         ctx.rotate(state.rotate * Math.PI / 180);\r\n//         ctx.scale(state.vartical, state.horizental);\r\n//         ctx.drawImage(details, -width / 2, -height / 2, width, height);\r\n//         ctx.resetTransform();\r\n    \r\n//         if (text.value) {\r\n//             ctx.font = '30px Arial';\r\n//             ctx.fillStyle = 'red';\r\n//             ctx.fillText(text.value, text.x, text.y);\r\n//         }\r\n//     };\r\n    \r\n\r\n//     const inputHandle = (e) => {\r\n//         setState({\r\n//             ...state,\r\n//             [e.target.name]: e.target.value\r\n//         });\r\n//     };\r\n\r\n//     const leftRotate = () => {\r\n//         setState(prevState => ({\r\n//             ...prevState,\r\n//             rotate: prevState.rotate - 90\r\n//         }));\r\n//         storeData.insert({ ...state, rotate: state.rotate - 90 });\r\n//     };\r\n\r\n//     const rightRotate = () => {\r\n//         setState(prevState => ({\r\n//             ...prevState,\r\n//             rotate: prevState.rotate + 90\r\n//         }));\r\n//         storeData.insert({ ...state, rotate: state.rotate + 90 });\r\n//     };\r\n\r\n//     const varticalFlip = () => {\r\n//         setState(prevState => ({\r\n//             ...prevState,\r\n//             vartical: prevState.vartical === 1 ? -1 : 1\r\n//         }));\r\n//         storeData.insert({ ...state, vartical: state.vartical === 1 ? -1 : 1 });\r\n//     };\r\n\r\n//     const horizentalFlip = () => {\r\n//         setState(prevState => ({\r\n//             ...prevState,\r\n//             horizental: prevState.horizental === 1 ? -1 : 1\r\n//         }));\r\n//         storeData.insert({ ...state, horizental: state.horizental === 1 ? -1 : 1 });\r\n//     };\r\n\r\n//     const redo = () => {\r\n//         const data = storeData.redoEdit();\r\n//         if (data) {\r\n//             setState(data);\r\n//         }\r\n//     };\r\n\r\n//     const undo = () => {\r\n//         const data = storeData.undoEdit();\r\n//         if (data) {\r\n//             setState(data);\r\n//         }\r\n//     };\r\n\r\n//     const imageHandle = (e) => {\r\n//         if (e.target.files.length !== 0) {\r\n//             const reader = new FileReader();\r\n//             reader.onload = () => {\r\n//                 const img = new Image();\r\n//                 img.src = reader.result;\r\n//                 img.onload = () => {\r\n//                     setDetails(img);\r\n//                     setState({\r\n//                         ...state,\r\n//                         image: reader.result\r\n//                     });\r\n//                     storeData.insert({\r\n//                         image: reader.result,\r\n//                         brightness: 100,\r\n//                         grayscale: 0,\r\n//                         sepia: 0,\r\n//                         saturate: 100,\r\n//                         contrast: 100,\r\n//                         hueRotate: 0,\r\n//                         rotate: 0,\r\n//                         vartical: 1,\r\n//                         horizental: 1\r\n//                     });\r\n//                 };\r\n//             };\r\n//             reader.readAsDataURL(e.target.files[0]);\r\n//         }\r\n//     };\r\n\r\n//     const imageCrop = () => {\r\n//         if (!details || !crop || !canvasRef.current) return;\r\n\r\n//         const canvas = document.createElement('canvas');\r\n//         const ctx = canvas.getContext('2d');\r\n//         const scaleX = details.naturalWidth / details.width;\r\n//         const scaleY = details.naturalHeight / details.height;\r\n\r\n//         canvas.width = crop.width;\r\n//         canvas.height = crop.height;\r\n\r\n//         ctx.drawImage(\r\n//             details,\r\n//             crop.x * scaleX,\r\n//             crop.y * scaleY,\r\n//             crop.width * scaleX,\r\n//             crop.height * scaleY,\r\n//             0,\r\n//             0,\r\n//             crop.width,\r\n//             crop.height\r\n//         );\r\n\r\n//         const base64Url = canvas.toDataURL('image/jpeg');\r\n//         setState({\r\n//             ...state,\r\n//             image: base64Url\r\n//         });\r\n//     };\r\n\r\n//     const saveImage = () => {\r\n//         const canvas = document.createElement('canvas');\r\n//         const ctx = canvas.getContext('2d');\r\n\r\n//         if (!details) return;\r\n\r\n//         canvas.width = details.naturalWidth;\r\n//         canvas.height = details.naturalHeight;\r\n\r\n//         ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\r\n//         ctx.translate(canvas.width / 2, canvas.height / 2);\r\n//         ctx.rotate(state.rotate * Math.PI / 180);\r\n//         ctx.scale(state.vartical, state.horizental);\r\n//         ctx.drawImage(\r\n//             details,\r\n//             -canvas.width / 2,\r\n//             -canvas.height / 2,\r\n//             canvas.width,\r\n//             canvas.height\r\n//         );\r\n//         ctx.resetTransform();\r\n\r\n//         if (text.value) {\r\n//             ctx.font = '30px Arial';\r\n//             ctx.fillStyle = 'red';\r\n//             ctx.fillText(text.value, text.x, text.y);\r\n//         }\r\n\r\n//         const link = document.createElement('a');\r\n//         link.download = 'image_edit.jpg';\r\n//         link.href = canvas.toDataURL();\r\n//         link.click();\r\n//     };\r\n\r\n//     const startDrawing = (e) => {\r\n//         if (drawing) {\r\n//             const canvas = canvasRef.current;\r\n//             const ctx = canvas.getContext('2d');\r\n//             ctx.beginPath();\r\n//             ctx.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\r\n//         }\r\n//     };\r\n\r\n//     const draw = (e) => {\r\n//         if (drawing) {\r\n//             const canvas = canvasRef.current;\r\n//             const ctx = canvas.getContext('2d');\r\n//             ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\r\n//             ctx.strokeStyle = '#000000'; // Set the pencil color (black)\r\n//             ctx.lineWidth = 2; // Set the pencil width\r\n//             ctx.lineCap = 'round'; // Set the line cap for smoother lines\r\n//             ctx.stroke();\r\n//         }\r\n//     };\r\n\r\n//     const stopDrawing = () => {\r\n//         if (drawing) {\r\n//             const canvas = canvasRef.current;\r\n//             const ctx = canvas.getContext('2d');\r\n//             ctx.closePath();\r\n//         }\r\n//     };\r\n\r\n//     const enableDrawing = () => {\r\n//         setDrawing(!drawing);\r\n//     };\r\n\r\n//     const textAdd = () => {\r\n//         setText({ value: 'Hello World', x: 50, y: 50 });\r\n//         setEditingText(true);\r\n//     };\r\n\r\n//     const handleTextChange = (e) => {\r\n//         setText({ ...text, value: e.target.value });\r\n//     };\r\n\r\n//     const handleTextDrag = (e) => {\r\n//         if (editingText) {\r\n//             const canvas = canvasRef.current;\r\n//             const { offsetX, offsetY } = e.nativeEvent;\r\n            \r\n//             // Ensure the text input remains within the canvas bounds\r\n//             const x = Math.max(0, Math.min(offsetX, canvas.width));\r\n//             const y = Math.max(0, Math.min(offsetY, canvas.height));\r\n            \r\n//             setText({ ...text, x, y });\r\n//         }\r\n//     };\r\n\r\n//     const stopEditingText = () => {\r\n//         setEditingText(false);\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"image-editor\">\r\n//             <header className=\"header\">\r\n//                 {/* <img src={logo} alt=\"Logo\" className=\"logo\" /> */}\r\n//                 <h2 className=\"logo\">E D I T O R</h2>\r\n//                 <div className=\"header-buttons\">\r\n//                     <button onClick={saveImage}><IoIosSave />Save</button>\r\n//                     <button onClick={undo}><IoMdUndo />Undo</button>\r\n//                     <button onClick={redo}><IoMdRedo />Redo</button>\r\n//                 </div>\r\n//             </header>\r\n//             <div className=\"sidebar\">\r\n//                 <div className=\"sidebar-buttons\">\r\n//                     <label htmlFor=\"choose\" className=\"image-upload\">\r\n//                         <IoIosImage />\r\n//                         <span>Choose Image</span>\r\n//                         <input type=\"file\" accept=\"image/*\" id=\"choose\" onChange={imageHandle} />\r\n//                     </label>\r\n//                 </div>\r\n//                 <div className=\"draw-text-buttons\">\r\n//                     <button onClick={enableDrawing}><GrEdit />Draw</button>\r\n//                     <button onClick={textAdd}><GrSuperscript />Text</button>\r\n//                 </div>\r\n//                 <div className=\"adjustment-sliders\">\r\n//                     {filterElement.map((v, i) => (\r\n//                         <button key={i} onClick={() => setProperty(v)}>{v.name}</button>\r\n//                     ))}\r\n//                 </div>\r\n//                 <div className=\"slider\">\r\n//                     <input\r\n//                         type=\"range\"\r\n//                         name={property.name}\r\n//                         max={property.maxValue}\r\n//                         value={state[property.name]}\r\n//                         onChange={inputHandle}\r\n//                     />\r\n//                 </div>\r\n//                 <div className=\"rotation-buttons\">\r\n//                     <button onClick={leftRotate}><GrRotateLeft /></button>\r\n//                     <button onClick={rightRotate}><GrRotateRight /></button>\r\n//                     <button onClick={varticalFlip}><CgMergeVertical /></button>\r\n//                     <button onClick={horizentalFlip}><CgMergeHorizontal /></button>\r\n//                 </div>\r\n//                 <div className=\"history-buttons\">\r\n//                     {/* Removed from sidebar */}\r\n//                 </div>\r\n//             </div>\r\n//             <div className=\"app-content\">\r\n//                 <div className=\"canvas-container\">\r\n//                     <canvas\r\n//                         className=\"responsive-canvas\"\r\n//                         ref={canvasRef}\r\n//                         onMouseDown={startDrawing}\r\n//                         onMouseMove={draw}\r\n//                         onMouseUp={stopDrawing}\r\n//                         onMouseLeave={stopDrawing}\r\n//                         onClick={handleTextDrag}\r\n//                         onDoubleClick={stopEditingText}\r\n//                     />\r\n//                     {editingText && (\r\n//                         <input\r\n//                             type=\"text\"\r\n//                             value={text.value}\r\n//                             onChange={handleTextChange}\r\n//                             onMouseDown={(e) => e.stopPropagation()}\r\n//                         />\r\n//                     )}\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n// export default Main;\r\n\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport './style/main.scss';\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport { GrRotateLeft, GrRotateRight, GrEdit, GrSuperscript } from 'react-icons/gr';\r\nimport { CgMergeVertical, CgMergeHorizontal } from 'react-icons/cg';\r\nimport { IoMdUndo, IoMdRedo, IoIosSave, IoIosImage } from 'react-icons/io';\r\nimport { ChromePicker } from 'react-color'; // Import the color picker\r\nimport storeData from './LinkedList';\r\nimport logo from './style/logo.png';\r\n\r\nconst Main = () => {\r\n    const filterElement = [\r\n        { name: 'brightness', maxValue: 200 },\r\n        { name: 'grayscale', maxValue: 100 },\r\n        { name: 'sepia', maxValue: 100 },\r\n        { name: 'saturate', maxValue: 200 },\r\n        { name: 'contrast', maxValue: 200 },\r\n        { name: 'hueRotate', maxValue: 360 }\r\n    ];\r\n\r\n    const [property, setProperty] = useState({ name: 'brightness', maxValue: 200 });\r\n    const [details, setDetails] = useState(null);\r\n    const [crop, setCrop] = useState({});\r\n    const [drawing, setDrawing] = useState(false);\r\n    const [drawingEnabled, setDrawingEnabled] = useState(false);\r\n    const [text, setText] = useState({ value: '', x: 50, y: 50 });\r\n    const [editingText, setEditingText] = useState(false);\r\n    const [textColor, setTextColor] = useState('#ff0000'); // State for text color\r\n    const canvasRef = useRef(null);\r\n\r\n    const [state, setState] = useState({\r\n        image: '',\r\n        brightness: 100,\r\n        grayscale: 0,\r\n        sepia: 0,\r\n        saturate: 100,\r\n        contrast: 100,\r\n        hueRotate: 0,\r\n        rotate: 0,\r\n        vartical: 1,\r\n        horizental: 1\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (details) {\r\n            drawImage();\r\n        }\r\n    }, [state, details, crop, text]);\r\n\r\n    const drawImage = () => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        if (!details || !canvas) return;\r\n\r\n        const { width, height } = canvas;\r\n\r\n        // Adjust the canvas size to match the image size\r\n        canvas.width = details.naturalWidth;\r\n        canvas.height = details.naturalHeight;\r\n\r\n        ctx.clearRect(0, 0, width, height);\r\n\r\n        ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\r\n        ctx.translate(width / 2, height / 2);\r\n        ctx.rotate(state.rotate * Math.PI / 180);\r\n        ctx.scale(state.vartical, state.horizental);\r\n        ctx.drawImage(details, -width / 2, -height / 2, width, height);\r\n        ctx.resetTransform();\r\n\r\n        if (text.value) {\r\n            ctx.font = '30px Arial';\r\n            ctx.fillStyle = textColor; // Use the selected text color\r\n            ctx.fillText(text.value, text.x, text.y);\r\n        }\r\n    };\r\n\r\n    const inputHandle = (e) => {\r\n        setState({\r\n            ...state,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    const leftRotate = () => {\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            rotate: prevState.rotate - 90\r\n        }));\r\n        storeData.insert({ ...state, rotate: state.rotate - 90 });\r\n    };\r\n\r\n    const rightRotate = () => {\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            rotate: prevState.rotate + 90\r\n        }));\r\n        storeData.insert({ ...state, rotate: state.rotate + 90 });\r\n    };\r\n\r\n    const varticalFlip = () => {\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            vartical: prevState.vartical === 1 ? -1 : 1\r\n        }));\r\n        storeData.insert({ ...state, vartical: state.vartical === 1 ? -1 : 1 });\r\n    };\r\n\r\n    const horizentalFlip = () => {\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            horizental: prevState.horizental === 1 ? -1 : 1\r\n        }));\r\n        storeData.insert({ ...state, horizental: state.horizental === 1 ? -1 : 1 });\r\n    };\r\n\r\n    const redo = () => {\r\n        const data = storeData.redoEdit();\r\n        if (data) {\r\n            setState(data);\r\n        }\r\n    };\r\n\r\n    const undo = () => {\r\n        const data = storeData.undoEdit();\r\n        if (data) {\r\n            setState(data);\r\n        }\r\n    };\r\n\r\n    const imageHandle = (e) => {\r\n        if (e.target.files.length !== 0) {\r\n            const reader = new FileReader();\r\n            reader.onload = () => {\r\n                const img = new Image();\r\n                img.src = reader.result;\r\n                img.onload = () => {\r\n                    setDetails(img);\r\n                    setState({\r\n                        ...state,\r\n                        image: reader.result\r\n                    });\r\n                    storeData.insert({\r\n                        image: reader.result,\r\n                        brightness: 100,\r\n                        grayscale: 0,\r\n                        sepia: 0,\r\n                        saturate: 100,\r\n                        contrast: 100,\r\n                        hueRotate: 0,\r\n                        rotate: 0,\r\n                        vartical: 1,\r\n                        horizental: 1\r\n                    });\r\n                };\r\n            };\r\n            reader.readAsDataURL(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    const imageCrop = () => {\r\n        if (!details || !crop || !canvasRef.current) return;\r\n\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        const scaleX = details.naturalWidth / details.width;\r\n        const scaleY = details.naturalHeight / details.height;\r\n\r\n        canvas.width = crop.width;\r\n        canvas.height = crop.height;\r\n\r\n        ctx.drawImage(\r\n            details,\r\n            crop.x * scaleX,\r\n            crop.y * scaleY,\r\n            crop.width * scaleX,\r\n            crop.height * scaleY,\r\n            0,\r\n            0,\r\n            crop.width,\r\n            crop.height\r\n        );\r\n\r\n        const base64Url = canvas.toDataURL('image/jpeg');\r\n        setState({\r\n            ...state,\r\n            image: base64Url\r\n        });\r\n    };\r\n\r\n    const saveImage = () => {\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        if (!details) return;\r\n\r\n        canvas.width = details.naturalWidth;\r\n        canvas.height = details.naturalHeight;\r\n\r\n        ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\r\n        ctx.translate(canvas.width / 2, canvas.height / 2);\r\n        ctx.rotate(state.rotate * Math.PI / 180);\r\n        ctx.scale(state.vartical, state.horizental);\r\n        ctx.drawImage(\r\n            details,\r\n            -canvas.width / 2,\r\n            -canvas.height / 2,\r\n            canvas.width,\r\n            canvas.height\r\n        );\r\n        ctx.resetTransform();\r\n\r\n        // Draw the text\r\n        if (text.value) {\r\n            ctx.font = '30px Arial';\r\n            ctx.fillStyle = textColor; // Use the selected text color\r\n            ctx.fillText(text.value, text.x, text.y);\r\n        }\r\n\r\n        // Draw the current content of the canvas (including lines)\r\n        const currentCanvas = canvasRef.current;\r\n        if (currentCanvas) {\r\n            ctx.drawImage(currentCanvas, 0, 0);\r\n        }\r\n\r\n        const link = document.createElement('a');\r\n        link.download = 'image_edit.jpg';\r\n        link.href = canvas.toDataURL();\r\n        link.click();\r\n    };\r\n\r\n    const startDrawing = (e) => {\r\n        if (drawingEnabled) {\r\n            setDrawing(true);\r\n            const canvas = canvasRef.current;\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.beginPath();\r\n            ctx.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\r\n        }\r\n    };\r\n\r\n    const draw = (e) => {\r\n        if (drawing && drawingEnabled) {\r\n            const canvas = canvasRef.current;\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\r\n            ctx.strokeStyle = '#000000'; // Set the pencil color (black)\r\n            ctx.lineWidth = 2; // Set the pencil width\r\n            ctx.lineCap = 'round'; // Set the line cap for smoother lines\r\n            ctx.stroke();\r\n        }\r\n    };\r\n    const stopDrawing = () => {\r\n        if (drawing) {\r\n            setDrawing(false);\r\n            const canvas = canvasRef.current;\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.closePath();\r\n        }\r\n    };\r\n\r\n    const handleTextChange = (e) => {\r\n        setText({ ...text, value: e.target.value });\r\n    };\r\n\r\n    const handleTextPosition = (e) => {\r\n        setText({ ...text, x: e.nativeEvent.offsetX, y: e.nativeEvent.offsetY });\r\n    };\r\n\r\n    const handleTextEditToggle = () => {\r\n        setEditingText(!editingText);\r\n    };\r\n\r\n    const handleTextColorChange = (color) => {\r\n        setTextColor(color.hex); // Update text color with selected color\r\n    };\r\n\r\n    return (\r\n        <div className=\"main-container\">\r\n            <header className=\"header\">\r\n                <img src={logo} alt=\"Logo\" className=\"logo\" />\r\n                <input\r\n                    type=\"file\"\r\n                    accept=\"image/*\"\r\n                    onChange={imageHandle}\r\n                    className=\"upload-button\"\r\n                />\r\n                <button onClick={leftRotate} className=\"rotate-button\">\r\n                    <GrRotateLeft />\r\n                </button>\r\n                <button onClick={rightRotate} className=\"rotate-button\">\r\n                    <GrRotateRight />\r\n                </button>\r\n                <button onClick={varticalFlip} className=\"flip-button\">\r\n                    <CgMergeVertical />\r\n                </button>\r\n                <button onClick={horizentalFlip} className=\"flip-button\">\r\n                    <CgMergeHorizontal />\r\n                </button>\r\n                <button onClick={undo} className=\"undo-button\">\r\n                    <IoMdUndo />\r\n                </button>\r\n                <button onClick={redo} className=\"redo-button\">\r\n                    <IoMdRedo />\r\n                </button>\r\n                <button onClick={saveImage} className=\"save-button\">\r\n                    <IoIosSave />\r\n                </button>\r\n            </header>\r\n            <aside className=\"sidebar\">\r\n                {filterElement.map((filter) => (\r\n                    <div key={filter.name} className=\"filter\">\r\n                        <label htmlFor={filter.name}>{filter.name}</label>\r\n                        <input\r\n                            type=\"range\"\r\n                            id={filter.name}\r\n                            name={filter.name}\r\n                            min=\"0\"\r\n                            max={filter.maxValue}\r\n                            value={state[filter.name]}\r\n                            onChange={inputHandle}\r\n                        />\r\n                    </div>\r\n                ))}\r\n                <div className=\"text-tools\">\r\n                    <button onClick={handleTextEditToggle} className=\"text-edit-button\">\r\n                        <GrEdit />\r\n                    </button>\r\n                    {editingText && (\r\n                        <div className=\"text-editor\">\r\n                            <input\r\n                                type=\"text\"\r\n                                value={text.value}\r\n                                onChange={handleTextChange}\r\n                                onClick={handleTextPosition}\r\n                            />\r\n                            <ChromePicker\r\n                                color={textColor}\r\n                                onChangeComplete={handleTextColorChange}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </aside>\r\n            <main className=\"canvas-container\">\r\n                <canvas\r\n                    ref={canvasRef}\r\n                    className=\"canvas\"\r\n                    onMouseDown={startDrawing}\r\n                    onMouseMove={draw}\r\n                    onMouseUp={stopDrawing}\r\n                />\r\n                {details && (\r\n                    <ReactCrop\r\n                        src={state.image}\r\n                        crop={crop}\r\n                        onChange={setCrop}\r\n                        onComplete={imageCrop}\r\n                    />\r\n                )}\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n\r\n"],"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"},"metadata":{},"sourceType":"module"}