{"ast":null,"code":"var _jsxFileName = \"D:\\\\screenshort-extension\\\\image-editor-react\\\\src\\\\component\\\\Main.jsx\",\n    _s = $RefreshSig$();\n\n// import React, { useState, useRef, useEffect } from 'react';\n// import './style/main.scss';\n// import ReactCrop from 'react-image-crop';\n// import 'react-image-crop/dist/ReactCrop.css';\n// import { GrRotateLeft, GrRotateRight, GrEdit, GrSuperscript } from 'react-icons/gr';\n// import { CgMergeVertical, CgMergeHorizontal } from 'react-icons/cg';\n// import { IoMdUndo, IoMdRedo, IoIosSave, IoIosImage } from 'react-icons/io';\n// import storeData from './LinkedList';\n// import logo from './style/logo.jpeg';\n// const Main = () => {\n//     const filterElement = [\n//         { name: 'brightness', maxValue: 200 },\n//         { name: 'grayscale', maxValue: 100 },\n//         { name: 'sepia', maxValue: 100 },\n//         { name: 'saturate', maxValue: 200 },\n//         { name: 'contrast', maxValue: 200 },\n//         { name: 'hueRotate', maxValue: 360 }\n//     ];\n//     const [property, setProperty] = useState({ name: 'brightness', maxValue: 200 });\n//     const [details, setDetails] = useState(null);\n//     const [crop, setCrop] = useState({});\n//     const [drawing, setDrawing] = useState(false);\n//     const [text, setText] = useState({ value: '', x: 50, y: 50 });\n//     const [editingText, setEditingText] = useState(false);\n//     const canvasRef = useRef(null);\n//     const [state, setState] = useState({\n//         image: '',\n//         brightness: 100,\n//         grayscale: 0,\n//         sepia: 0,\n//         saturate: 100,\n//         contrast: 100,\n//         hueRotate: 0,\n//         rotate: 0,\n//         vartical: 1,\n//         horizental: 1\n//     });\n//     useEffect(() => {\n//         if (details) {\n//             drawImage();\n//         }\n//     }, [state, details, crop, text]);\n//     const drawImage = () => {\n//         const canvas = canvasRef.current;\n//         const ctx = canvas.getContext('2d');\n//         if (!details || !canvas) return;\n//         const { width, height } = canvas;\n//         // Adjust the canvas size to match the image size\n//         canvas.width = details.naturalWidth;\n//         canvas.height = details.naturalHeight;\n//         ctx.clearRect(0, 0, width, height);\n//         ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\n//         ctx.translate(width / 2, height / 2);\n//         ctx.rotate(state.rotate * Math.PI / 180);\n//         ctx.scale(state.vartical, state.horizental);\n//         ctx.drawImage(details, -width / 2, -height / 2, width, height);\n//         ctx.resetTransform();\n//         if (text.value) {\n//             ctx.font = '30px Arial';\n//             ctx.fillStyle = 'red';\n//             ctx.fillText(text.value, text.x, text.y);\n//         }\n//     };\n//     const inputHandle = (e) => {\n//         setState({\n//             ...state,\n//             [e.target.name]: e.target.value\n//         });\n//     };\n//     const leftRotate = () => {\n//         setState(prevState => ({\n//             ...prevState,\n//             rotate: prevState.rotate - 90\n//         }));\n//         storeData.insert({ ...state, rotate: state.rotate - 90 });\n//     };\n//     const rightRotate = () => {\n//         setState(prevState => ({\n//             ...prevState,\n//             rotate: prevState.rotate + 90\n//         }));\n//         storeData.insert({ ...state, rotate: state.rotate + 90 });\n//     };\n//     const varticalFlip = () => {\n//         setState(prevState => ({\n//             ...prevState,\n//             vartical: prevState.vartical === 1 ? -1 : 1\n//         }));\n//         storeData.insert({ ...state, vartical: state.vartical === 1 ? -1 : 1 });\n//     };\n//     const horizentalFlip = () => {\n//         setState(prevState => ({\n//             ...prevState,\n//             horizental: prevState.horizental === 1 ? -1 : 1\n//         }));\n//         storeData.insert({ ...state, horizental: state.horizental === 1 ? -1 : 1 });\n//     };\n//     const redo = () => {\n//         const data = storeData.redoEdit();\n//         if (data) {\n//             setState(data);\n//         }\n//     };\n//     const undo = () => {\n//         const data = storeData.undoEdit();\n//         if (data) {\n//             setState(data);\n//         }\n//     };\n//     const imageHandle = (e) => {\n//         if (e.target.files.length !== 0) {\n//             const reader = new FileReader();\n//             reader.onload = () => {\n//                 const img = new Image();\n//                 img.src = reader.result;\n//                 img.onload = () => {\n//                     setDetails(img);\n//                     setState({\n//                         ...state,\n//                         image: reader.result\n//                     });\n//                     storeData.insert({\n//                         image: reader.result,\n//                         brightness: 100,\n//                         grayscale: 0,\n//                         sepia: 0,\n//                         saturate: 100,\n//                         contrast: 100,\n//                         hueRotate: 0,\n//                         rotate: 0,\n//                         vartical: 1,\n//                         horizental: 1\n//                     });\n//                 };\n//             };\n//             reader.readAsDataURL(e.target.files[0]);\n//         }\n//     };\n//     const imageCrop = () => {\n//         if (!details || !crop || !canvasRef.current) return;\n//         const canvas = document.createElement('canvas');\n//         const ctx = canvas.getContext('2d');\n//         const scaleX = details.naturalWidth / details.width;\n//         const scaleY = details.naturalHeight / details.height;\n//         canvas.width = crop.width;\n//         canvas.height = crop.height;\n//         ctx.drawImage(\n//             details,\n//             crop.x * scaleX,\n//             crop.y * scaleY,\n//             crop.width * scaleX,\n//             crop.height * scaleY,\n//             0,\n//             0,\n//             crop.width,\n//             crop.height\n//         );\n//         const base64Url = canvas.toDataURL('image/jpeg');\n//         setState({\n//             ...state,\n//             image: base64Url\n//         });\n//     };\n//     const saveImage = () => {\n//         const canvas = document.createElement('canvas');\n//         const ctx = canvas.getContext('2d');\n//         if (!details) return;\n//         canvas.width = details.naturalWidth;\n//         canvas.height = details.naturalHeight;\n//         ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\n//         ctx.translate(canvas.width / 2, canvas.height / 2);\n//         ctx.rotate(state.rotate * Math.PI / 180);\n//         ctx.scale(state.vartical, state.horizental);\n//         ctx.drawImage(\n//             details,\n//             -canvas.width / 2,\n//             -canvas.height / 2,\n//             canvas.width,\n//             canvas.height\n//         );\n//         ctx.resetTransform();\n//         if (text.value) {\n//             ctx.font = '30px Arial';\n//             ctx.fillStyle = 'red';\n//             ctx.fillText(text.value, text.x, text.y);\n//         }\n//         const link = document.createElement('a');\n//         link.download = 'image_edit.jpg';\n//         link.href = canvas.toDataURL();\n//         link.click();\n//     };\n//     const startDrawing = (e) => {\n//         if (drawing) {\n//             const canvas = canvasRef.current;\n//             const ctx = canvas.getContext('2d');\n//             ctx.beginPath();\n//             ctx.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n//         }\n//     };\n//     const draw = (e) => {\n//         if (drawing) {\n//             const canvas = canvasRef.current;\n//             const ctx = canvas.getContext('2d');\n//             ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n//             ctx.strokeStyle = '#000000'; // Set the pencil color (black)\n//             ctx.lineWidth = 2; // Set the pencil width\n//             ctx.lineCap = 'round'; // Set the line cap for smoother lines\n//             ctx.stroke();\n//         }\n//     };\n//     const stopDrawing = () => {\n//         if (drawing) {\n//             const canvas = canvasRef.current;\n//             const ctx = canvas.getContext('2d');\n//             ctx.closePath();\n//         }\n//     };\n//     const enableDrawing = () => {\n//         setDrawing(!drawing);\n//     };\n//     const textAdd = () => {\n//         setText({ value: 'Hello World', x: 50, y: 50 });\n//         setEditingText(true);\n//     };\n//     const handleTextChange = (e) => {\n//         setText({ ...text, value: e.target.value });\n//     };\n//     const handleTextDrag = (e) => {\n//         if (editingText) {\n//             const canvas = canvasRef.current;\n//             const { offsetX, offsetY } = e.nativeEvent;\n//             // Ensure the text input remains within the canvas bounds\n//             const x = Math.max(0, Math.min(offsetX, canvas.width));\n//             const y = Math.max(0, Math.min(offsetY, canvas.height));\n//             setText({ ...text, x, y });\n//         }\n//     };\n//     const stopEditingText = () => {\n//         setEditingText(false);\n//     };\n//     return (\n//         <div className=\"image-editor\">\n//             <header className=\"header\">\n//                 {/* <img src={logo} alt=\"Logo\" className=\"logo\" /> */}\n//                 <h2 className=\"logo\">E D I T O R</h2>\n//                 <div className=\"header-buttons\">\n//                     <button onClick={saveImage}><IoIosSave />Save</button>\n//                     <button onClick={undo}><IoMdUndo />Undo</button>\n//                     <button onClick={redo}><IoMdRedo />Redo</button>\n//                 </div>\n//             </header>\n//             <div className=\"sidebar\">\n//                 <div className=\"sidebar-buttons\">\n//                     <label htmlFor=\"choose\" className=\"image-upload\">\n//                         <IoIosImage />\n//                         <span>Choose Image</span>\n//                         <input type=\"file\" accept=\"image/*\" id=\"choose\" onChange={imageHandle} />\n//                     </label>\n//                 </div>\n//                 <div className=\"draw-text-buttons\">\n//                     <button onClick={enableDrawing}><GrEdit />Draw</button>\n//                     <button onClick={textAdd}><GrSuperscript />Text</button>\n//                 </div>\n//                 <div className=\"adjustment-sliders\">\n//                     {filterElement.map((v, i) => (\n//                         <button key={i} onClick={() => setProperty(v)}>{v.name}</button>\n//                     ))}\n//                 </div>\n//                 <div className=\"slider\">\n//                     <input\n//                         type=\"range\"\n//                         name={property.name}\n//                         max={property.maxValue}\n//                         value={state[property.name]}\n//                         onChange={inputHandle}\n//                     />\n//                 </div>\n//                 <div className=\"rotation-buttons\">\n//                     <button onClick={leftRotate}><GrRotateLeft /></button>\n//                     <button onClick={rightRotate}><GrRotateRight /></button>\n//                     <button onClick={varticalFlip}><CgMergeVertical /></button>\n//                     <button onClick={horizentalFlip}><CgMergeHorizontal /></button>\n//                 </div>\n//                 <div className=\"history-buttons\">\n//                     {/* Removed from sidebar */}\n//                 </div>\n//             </div>\n//             <div className=\"app-content\">\n//                 <div className=\"canvas-container\">\n//                     <canvas\n//                         className=\"responsive-canvas\"\n//                         ref={canvasRef}\n//                         onMouseDown={startDrawing}\n//                         onMouseMove={draw}\n//                         onMouseUp={stopDrawing}\n//                         onMouseLeave={stopDrawing}\n//                         onClick={handleTextDrag}\n//                         onDoubleClick={stopEditingText}\n//                     />\n//                     {editingText && (\n//                         <input\n//                             type=\"text\"\n//                             value={text.value}\n//                             onChange={handleTextChange}\n//                             onMouseDown={(e) => e.stopPropagation()}\n//                         />\n//                     )}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n// export default Main;\nimport React, { useState, useRef, useEffect } from 'react';\nimport './style/main.scss';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { GrRotateLeft, GrRotateRight, GrEdit, GrSuperscript } from 'react-icons/gr';\nimport { CgMergeVertical, CgMergeHorizontal } from 'react-icons/cg';\nimport { IoMdUndo, IoMdRedo, IoIosSave, IoIosImage } from 'react-icons/io';\nimport storeData from './LinkedList';\nimport logo from './style/logo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Main = () => {\n  _s();\n\n  const filterElement = [{\n    name: 'brightness',\n    maxValue: 200\n  }, {\n    name: 'grayscale',\n    maxValue: 100\n  }, {\n    name: 'sepia',\n    maxValue: 100\n  }, {\n    name: 'saturate',\n    maxValue: 200\n  }, {\n    name: 'contrast',\n    maxValue: 200\n  }, {\n    name: 'hueRotate',\n    maxValue: 360\n  }];\n  const [property, setProperty] = useState({\n    name: 'brightness',\n    maxValue: 200\n  });\n  const [details, setDetails] = useState(null);\n  const [crop, setCrop] = useState({});\n  const [drawing, setDrawing] = useState(false);\n  const [drawingEnabled, setDrawingEnabled] = useState(false);\n  const [text, setText] = useState({\n    value: '',\n    x: 50,\n    y: 50\n  });\n  const [editingText, setEditingText] = useState(false);\n  const canvasRef = useRef(null);\n  const [state, setState] = useState({\n    image: '',\n    brightness: 100,\n    grayscale: 0,\n    sepia: 0,\n    saturate: 100,\n    contrast: 100,\n    hueRotate: 0,\n    rotate: 0,\n    vartical: 1,\n    horizental: 1\n  });\n  useEffect(() => {\n    if (details) {\n      drawImage();\n    }\n  }, [state, details, crop, text]);\n\n  const drawImage = () => {\n    const canvas = canvasRef.current;\n    if (!details || !canvas) return;\n    const ctx = canvas.getContext('2d'); // Get the container dimensions\n\n    const container = canvas.parentElement;\n    const {\n      width: containerWidth,\n      height: containerHeight\n    } = container.getBoundingClientRect(); // Calculate the scale to fit the image within the container while maintaining aspect ratio\n\n    const scaleX = containerWidth / details.naturalWidth;\n    const scaleY = containerHeight / details.naturalHeight;\n    const scale = Math.min(scaleX, scaleY); // Calculate the new canvas dimensions\n\n    const newWidth = details.naturalWidth * scale;\n    const newHeight = details.naturalHeight * scale; // Set the canvas dimensions\n\n    canvas.width = newWidth;\n    canvas.height = newHeight;\n    ctx.clearRect(0, 0, newWidth, newHeight);\n    ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\n    ctx.translate(newWidth / 2, newHeight / 2);\n    ctx.rotate(state.rotate * Math.PI / 180);\n    ctx.scale(state.vartical, state.horizental);\n    ctx.drawImage(details, -newWidth / 2, -newHeight / 2, newWidth, newHeight);\n    ctx.resetTransform();\n\n    if (text.value) {\n      ctx.font = '30px Arial';\n      ctx.fillStyle = 'red';\n      ctx.fillText(text.value, text.x, text.y);\n    }\n  };\n\n  const inputHandle = e => {\n    setState({ ...state,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const leftRotate = () => {\n    setState(prevState => ({ ...prevState,\n      rotate: prevState.rotate - 90\n    }));\n    storeData.insert({ ...state,\n      rotate: state.rotate - 90\n    });\n  };\n\n  const rightRotate = () => {\n    setState(prevState => ({ ...prevState,\n      rotate: prevState.rotate + 90\n    }));\n    storeData.insert({ ...state,\n      rotate: state.rotate + 90\n    });\n  };\n\n  const varticalFlip = () => {\n    setState(prevState => ({ ...prevState,\n      vartical: prevState.vartical === 1 ? -1 : 1\n    }));\n    storeData.insert({ ...state,\n      vartical: state.vartical === 1 ? -1 : 1\n    });\n  };\n\n  const horizentalFlip = () => {\n    setState(prevState => ({ ...prevState,\n      horizental: prevState.horizental === 1 ? -1 : 1\n    }));\n    storeData.insert({ ...state,\n      horizental: state.horizental === 1 ? -1 : 1\n    });\n  };\n\n  const redo = () => {\n    const data = storeData.redoEdit();\n\n    if (data) {\n      setState(data);\n    }\n  };\n\n  const undo = () => {\n    const data = storeData.undoEdit();\n\n    if (data) {\n      setState(data);\n    }\n  };\n\n  const imageHandle = e => {\n    if (e.target.files.length !== 0) {\n      const reader = new FileReader();\n\n      reader.onload = () => {\n        const img = new Image();\n        img.src = reader.result;\n\n        img.onload = () => {\n          setDetails(img);\n          setState({ ...state,\n            image: reader.result\n          });\n          storeData.insert({\n            image: reader.result,\n            brightness: 100,\n            grayscale: 0,\n            sepia: 0,\n            saturate: 100,\n            contrast: 100,\n            hueRotate: 0,\n            rotate: 0,\n            vartical: 1,\n            horizental: 1\n          });\n        };\n      };\n\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  const imageCrop = () => {\n    if (!details || !crop || !canvasRef.current) return;\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    const scaleX = details.naturalWidth / details.width;\n    const scaleY = details.naturalHeight / details.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    ctx.drawImage(details, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    const base64Url = canvas.toDataURL('image/jpeg');\n    setState({ ...state,\n      image: base64Url\n    });\n  };\n\n  const saveImage = () => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    if (!details) return;\n    canvas.width = details.naturalWidth;\n    canvas.height = details.naturalHeight;\n    ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\n    ctx.translate(canvas.width / 2, canvas.height / 2);\n    ctx.rotate(state.rotate * Math.PI / 180);\n    ctx.scale(state.vartical, state.horizental);\n    ctx.drawImage(details, -canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);\n    ctx.resetTransform(); // Draw the text\n\n    if (text.value) {\n      ctx.font = '30px Arial';\n      ctx.fillStyle = 'red';\n      ctx.fillText(text.value, text.x, text.y);\n    } // Draw the current content of the canvas (including lines)\n\n\n    const currentCanvas = canvasRef.current;\n\n    if (currentCanvas) {\n      ctx.drawImage(currentCanvas, 0, 0);\n    }\n\n    const link = document.createElement('a');\n    link.download = 'image_edit.jpg';\n    link.href = canvas.toDataURL();\n    link.click();\n  };\n\n  const startDrawing = e => {\n    if (drawingEnabled) {\n      setDrawing(true);\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.beginPath();\n      ctx.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n    }\n  };\n\n  const draw = e => {\n    if (drawing && drawingEnabled) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n      ctx.strokeStyle = '#000000'; // Set the pencil color (black)\n\n      ctx.lineWidth = 2; // Set the pencil width\n\n      ctx.lineCap = 'round'; // Set the line cap for smoother lines\n\n      ctx.stroke();\n    }\n  };\n\n  const stopDrawing = () => {\n    if (drawing) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.closePath();\n      setDrawing(false); // Save the current drawing state\n\n      storeData.insert({ ...state\n      });\n    }\n  };\n\n  const enableDrawing = () => {\n    setDrawingEnabled(!drawingEnabled);\n  };\n\n  const textAdd = () => {\n    setText({\n      value: 'Hello World',\n      x: 50,\n      y: 50\n    });\n    setEditingText(true);\n  };\n\n  const handleTextChange = e => {\n    setText({ ...text,\n      value: e.target.value\n    });\n  };\n\n  const handleTextDrag = e => {\n    if (editingText) {\n      const canvas = canvasRef.current;\n      const {\n        offsetX,\n        offsetY\n      } = e.nativeEvent;\n      setText({ ...text,\n        x: offsetX,\n        y: offsetY\n      });\n    }\n  };\n\n  const disableEditingText = () => {\n    setEditingText(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          alt: \"Logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 665,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 664,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inputImage\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"inputImage\",\n            children: /*#__PURE__*/_jsxDEV(IoIosImage, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 670,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 669,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"inputImage\",\n            accept: \"image/*\",\n            onChange: imageHandle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 672,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 668,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: saveImage,\n          children: /*#__PURE__*/_jsxDEV(IoIosSave, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 674,\n            columnNumber: 49\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 674,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 663,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-sidebar\",\n        children: [filterElement.map((v, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setProperty(v),\n          children: v.name\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 680,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            name: property.name,\n            max: property.maxValue,\n            value: state[property.name],\n            onChange: inputHandle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 683,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: leftRotate,\n          children: /*#__PURE__*/_jsxDEV(GrRotateLeft, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 691,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 691,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: rightRotate,\n          children: /*#__PURE__*/_jsxDEV(GrRotateRight, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 692,\n            columnNumber: 51\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 692,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: varticalFlip,\n          children: /*#__PURE__*/_jsxDEV(CgMergeVertical, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 693,\n            columnNumber: 52\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: horizentalFlip,\n          children: /*#__PURE__*/_jsxDEV(CgMergeHorizontal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 694,\n            columnNumber: 54\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: undo,\n          children: /*#__PURE__*/_jsxDEV(IoMdUndo, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 695,\n            columnNumber: 44\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 695,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: redo,\n          children: /*#__PURE__*/_jsxDEV(IoMdRedo, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 696,\n            columnNumber: 44\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: enableDrawing,\n          children: [/*#__PURE__*/_jsxDEV(GrEdit, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 697,\n            columnNumber: 53\n          }, this), \"Draw\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: textAdd,\n          children: [/*#__PURE__*/_jsxDEV(GrSuperscript, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 698,\n            columnNumber: 47\n          }, this), \"Text\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-content\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"canvas-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: canvasRef,\n            width: \"800\",\n            height: \"500\",\n            onMouseDown: startDrawing,\n            onMouseMove: draw,\n            onMouseUp: stopDrawing,\n            onMouseOut: stopDrawing\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 703,\n            columnNumber: 25\n          }, this), editingText && /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: text.value,\n            onChange: handleTextChange,\n            onBlur: disableEditingText,\n            onMouseDown: handleTextDrag,\n            style: {\n              position: 'absolute',\n              left: `${text.x}px`,\n              top: `${text.y}px`,\n              color: 'red',\n              fontSize: '30px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 713,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 702,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 701,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 677,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 662,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Main, \"FROT5rnm7Uz7wcsVf/xgdM5e7vU=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ReactCrop","GrRotateLeft","GrRotateRight","GrEdit","GrSuperscript","CgMergeVertical","CgMergeHorizontal","IoMdUndo","IoMdRedo","IoIosSave","IoIosImage","storeData","logo","Main","filterElement","name","maxValue","property","setProperty","details","setDetails","crop","setCrop","drawing","setDrawing","drawingEnabled","setDrawingEnabled","text","setText","value","x","y","editingText","setEditingText","canvasRef","state","setState","image","brightness","grayscale","sepia","saturate","contrast","hueRotate","rotate","vartical","horizental","drawImage","canvas","current","ctx","getContext","container","parentElement","width","containerWidth","height","containerHeight","getBoundingClientRect","scaleX","naturalWidth","scaleY","naturalHeight","scale","Math","min","newWidth","newHeight","clearRect","filter","translate","PI","resetTransform","font","fillStyle","fillText","inputHandle","e","target","leftRotate","prevState","insert","rightRotate","varticalFlip","horizentalFlip","redo","data","redoEdit","undo","undoEdit","imageHandle","files","length","reader","FileReader","onload","img","Image","src","result","readAsDataURL","imageCrop","document","createElement","base64Url","toDataURL","saveImage","currentCanvas","link","download","href","click","startDrawing","beginPath","moveTo","nativeEvent","offsetX","offsetY","draw","lineTo","strokeStyle","lineWidth","lineCap","stroke","stopDrawing","closePath","enableDrawing","textAdd","handleTextChange","handleTextDrag","disableEditingText","map","v","i","position","left","top","color","fontSize"],"sources":["D:/screenshort-extension/image-editor-react/src/component/Main.jsx"],"sourcesContent":["// import React, { useState, useRef, useEffect } from 'react';\r\n// import './style/main.scss';\r\n// import ReactCrop from 'react-image-crop';\r\n// import 'react-image-crop/dist/ReactCrop.css';\r\n// import { GrRotateLeft, GrRotateRight, GrEdit, GrSuperscript } from 'react-icons/gr';\r\n// import { CgMergeVertical, CgMergeHorizontal } from 'react-icons/cg';\r\n// import { IoMdUndo, IoMdRedo, IoIosSave, IoIosImage } from 'react-icons/io';\r\n// import storeData from './LinkedList';\r\n// import logo from './style/logo.jpeg';\r\n\r\n// const Main = () => {\r\n//     const filterElement = [\r\n//         { name: 'brightness', maxValue: 200 },\r\n//         { name: 'grayscale', maxValue: 100 },\r\n//         { name: 'sepia', maxValue: 100 },\r\n//         { name: 'saturate', maxValue: 200 },\r\n//         { name: 'contrast', maxValue: 200 },\r\n//         { name: 'hueRotate', maxValue: 360 }\r\n//     ];\r\n\r\n//     const [property, setProperty] = useState({ name: 'brightness', maxValue: 200 });\r\n//     const [details, setDetails] = useState(null);\r\n//     const [crop, setCrop] = useState({});\r\n//     const [drawing, setDrawing] = useState(false);\r\n//     const [text, setText] = useState({ value: '', x: 50, y: 50 });\r\n//     const [editingText, setEditingText] = useState(false);\r\n//     const canvasRef = useRef(null);\r\n\r\n//     const [state, setState] = useState({\r\n//         image: '',\r\n//         brightness: 100,\r\n//         grayscale: 0,\r\n//         sepia: 0,\r\n//         saturate: 100,\r\n//         contrast: 100,\r\n//         hueRotate: 0,\r\n//         rotate: 0,\r\n//         vartical: 1,\r\n//         horizental: 1\r\n//     });\r\n\r\n//     useEffect(() => {\r\n//         if (details) {\r\n//             drawImage();\r\n//         }\r\n//     }, [state, details, crop, text]);\r\n\r\n//     const drawImage = () => {\r\n//         const canvas = canvasRef.current;\r\n//         const ctx = canvas.getContext('2d');\r\n//         if (!details || !canvas) return;\r\n\r\n//         const { width, height } = canvas;\r\n\r\n//         // Adjust the canvas size to match the image size\r\n//         canvas.width = details.naturalWidth;\r\n//         canvas.height = details.naturalHeight;\r\n\r\n//         ctx.clearRect(0, 0, width, height);\r\n\r\n//         ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\r\n//         ctx.translate(width / 2, height / 2);\r\n//         ctx.rotate(state.rotate * Math.PI / 180);\r\n//         ctx.scale(state.vartical, state.horizental);\r\n//         ctx.drawImage(details, -width / 2, -height / 2, width, height);\r\n//         ctx.resetTransform();\r\n\r\n//         if (text.value) {\r\n//             ctx.font = '30px Arial';\r\n//             ctx.fillStyle = 'red';\r\n//             ctx.fillText(text.value, text.x, text.y);\r\n//         }\r\n//     };\r\n\r\n\r\n//     const inputHandle = (e) => {\r\n//         setState({\r\n//             ...state,\r\n//             [e.target.name]: e.target.value\r\n//         });\r\n//     };\r\n\r\n//     const leftRotate = () => {\r\n//         setState(prevState => ({\r\n//             ...prevState,\r\n//             rotate: prevState.rotate - 90\r\n//         }));\r\n//         storeData.insert({ ...state, rotate: state.rotate - 90 });\r\n//     };\r\n\r\n//     const rightRotate = () => {\r\n//         setState(prevState => ({\r\n//             ...prevState,\r\n//             rotate: prevState.rotate + 90\r\n//         }));\r\n//         storeData.insert({ ...state, rotate: state.rotate + 90 });\r\n//     };\r\n\r\n//     const varticalFlip = () => {\r\n//         setState(prevState => ({\r\n//             ...prevState,\r\n//             vartical: prevState.vartical === 1 ? -1 : 1\r\n//         }));\r\n//         storeData.insert({ ...state, vartical: state.vartical === 1 ? -1 : 1 });\r\n//     };\r\n\r\n//     const horizentalFlip = () => {\r\n//         setState(prevState => ({\r\n//             ...prevState,\r\n//             horizental: prevState.horizental === 1 ? -1 : 1\r\n//         }));\r\n//         storeData.insert({ ...state, horizental: state.horizental === 1 ? -1 : 1 });\r\n//     };\r\n\r\n//     const redo = () => {\r\n//         const data = storeData.redoEdit();\r\n//         if (data) {\r\n//             setState(data);\r\n//         }\r\n//     };\r\n\r\n//     const undo = () => {\r\n//         const data = storeData.undoEdit();\r\n//         if (data) {\r\n//             setState(data);\r\n//         }\r\n//     };\r\n\r\n//     const imageHandle = (e) => {\r\n//         if (e.target.files.length !== 0) {\r\n//             const reader = new FileReader();\r\n//             reader.onload = () => {\r\n//                 const img = new Image();\r\n//                 img.src = reader.result;\r\n//                 img.onload = () => {\r\n//                     setDetails(img);\r\n//                     setState({\r\n//                         ...state,\r\n//                         image: reader.result\r\n//                     });\r\n//                     storeData.insert({\r\n//                         image: reader.result,\r\n//                         brightness: 100,\r\n//                         grayscale: 0,\r\n//                         sepia: 0,\r\n//                         saturate: 100,\r\n//                         contrast: 100,\r\n//                         hueRotate: 0,\r\n//                         rotate: 0,\r\n//                         vartical: 1,\r\n//                         horizental: 1\r\n//                     });\r\n//                 };\r\n//             };\r\n//             reader.readAsDataURL(e.target.files[0]);\r\n//         }\r\n//     };\r\n\r\n//     const imageCrop = () => {\r\n//         if (!details || !crop || !canvasRef.current) return;\r\n\r\n//         const canvas = document.createElement('canvas');\r\n//         const ctx = canvas.getContext('2d');\r\n//         const scaleX = details.naturalWidth / details.width;\r\n//         const scaleY = details.naturalHeight / details.height;\r\n\r\n//         canvas.width = crop.width;\r\n//         canvas.height = crop.height;\r\n\r\n//         ctx.drawImage(\r\n//             details,\r\n//             crop.x * scaleX,\r\n//             crop.y * scaleY,\r\n//             crop.width * scaleX,\r\n//             crop.height * scaleY,\r\n//             0,\r\n//             0,\r\n//             crop.width,\r\n//             crop.height\r\n//         );\r\n\r\n//         const base64Url = canvas.toDataURL('image/jpeg');\r\n//         setState({\r\n//             ...state,\r\n//             image: base64Url\r\n//         });\r\n//     };\r\n\r\n//     const saveImage = () => {\r\n//         const canvas = document.createElement('canvas');\r\n//         const ctx = canvas.getContext('2d');\r\n\r\n//         if (!details) return;\r\n\r\n//         canvas.width = details.naturalWidth;\r\n//         canvas.height = details.naturalHeight;\r\n\r\n//         ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\r\n//         ctx.translate(canvas.width / 2, canvas.height / 2);\r\n//         ctx.rotate(state.rotate * Math.PI / 180);\r\n//         ctx.scale(state.vartical, state.horizental);\r\n//         ctx.drawImage(\r\n//             details,\r\n//             -canvas.width / 2,\r\n//             -canvas.height / 2,\r\n//             canvas.width,\r\n//             canvas.height\r\n//         );\r\n//         ctx.resetTransform();\r\n\r\n//         if (text.value) {\r\n//             ctx.font = '30px Arial';\r\n//             ctx.fillStyle = 'red';\r\n//             ctx.fillText(text.value, text.x, text.y);\r\n//         }\r\n\r\n//         const link = document.createElement('a');\r\n//         link.download = 'image_edit.jpg';\r\n//         link.href = canvas.toDataURL();\r\n//         link.click();\r\n//     };\r\n\r\n//     const startDrawing = (e) => {\r\n//         if (drawing) {\r\n//             const canvas = canvasRef.current;\r\n//             const ctx = canvas.getContext('2d');\r\n//             ctx.beginPath();\r\n//             ctx.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\r\n//         }\r\n//     };\r\n\r\n//     const draw = (e) => {\r\n//         if (drawing) {\r\n//             const canvas = canvasRef.current;\r\n//             const ctx = canvas.getContext('2d');\r\n//             ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\r\n//             ctx.strokeStyle = '#000000'; // Set the pencil color (black)\r\n//             ctx.lineWidth = 2; // Set the pencil width\r\n//             ctx.lineCap = 'round'; // Set the line cap for smoother lines\r\n//             ctx.stroke();\r\n//         }\r\n//     };\r\n\r\n//     const stopDrawing = () => {\r\n//         if (drawing) {\r\n//             const canvas = canvasRef.current;\r\n//             const ctx = canvas.getContext('2d');\r\n//             ctx.closePath();\r\n//         }\r\n//     };\r\n\r\n//     const enableDrawing = () => {\r\n//         setDrawing(!drawing);\r\n//     };\r\n\r\n//     const textAdd = () => {\r\n//         setText({ value: 'Hello World', x: 50, y: 50 });\r\n//         setEditingText(true);\r\n//     };\r\n\r\n//     const handleTextChange = (e) => {\r\n//         setText({ ...text, value: e.target.value });\r\n//     };\r\n\r\n//     const handleTextDrag = (e) => {\r\n//         if (editingText) {\r\n//             const canvas = canvasRef.current;\r\n//             const { offsetX, offsetY } = e.nativeEvent;\r\n\r\n//             // Ensure the text input remains within the canvas bounds\r\n//             const x = Math.max(0, Math.min(offsetX, canvas.width));\r\n//             const y = Math.max(0, Math.min(offsetY, canvas.height));\r\n\r\n//             setText({ ...text, x, y });\r\n//         }\r\n//     };\r\n\r\n//     const stopEditingText = () => {\r\n//         setEditingText(false);\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"image-editor\">\r\n//             <header className=\"header\">\r\n//                 {/* <img src={logo} alt=\"Logo\" className=\"logo\" /> */}\r\n//                 <h2 className=\"logo\">E D I T O R</h2>\r\n//                 <div className=\"header-buttons\">\r\n//                     <button onClick={saveImage}><IoIosSave />Save</button>\r\n//                     <button onClick={undo}><IoMdUndo />Undo</button>\r\n//                     <button onClick={redo}><IoMdRedo />Redo</button>\r\n//                 </div>\r\n//             </header>\r\n//             <div className=\"sidebar\">\r\n//                 <div className=\"sidebar-buttons\">\r\n//                     <label htmlFor=\"choose\" className=\"image-upload\">\r\n//                         <IoIosImage />\r\n//                         <span>Choose Image</span>\r\n//                         <input type=\"file\" accept=\"image/*\" id=\"choose\" onChange={imageHandle} />\r\n//                     </label>\r\n//                 </div>\r\n//                 <div className=\"draw-text-buttons\">\r\n//                     <button onClick={enableDrawing}><GrEdit />Draw</button>\r\n//                     <button onClick={textAdd}><GrSuperscript />Text</button>\r\n//                 </div>\r\n//                 <div className=\"adjustment-sliders\">\r\n//                     {filterElement.map((v, i) => (\r\n//                         <button key={i} onClick={() => setProperty(v)}>{v.name}</button>\r\n//                     ))}\r\n//                 </div>\r\n//                 <div className=\"slider\">\r\n//                     <input\r\n//                         type=\"range\"\r\n//                         name={property.name}\r\n//                         max={property.maxValue}\r\n//                         value={state[property.name]}\r\n//                         onChange={inputHandle}\r\n//                     />\r\n//                 </div>\r\n//                 <div className=\"rotation-buttons\">\r\n//                     <button onClick={leftRotate}><GrRotateLeft /></button>\r\n//                     <button onClick={rightRotate}><GrRotateRight /></button>\r\n//                     <button onClick={varticalFlip}><CgMergeVertical /></button>\r\n//                     <button onClick={horizentalFlip}><CgMergeHorizontal /></button>\r\n//                 </div>\r\n//                 <div className=\"history-buttons\">\r\n//                     {/* Removed from sidebar */}\r\n//                 </div>\r\n//             </div>\r\n//             <div className=\"app-content\">\r\n//                 <div className=\"canvas-container\">\r\n//                     <canvas\r\n//                         className=\"responsive-canvas\"\r\n//                         ref={canvasRef}\r\n//                         onMouseDown={startDrawing}\r\n//                         onMouseMove={draw}\r\n//                         onMouseUp={stopDrawing}\r\n//                         onMouseLeave={stopDrawing}\r\n//                         onClick={handleTextDrag}\r\n//                         onDoubleClick={stopEditingText}\r\n//                     />\r\n//                     {editingText && (\r\n//                         <input\r\n//                             type=\"text\"\r\n//                             value={text.value}\r\n//                             onChange={handleTextChange}\r\n//                             onMouseDown={(e) => e.stopPropagation()}\r\n//                         />\r\n//                     )}\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n// export default Main;\r\n\r\n\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport './style/main.scss';\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport { GrRotateLeft, GrRotateRight, GrEdit, GrSuperscript } from 'react-icons/gr';\r\nimport { CgMergeVertical, CgMergeHorizontal } from 'react-icons/cg';\r\nimport { IoMdUndo, IoMdRedo, IoIosSave, IoIosImage } from 'react-icons/io';\r\nimport storeData from './LinkedList';\r\nimport logo from './style/logo.png';\r\n\r\nconst Main = () => {\r\n    const filterElement = [\r\n        { name: 'brightness', maxValue: 200 },\r\n        { name: 'grayscale', maxValue: 100 },\r\n        { name: 'sepia', maxValue: 100 },\r\n        { name: 'saturate', maxValue: 200 },\r\n        { name: 'contrast', maxValue: 200 },\r\n        { name: 'hueRotate', maxValue: 360 }\r\n    ];\r\n\r\n    const [property, setProperty] = useState({ name: 'brightness', maxValue: 200 });\r\n    const [details, setDetails] = useState(null);\r\n    const [crop, setCrop] = useState({});\r\n    const [drawing, setDrawing] = useState(false);\r\n    const [drawingEnabled, setDrawingEnabled] = useState(false);\r\n    const [text, setText] = useState({ value: '', x: 50, y: 50 });\r\n    const [editingText, setEditingText] = useState(false);\r\n    const canvasRef = useRef(null);\r\n\r\n    const [state, setState] = useState({\r\n        image: '',\r\n        brightness: 100,\r\n        grayscale: 0,\r\n        sepia: 0,\r\n        saturate: 100,\r\n        contrast: 100,\r\n        hueRotate: 0,\r\n        rotate: 0,\r\n        vartical: 1,\r\n        horizental: 1\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (details) {\r\n            drawImage();\r\n        }\r\n    }, [state, details, crop, text]);\r\n\r\n    const drawImage = () => {\r\n        const canvas = canvasRef.current;\r\n        if (!details || !canvas) return;\r\n    \r\n        const ctx = canvas.getContext('2d');\r\n    \r\n        // Get the container dimensions\r\n        const container = canvas.parentElement;\r\n        const { width: containerWidth, height: containerHeight } = container.getBoundingClientRect();\r\n    \r\n        // Calculate the scale to fit the image within the container while maintaining aspect ratio\r\n        const scaleX = containerWidth / details.naturalWidth;\r\n        const scaleY = containerHeight / details.naturalHeight;\r\n        const scale = Math.min(scaleX, scaleY);\r\n    \r\n        // Calculate the new canvas dimensions\r\n        const newWidth = details.naturalWidth * scale;\r\n        const newHeight = details.naturalHeight * scale;\r\n    \r\n        // Set the canvas dimensions\r\n        canvas.width = newWidth;\r\n        canvas.height = newHeight;\r\n    \r\n        ctx.clearRect(0, 0, newWidth, newHeight);\r\n    \r\n        ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\r\n        ctx.translate(newWidth / 2, newHeight / 2);\r\n        ctx.rotate(state.rotate * Math.PI / 180);\r\n        ctx.scale(state.vartical, state.horizental);\r\n        ctx.drawImage(details, -newWidth / 2, -newHeight / 2, newWidth, newHeight);\r\n        ctx.resetTransform();\r\n    \r\n        if (text.value) {\r\n            ctx.font = '30px Arial';\r\n            ctx.fillStyle = 'red';\r\n            ctx.fillText(text.value, text.x, text.y);\r\n        }\r\n    };\r\n    \r\n\r\n    const inputHandle = (e) => {\r\n        setState({\r\n            ...state,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    const leftRotate = () => {\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            rotate: prevState.rotate - 90\r\n        }));\r\n        storeData.insert({ ...state, rotate: state.rotate - 90 });\r\n    };\r\n\r\n    const rightRotate = () => {\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            rotate: prevState.rotate + 90\r\n        }));\r\n        storeData.insert({ ...state, rotate: state.rotate + 90 });\r\n    };\r\n\r\n    const varticalFlip = () => {\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            vartical: prevState.vartical === 1 ? -1 : 1\r\n        }));\r\n        storeData.insert({ ...state, vartical: state.vartical === 1 ? -1 : 1 });\r\n    };\r\n\r\n    const horizentalFlip = () => {\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            horizental: prevState.horizental === 1 ? -1 : 1\r\n        }));\r\n        storeData.insert({ ...state, horizental: state.horizental === 1 ? -1 : 1 });\r\n    };\r\n\r\n    const redo = () => {\r\n        const data = storeData.redoEdit();\r\n        if (data) {\r\n            setState(data);\r\n        }\r\n    };\r\n\r\n    const undo = () => {\r\n        const data = storeData.undoEdit();\r\n        if (data) {\r\n            setState(data);\r\n        }\r\n    };\r\n\r\n    const imageHandle = (e) => {\r\n        if (e.target.files.length !== 0) {\r\n            const reader = new FileReader();\r\n            reader.onload = () => {\r\n                const img = new Image();\r\n                img.src = reader.result;\r\n                img.onload = () => {\r\n                    setDetails(img);\r\n                    setState({\r\n                        ...state,\r\n                        image: reader.result\r\n                    });\r\n                    storeData.insert({\r\n                        image: reader.result,\r\n                        brightness: 100,\r\n                        grayscale: 0,\r\n                        sepia: 0,\r\n                        saturate: 100,\r\n                        contrast: 100,\r\n                        hueRotate: 0,\r\n                        rotate: 0,\r\n                        vartical: 1,\r\n                        horizental: 1\r\n                    });\r\n                };\r\n            };\r\n            reader.readAsDataURL(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    const imageCrop = () => {\r\n        if (!details || !crop || !canvasRef.current) return;\r\n\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        const scaleX = details.naturalWidth / details.width;\r\n        const scaleY = details.naturalHeight / details.height;\r\n\r\n        canvas.width = crop.width;\r\n        canvas.height = crop.height;\r\n\r\n        ctx.drawImage(\r\n            details,\r\n            crop.x * scaleX,\r\n            crop.y * scaleY,\r\n            crop.width * scaleX,\r\n            crop.height * scaleY,\r\n            0,\r\n            0,\r\n            crop.width,\r\n            crop.height\r\n        );\r\n\r\n        const base64Url = canvas.toDataURL('image/jpeg');\r\n        setState({\r\n            ...state,\r\n            image: base64Url\r\n        });\r\n    };\r\n\r\n    const saveImage = () => {\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        if (!details) return;\r\n\r\n        canvas.width = details.naturalWidth;\r\n        canvas.height = details.naturalHeight;\r\n\r\n        ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\r\n        ctx.translate(canvas.width / 2, canvas.height / 2);\r\n        ctx.rotate(state.rotate * Math.PI / 180);\r\n        ctx.scale(state.vartical, state.horizental);\r\n        ctx.drawImage(\r\n            details,\r\n            -canvas.width / 2,\r\n            -canvas.height / 2,\r\n            canvas.width,\r\n            canvas.height\r\n        );\r\n        ctx.resetTransform();\r\n\r\n        // Draw the text\r\n        if (text.value) {\r\n            ctx.font = '30px Arial';\r\n            ctx.fillStyle = 'red';\r\n            ctx.fillText(text.value, text.x, text.y);\r\n        }\r\n\r\n        // Draw the current content of the canvas (including lines)\r\n        const currentCanvas = canvasRef.current;\r\n        if (currentCanvas) {\r\n            ctx.drawImage(currentCanvas, 0, 0);\r\n        }\r\n\r\n        const link = document.createElement('a');\r\n        link.download = 'image_edit.jpg';\r\n        link.href = canvas.toDataURL();\r\n        link.click();\r\n    };\r\n\r\n    const startDrawing = (e) => {\r\n        if (drawingEnabled) {\r\n            setDrawing(true);\r\n            const canvas = canvasRef.current;\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.beginPath();\r\n            ctx.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\r\n        }\r\n    };\r\n\r\n    const draw = (e) => {\r\n        if (drawing && drawingEnabled) {\r\n            const canvas = canvasRef.current;\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\r\n            ctx.strokeStyle = '#000000'; // Set the pencil color (black)\r\n            ctx.lineWidth = 2; // Set the pencil width\r\n            ctx.lineCap = 'round'; // Set the line cap for smoother lines\r\n            ctx.stroke();\r\n        }\r\n    };\r\n\r\n    const stopDrawing = () => {\r\n        if (drawing) {\r\n            const canvas = canvasRef.current;\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.closePath();\r\n            setDrawing(false);\r\n            // Save the current drawing state\r\n            storeData.insert({ ...state });\r\n        }\r\n    };\r\n\r\n    const enableDrawing = () => {\r\n        setDrawingEnabled(!drawingEnabled);\r\n    };\r\n\r\n    const textAdd = () => {\r\n        setText({ value: 'Hello World', x: 50, y: 50 });\r\n        setEditingText(true);\r\n    };\r\n\r\n    const handleTextChange = (e) => {\r\n        setText({ ...text, value: e.target.value });\r\n    };\r\n\r\n    const handleTextDrag = (e) => {\r\n        if (editingText) {\r\n            const canvas = canvasRef.current;\r\n            const { offsetX, offsetY } = e.nativeEvent;\r\n            setText({\r\n                ...text,\r\n                x: offsetX,\r\n                y: offsetY\r\n            });\r\n        }\r\n    };\r\n\r\n    const disableEditingText = () => {\r\n        setEditingText(false);\r\n    };\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className=\"header\">\r\n                <div className=\"logo\">\r\n                    <img src={logo} alt=\"Logo\" />\r\n                </div>\r\n                <div className=\"nav\">\r\n                    <div className=\"inputImage\">\r\n                        <label htmlFor=\"inputImage\">\r\n                            <IoIosImage />\r\n                        </label>\r\n                        <input type=\"file\" id=\"inputImage\" accept='image/*' onChange={imageHandle} />\r\n                    </div>\r\n                    <button onClick={saveImage}><IoIosSave /></button>\r\n                </div>\r\n            </div>\r\n            <div className=\"app\">\r\n                <div className=\"app-sidebar\">\r\n                    {filterElement.map((v, i) =>\r\n                        <button key={i} onClick={() => setProperty(v)}>{v.name}</button>\r\n                    )}\r\n                    <div className=\"slider\">\r\n                        <input\r\n                            type=\"range\"\r\n                            name={property.name}\r\n                            max={property.maxValue}\r\n                            value={state[property.name]}\r\n                            onChange={inputHandle}\r\n                        />\r\n                    </div>\r\n                    <button onClick={leftRotate}><GrRotateLeft /></button>\r\n                    <button onClick={rightRotate}><GrRotateRight /></button>\r\n                    <button onClick={varticalFlip}><CgMergeVertical /></button>\r\n                    <button onClick={horizentalFlip}><CgMergeHorizontal /></button>\r\n                    <button onClick={undo}><IoMdUndo /></button>\r\n                    <button onClick={redo}><IoMdRedo /></button>\r\n                    <button onClick={enableDrawing}><GrEdit />Draw</button>\r\n                    <button onClick={textAdd}><GrSuperscript />Text</button>\r\n                </div>\r\n\r\n                <div className=\"app-content\">\r\n                    <div className=\"canvas-container\">\r\n                        <canvas\r\n                            ref={canvasRef}\r\n                            width=\"800\"\r\n                            height=\"500\"\r\n                            onMouseDown={startDrawing}\r\n                            onMouseMove={draw}\r\n                            onMouseUp={stopDrawing}\r\n                            onMouseOut={stopDrawing}\r\n                        ></canvas>\r\n                        {editingText && (\r\n                            <input\r\n                                type=\"text\"\r\n                                value={text.value}\r\n                                onChange={handleTextChange}\r\n                                onBlur={disableEditingText}\r\n                                onMouseDown={handleTextDrag}\r\n                                style={{\r\n                                    position: 'absolute',\r\n                                    left: `${text.x}px`,\r\n                                    top: `${text.y}px`,\r\n                                    color: 'red',\r\n                                    fontSize: '30px'\r\n                                }}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;"],"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"},"metadata":{},"sourceType":"module"}