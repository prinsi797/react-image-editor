{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Blur = void 0;\n\nconst Factory_1 = require(\"../Factory\");\n\nconst Node_1 = require(\"../Node\");\n\nconst Validators_1 = require(\"../Validators\");\n\nfunction BlurStack() {\n  this.r = 0;\n  this.g = 0;\n  this.b = 0;\n  this.a = 0;\n  this.next = null;\n}\n\nvar mul_table = [512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512, 482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328, 324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292, 289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259];\nvar shg_table = [9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24];\n\nfunction filterGaussBlurRGBA(imageData, radius) {\n  var pixels = imageData.data,\n      width = imageData.width,\n      height = imageData.height;\n  var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, a_sum, r_out_sum, g_out_sum, b_out_sum, a_out_sum, r_in_sum, g_in_sum, b_in_sum, a_in_sum, pr, pg, pb, pa, rbs;\n  var div = radius + radius + 1,\n      widthMinus1 = width - 1,\n      heightMinus1 = height - 1,\n      radiusPlus1 = radius + 1,\n      sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2,\n      stackStart = new BlurStack(),\n      stackEnd = null,\n      stack = stackStart,\n      stackIn = null,\n      stackOut = null,\n      mul_sum = mul_table[radius],\n      shg_sum = shg_table[radius];\n\n  for (i = 1; i < div; i++) {\n    stack = stack.next = new BlurStack();\n\n    if (i === radiusPlus1) {\n      stackEnd = stack;\n    }\n  }\n\n  stack.next = stackStart;\n  yw = yi = 0;\n\n  for (y = 0; y < height; y++) {\n    r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;\n    r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n    g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);\n    b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);\n    a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);\n    r_sum += sumFactor * pr;\n    g_sum += sumFactor * pg;\n    b_sum += sumFactor * pb;\n    a_sum += sumFactor * pa;\n    stack = stackStart;\n\n    for (i = 0; i < radiusPlus1; i++) {\n      stack.r = pr;\n      stack.g = pg;\n      stack.b = pb;\n      stack.a = pa;\n      stack = stack.next;\n    }\n\n    for (i = 1; i < radiusPlus1; i++) {\n      p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n      r_sum += (stack.r = pr = pixels[p]) * (rbs = radiusPlus1 - i);\n      g_sum += (stack.g = pg = pixels[p + 1]) * rbs;\n      b_sum += (stack.b = pb = pixels[p + 2]) * rbs;\n      a_sum += (stack.a = pa = pixels[p + 3]) * rbs;\n      r_in_sum += pr;\n      g_in_sum += pg;\n      b_in_sum += pb;\n      a_in_sum += pa;\n      stack = stack.next;\n    }\n\n    stackIn = stackStart;\n    stackOut = stackEnd;\n\n    for (x = 0; x < width; x++) {\n      pixels[yi + 3] = pa = a_sum * mul_sum >> shg_sum;\n\n      if (pa !== 0) {\n        pa = 255 / pa;\n        pixels[yi] = (r_sum * mul_sum >> shg_sum) * pa;\n        pixels[yi + 1] = (g_sum * mul_sum >> shg_sum) * pa;\n        pixels[yi + 2] = (b_sum * mul_sum >> shg_sum) * pa;\n      } else {\n        pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;\n      }\n\n      r_sum -= r_out_sum;\n      g_sum -= g_out_sum;\n      b_sum -= b_out_sum;\n      a_sum -= a_out_sum;\n      r_out_sum -= stackIn.r;\n      g_out_sum -= stackIn.g;\n      b_out_sum -= stackIn.b;\n      a_out_sum -= stackIn.a;\n      p = yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1) << 2;\n      r_in_sum += stackIn.r = pixels[p];\n      g_in_sum += stackIn.g = pixels[p + 1];\n      b_in_sum += stackIn.b = pixels[p + 2];\n      a_in_sum += stackIn.a = pixels[p + 3];\n      r_sum += r_in_sum;\n      g_sum += g_in_sum;\n      b_sum += b_in_sum;\n      a_sum += a_in_sum;\n      stackIn = stackIn.next;\n      r_out_sum += pr = stackOut.r;\n      g_out_sum += pg = stackOut.g;\n      b_out_sum += pb = stackOut.b;\n      a_out_sum += pa = stackOut.a;\n      r_in_sum -= pr;\n      g_in_sum -= pg;\n      b_in_sum -= pb;\n      a_in_sum -= pa;\n      stackOut = stackOut.next;\n      yi += 4;\n    }\n\n    yw += width;\n  }\n\n  for (x = 0; x < width; x++) {\n    g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;\n    yi = x << 2;\n    r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n    g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);\n    b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);\n    a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);\n    r_sum += sumFactor * pr;\n    g_sum += sumFactor * pg;\n    b_sum += sumFactor * pb;\n    a_sum += sumFactor * pa;\n    stack = stackStart;\n\n    for (i = 0; i < radiusPlus1; i++) {\n      stack.r = pr;\n      stack.g = pg;\n      stack.b = pb;\n      stack.a = pa;\n      stack = stack.next;\n    }\n\n    yp = width;\n\n    for (i = 1; i <= radius; i++) {\n      yi = yp + x << 2;\n      r_sum += (stack.r = pr = pixels[yi]) * (rbs = radiusPlus1 - i);\n      g_sum += (stack.g = pg = pixels[yi + 1]) * rbs;\n      b_sum += (stack.b = pb = pixels[yi + 2]) * rbs;\n      a_sum += (stack.a = pa = pixels[yi + 3]) * rbs;\n      r_in_sum += pr;\n      g_in_sum += pg;\n      b_in_sum += pb;\n      a_in_sum += pa;\n      stack = stack.next;\n\n      if (i < heightMinus1) {\n        yp += width;\n      }\n    }\n\n    yi = x;\n    stackIn = stackStart;\n    stackOut = stackEnd;\n\n    for (y = 0; y < height; y++) {\n      p = yi << 2;\n      pixels[p + 3] = pa = a_sum * mul_sum >> shg_sum;\n\n      if (pa > 0) {\n        pa = 255 / pa;\n        pixels[p] = (r_sum * mul_sum >> shg_sum) * pa;\n        pixels[p + 1] = (g_sum * mul_sum >> shg_sum) * pa;\n        pixels[p + 2] = (b_sum * mul_sum >> shg_sum) * pa;\n      } else {\n        pixels[p] = pixels[p + 1] = pixels[p + 2] = 0;\n      }\n\n      r_sum -= r_out_sum;\n      g_sum -= g_out_sum;\n      b_sum -= b_out_sum;\n      a_sum -= a_out_sum;\n      r_out_sum -= stackIn.r;\n      g_out_sum -= stackIn.g;\n      b_out_sum -= stackIn.b;\n      a_out_sum -= stackIn.a;\n      p = x + ((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width << 2;\n      r_sum += r_in_sum += stackIn.r = pixels[p];\n      g_sum += g_in_sum += stackIn.g = pixels[p + 1];\n      b_sum += b_in_sum += stackIn.b = pixels[p + 2];\n      a_sum += a_in_sum += stackIn.a = pixels[p + 3];\n      stackIn = stackIn.next;\n      r_out_sum += pr = stackOut.r;\n      g_out_sum += pg = stackOut.g;\n      b_out_sum += pb = stackOut.b;\n      a_out_sum += pa = stackOut.a;\n      r_in_sum -= pr;\n      g_in_sum -= pg;\n      b_in_sum -= pb;\n      a_in_sum -= pa;\n      stackOut = stackOut.next;\n      yi += width;\n    }\n  }\n}\n\nconst Blur = function Blur(imageData) {\n  var radius = Math.round(this.blurRadius());\n\n  if (radius > 0) {\n    filterGaussBlurRGBA(imageData, radius);\n  }\n};\n\nexports.Blur = Blur;\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'blurRadius', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);","map":{"version":3,"names":["Object","defineProperty","exports","value","Blur","Factory_1","require","Node_1","Validators_1","BlurStack","r","g","b","a","next","mul_table","shg_table","filterGaussBlurRGBA","imageData","radius","pixels","data","width","height","x","y","i","p","yp","yi","yw","r_sum","g_sum","b_sum","a_sum","r_out_sum","g_out_sum","b_out_sum","a_out_sum","r_in_sum","g_in_sum","b_in_sum","a_in_sum","pr","pg","pb","pa","rbs","div","widthMinus1","heightMinus1","radiusPlus1","sumFactor","stackStart","stackEnd","stack","stackIn","stackOut","mul_sum","shg_sum","Math","round","blurRadius","Factory","addGetterSetter","Node","getNumberValidator","afterSetFilter"],"sources":["D:/screenshort-extension/image-editor-react/node_modules/konva/lib/filters/Blur.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Blur = void 0;\nconst Factory_1 = require(\"../Factory\");\nconst Node_1 = require(\"../Node\");\nconst Validators_1 = require(\"../Validators\");\nfunction BlurStack() {\n    this.r = 0;\n    this.g = 0;\n    this.b = 0;\n    this.a = 0;\n    this.next = null;\n}\nvar mul_table = [\n    512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292,\n    512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292,\n    273, 512, 482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259,\n    496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292,\n    282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373,\n    364, 354, 345, 337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259,\n    507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381,\n    374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307, 302, 297, 292,\n    287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461,\n    454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373,\n    368, 364, 359, 354, 350, 345, 341, 337, 332, 328, 324, 320, 316, 312, 309,\n    305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259,\n    257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442,\n    437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381,\n    377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332,\n    329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292,\n    289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259,\n];\nvar shg_table = [\n    9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17,\n    17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19,\n    19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n    20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n    21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22,\n    22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n    22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23,\n    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n    23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24,\n];\nfunction filterGaussBlurRGBA(imageData, radius) {\n    var pixels = imageData.data, width = imageData.width, height = imageData.height;\n    var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, a_sum, r_out_sum, g_out_sum, b_out_sum, a_out_sum, r_in_sum, g_in_sum, b_in_sum, a_in_sum, pr, pg, pb, pa, rbs;\n    var div = radius + radius + 1, widthMinus1 = width - 1, heightMinus1 = height - 1, radiusPlus1 = radius + 1, sumFactor = (radiusPlus1 * (radiusPlus1 + 1)) / 2, stackStart = new BlurStack(), stackEnd = null, stack = stackStart, stackIn = null, stackOut = null, mul_sum = mul_table[radius], shg_sum = shg_table[radius];\n    for (i = 1; i < div; i++) {\n        stack = stack.next = new BlurStack();\n        if (i === radiusPlus1) {\n            stackEnd = stack;\n        }\n    }\n    stack.next = stackStart;\n    yw = yi = 0;\n    for (y = 0; y < height; y++) {\n        r_in_sum =\n            g_in_sum =\n                b_in_sum =\n                    a_in_sum =\n                        r_sum =\n                            g_sum =\n                                b_sum =\n                                    a_sum =\n                                        0;\n        r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n        g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);\n        b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);\n        a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);\n        r_sum += sumFactor * pr;\n        g_sum += sumFactor * pg;\n        b_sum += sumFactor * pb;\n        a_sum += sumFactor * pa;\n        stack = stackStart;\n        for (i = 0; i < radiusPlus1; i++) {\n            stack.r = pr;\n            stack.g = pg;\n            stack.b = pb;\n            stack.a = pa;\n            stack = stack.next;\n        }\n        for (i = 1; i < radiusPlus1; i++) {\n            p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n            r_sum += (stack.r = pr = pixels[p]) * (rbs = radiusPlus1 - i);\n            g_sum += (stack.g = pg = pixels[p + 1]) * rbs;\n            b_sum += (stack.b = pb = pixels[p + 2]) * rbs;\n            a_sum += (stack.a = pa = pixels[p + 3]) * rbs;\n            r_in_sum += pr;\n            g_in_sum += pg;\n            b_in_sum += pb;\n            a_in_sum += pa;\n            stack = stack.next;\n        }\n        stackIn = stackStart;\n        stackOut = stackEnd;\n        for (x = 0; x < width; x++) {\n            pixels[yi + 3] = pa = (a_sum * mul_sum) >> shg_sum;\n            if (pa !== 0) {\n                pa = 255 / pa;\n                pixels[yi] = ((r_sum * mul_sum) >> shg_sum) * pa;\n                pixels[yi + 1] = ((g_sum * mul_sum) >> shg_sum) * pa;\n                pixels[yi + 2] = ((b_sum * mul_sum) >> shg_sum) * pa;\n            }\n            else {\n                pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;\n            }\n            r_sum -= r_out_sum;\n            g_sum -= g_out_sum;\n            b_sum -= b_out_sum;\n            a_sum -= a_out_sum;\n            r_out_sum -= stackIn.r;\n            g_out_sum -= stackIn.g;\n            b_out_sum -= stackIn.b;\n            a_out_sum -= stackIn.a;\n            p = (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1)) << 2;\n            r_in_sum += stackIn.r = pixels[p];\n            g_in_sum += stackIn.g = pixels[p + 1];\n            b_in_sum += stackIn.b = pixels[p + 2];\n            a_in_sum += stackIn.a = pixels[p + 3];\n            r_sum += r_in_sum;\n            g_sum += g_in_sum;\n            b_sum += b_in_sum;\n            a_sum += a_in_sum;\n            stackIn = stackIn.next;\n            r_out_sum += pr = stackOut.r;\n            g_out_sum += pg = stackOut.g;\n            b_out_sum += pb = stackOut.b;\n            a_out_sum += pa = stackOut.a;\n            r_in_sum -= pr;\n            g_in_sum -= pg;\n            b_in_sum -= pb;\n            a_in_sum -= pa;\n            stackOut = stackOut.next;\n            yi += 4;\n        }\n        yw += width;\n    }\n    for (x = 0; x < width; x++) {\n        g_in_sum =\n            b_in_sum =\n                a_in_sum =\n                    r_in_sum =\n                        g_sum =\n                            b_sum =\n                                a_sum =\n                                    r_sum =\n                                        0;\n        yi = x << 2;\n        r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n        g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);\n        b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);\n        a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);\n        r_sum += sumFactor * pr;\n        g_sum += sumFactor * pg;\n        b_sum += sumFactor * pb;\n        a_sum += sumFactor * pa;\n        stack = stackStart;\n        for (i = 0; i < radiusPlus1; i++) {\n            stack.r = pr;\n            stack.g = pg;\n            stack.b = pb;\n            stack.a = pa;\n            stack = stack.next;\n        }\n        yp = width;\n        for (i = 1; i <= radius; i++) {\n            yi = (yp + x) << 2;\n            r_sum += (stack.r = pr = pixels[yi]) * (rbs = radiusPlus1 - i);\n            g_sum += (stack.g = pg = pixels[yi + 1]) * rbs;\n            b_sum += (stack.b = pb = pixels[yi + 2]) * rbs;\n            a_sum += (stack.a = pa = pixels[yi + 3]) * rbs;\n            r_in_sum += pr;\n            g_in_sum += pg;\n            b_in_sum += pb;\n            a_in_sum += pa;\n            stack = stack.next;\n            if (i < heightMinus1) {\n                yp += width;\n            }\n        }\n        yi = x;\n        stackIn = stackStart;\n        stackOut = stackEnd;\n        for (y = 0; y < height; y++) {\n            p = yi << 2;\n            pixels[p + 3] = pa = (a_sum * mul_sum) >> shg_sum;\n            if (pa > 0) {\n                pa = 255 / pa;\n                pixels[p] = ((r_sum * mul_sum) >> shg_sum) * pa;\n                pixels[p + 1] = ((g_sum * mul_sum) >> shg_sum) * pa;\n                pixels[p + 2] = ((b_sum * mul_sum) >> shg_sum) * pa;\n            }\n            else {\n                pixels[p] = pixels[p + 1] = pixels[p + 2] = 0;\n            }\n            r_sum -= r_out_sum;\n            g_sum -= g_out_sum;\n            b_sum -= b_out_sum;\n            a_sum -= a_out_sum;\n            r_out_sum -= stackIn.r;\n            g_out_sum -= stackIn.g;\n            b_out_sum -= stackIn.b;\n            a_out_sum -= stackIn.a;\n            p =\n                (x +\n                    ((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width) <<\n                    2;\n            r_sum += r_in_sum += stackIn.r = pixels[p];\n            g_sum += g_in_sum += stackIn.g = pixels[p + 1];\n            b_sum += b_in_sum += stackIn.b = pixels[p + 2];\n            a_sum += a_in_sum += stackIn.a = pixels[p + 3];\n            stackIn = stackIn.next;\n            r_out_sum += pr = stackOut.r;\n            g_out_sum += pg = stackOut.g;\n            b_out_sum += pb = stackOut.b;\n            a_out_sum += pa = stackOut.a;\n            r_in_sum -= pr;\n            g_in_sum -= pg;\n            b_in_sum -= pb;\n            a_in_sum -= pa;\n            stackOut = stackOut.next;\n            yi += width;\n        }\n    }\n}\nconst Blur = function Blur(imageData) {\n    var radius = Math.round(this.blurRadius());\n    if (radius > 0) {\n        filterGaussBlurRGBA(imageData, radius);\n    }\n};\nexports.Blur = Blur;\nFactory_1.Factory.addGetterSetter(Node_1.Node, 'blurRadius', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}