{"ast":null,"code":"var _jsxFileName = \"D:\\\\screenshort-extension\\\\new1\\\\react-image-editor\\\\src\\\\component\\\\Main.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './style/main.scss';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { GrRotateLeft, GrRotateRight, GrEdit, GrSuperscript, GrDown } from 'react-icons/gr';\nimport { CgMergeVertical, CgMergeHorizontal } from 'react-icons/cg';\nimport { IoMdUndo, IoMdRedo, IoIosSave, IoIosImage } from 'react-icons/io';\nimport storeData from './LinkedList';\nimport logo from './style/logo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Main = () => {\n  _s();\n\n  const filterElement = [{\n    name: 'brightness',\n    maxValue: 200\n  }, {\n    name: 'grayscale',\n    maxValue: 100\n  }, {\n    name: 'sepia',\n    maxValue: 100\n  }, {\n    name: 'saturate',\n    maxValue: 200\n  }, {\n    name: 'contrast',\n    maxValue: 200\n  }, {\n    name: 'hueRotate',\n    maxValue: 360\n  }];\n  const [showDropdown, setShowDropdown] = useState(false);\n\n  const toggleDropdown = () => setShowDropdown(!showDropdown);\n\n  const [property, setProperty] = useState({\n    name: 'brightness',\n    maxValue: 200\n  });\n  const [details, setDetails] = useState(null);\n  const [crop, setCrop] = useState({});\n  const [drawing, setDrawing] = useState(false);\n  const [drawingEnabled, setDrawingEnabled] = useState(false);\n  const [text, setText] = useState({\n    value: '',\n    x: 50,\n    y: 50\n  });\n  const [editingText, setEditingText] = useState(false);\n  const canvasRef = useRef(null);\n  const [state, setState] = useState({\n    image: '',\n    brightness: 100,\n    grayscale: 0,\n    sepia: 0,\n    saturate: 100,\n    contrast: 100,\n    hueRotate: 0,\n    rotate: 0,\n    vartical: 1,\n    horizental: 1\n  });\n\n  const handleShapeSelect = shape => {\n    // Handle shape selection logic here\n    console.log(`Selected shape: ${shape}`);\n  };\n\n  useEffect(() => {\n    if (details) {\n      drawImage();\n    }\n  }, [state, details, crop, text]);\n\n  const drawImage = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!details || !canvas) return; // Adjust the canvas size to match the image size\n\n    canvas.width = details.naturalWidth;\n    canvas.height = details.naturalHeight; // Clear the canvas before drawing\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height); // Apply filters and transformations\n\n    ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\n    ctx.translate(canvas.width / 2, canvas.height / 2);\n    ctx.rotate(state.rotate * Math.PI / 180);\n    ctx.scale(state.vartical, state.horizental);\n    ctx.drawImage(details, -canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);\n    ctx.resetTransform(); // Draw the text if any\n\n    if (text.value) {\n      ctx.font = '30px Arial';\n      ctx.fillStyle = 'red';\n      ctx.fillText(text.value, text.x, text.y);\n    }\n  };\n\n  const inputHandle = e => {\n    setState({ ...state,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const leftRotate = () => {\n    setState(prevState => ({ ...prevState,\n      rotate: prevState.rotate - 90\n    }));\n    storeData.insert({ ...state,\n      rotate: state.rotate - 90\n    });\n  };\n\n  const rightRotate = () => {\n    setState(prevState => ({ ...prevState,\n      rotate: prevState.rotate + 90\n    }));\n    storeData.insert({ ...state,\n      rotate: state.rotate + 90\n    });\n  };\n\n  const varticalFlip = () => {\n    setState(prevState => ({ ...prevState,\n      vartical: prevState.vartical === 1 ? -1 : 1\n    }));\n    storeData.insert({ ...state,\n      vartical: state.vartical === 1 ? -1 : 1\n    });\n  };\n\n  const horizentalFlip = () => {\n    setState(prevState => ({ ...prevState,\n      horizental: prevState.horizental === 1 ? -1 : 1\n    }));\n    storeData.insert({ ...state,\n      horizental: state.horizental === 1 ? -1 : 1\n    });\n  };\n\n  const redo = () => {\n    const data = storeData.redoEdit();\n\n    if (data) {\n      setState(data);\n    }\n  };\n\n  const undo = () => {\n    const data = storeData.undoEdit();\n\n    if (data) {\n      setState(data);\n    }\n  };\n\n  const imageHandle = e => {\n    if (e.target.files.length !== 0) {\n      const reader = new FileReader();\n\n      reader.onload = () => {\n        const img = new Image();\n        img.src = reader.result;\n\n        img.onload = () => {\n          setDetails(img);\n          setState({ ...state,\n            image: reader.result\n          });\n          storeData.insert({\n            image: reader.result,\n            brightness: 100,\n            grayscale: 0,\n            sepia: 0,\n            saturate: 100,\n            contrast: 100,\n            hueRotate: 0,\n            rotate: 0,\n            vartical: 1,\n            horizental: 1\n          });\n        };\n      };\n\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  const imageCrop = () => {\n    if (!details || !crop || !canvasRef.current) return;\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    const scaleX = details.naturalWidth / details.width;\n    const scaleY = details.naturalHeight / details.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    ctx.drawImage(details, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    const base64Url = canvas.toDataURL('image/jpeg');\n    setState({ ...state,\n      image: base64Url\n    });\n  };\n\n  const saveImage = () => {\n    if (!details) return; // Create an offscreen canvas for final image processing\n\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d'); // Set canvas dimensions to match the original image dimensions\n\n    canvas.width = details.naturalWidth;\n    canvas.height = details.naturalHeight; // Apply filters and transformations\n\n    ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\n    ctx.translate(canvas.width / 2, canvas.height / 2);\n    ctx.rotate(state.rotate * Math.PI / 180);\n    ctx.scale(state.vartical, state.horizental);\n    ctx.drawImage(details, -canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);\n    ctx.resetTransform(); // Draw the text if any\n\n    if (text.value) {\n      ctx.font = '30px Arial';\n      ctx.fillStyle = 'red';\n      ctx.fillText(text.value, text.x, text.y);\n    } // Draw the current content of the main canvas (lines, etc.)\n\n\n    const mainCanvas = canvasRef.current;\n\n    if (mainCanvas) {\n      ctx.drawImage(mainCanvas, 0, 0, canvas.width, canvas.height);\n    } // Create a link to download the image\n\n\n    const link = document.createElement('a');\n    link.download = 'image_edit.jpg';\n    link.href = canvas.toDataURL();\n    link.click();\n  };\n\n  const startDrawing = e => {\n    if (drawingEnabled) {\n      setDrawing(true);\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.beginPath();\n      ctx.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n    }\n  };\n\n  const draw = e => {\n    if (drawing && drawingEnabled) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n      ctx.strokeStyle = '#000000'; // Set the pencil color (black)\n\n      ctx.lineWidth = 2; // Set the pencil width\n\n      ctx.lineCap = 'round'; // Set the line cap for smoother lines\n\n      ctx.stroke();\n    }\n  };\n\n  const stopDrawing = () => {\n    if (drawing) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      ctx.closePath();\n      setDrawing(false); // Save the current drawing state\n\n      storeData.insert({ ...state\n      });\n    }\n  };\n\n  const enableDrawing = () => {\n    setDrawingEnabled(!drawingEnabled);\n  };\n\n  const textAdd = () => {\n    setText({\n      value: 'Hello World',\n      x: 50,\n      y: 50\n    });\n    setEditingText(true);\n  };\n\n  const handleTextChange = e => {\n    setText({ ...text,\n      value: e.target.value\n    });\n  };\n\n  const handleTextDrag = e => {\n    if (editingText) {\n      const canvas = canvasRef.current;\n      const {\n        offsetX,\n        offsetY\n      } = e.nativeEvent;\n      setText({ ...text,\n        x: offsetX,\n        y: offsetY\n      });\n    }\n  };\n\n  const disableEditingText = () => {\n    setEditingText(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          alt: \"Logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inputImage\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"inputImage\",\n            children: /*#__PURE__*/_jsxDEV(IoIosImage, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"inputImage\",\n            accept: \"image/*\",\n            onChange: imageHandle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: saveImage,\n          children: /*#__PURE__*/_jsxDEV(IoIosSave, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 49\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-sidebar\",\n        children: [filterElement.map((v, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setProperty(v),\n          children: v.name\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            name: property.name,\n            max: property.maxValue,\n            value: state[property.name],\n            onChange: inputHandle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: leftRotate,\n          children: /*#__PURE__*/_jsxDEV(GrRotateLeft, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: rightRotate,\n          children: /*#__PURE__*/_jsxDEV(GrRotateRight, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 51\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: varticalFlip,\n          children: /*#__PURE__*/_jsxDEV(CgMergeVertical, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 52\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: horizentalFlip,\n          children: /*#__PURE__*/_jsxDEV(CgMergeHorizontal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 54\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: undo,\n          children: /*#__PURE__*/_jsxDEV(IoMdUndo, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 44\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: redo,\n          children: /*#__PURE__*/_jsxDEV(IoMdRedo, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 44\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: enableDrawing,\n          children: [/*#__PURE__*/_jsxDEV(GrEdit, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 53\n          }, this), \"Draw\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: textAdd,\n          children: [/*#__PURE__*/_jsxDEV(GrSuperscript, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 47\n          }, this), \"Text\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"dropdown-btn\",\n            onClick: toggleDropdown,\n            children: [/*#__PURE__*/_jsxDEV(GrDown, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 29\n            }, this), \" Shapes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 25\n          }, this), showDropdown && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleShapeSelect('triangle'),\n              children: \"Triangle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleShapeSelect('circle'),\n              children: \"Circle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleShapeSelect('quadratic'),\n              children: \"Quadratic\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleShapeSelect('cubic'),\n              children: \"Cubic\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-content\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"canvas-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: canvasRef,\n            width: \"800\",\n            height: \"500\",\n            onMouseDown: startDrawing,\n            onMouseMove: draw,\n            onMouseUp: stopDrawing,\n            onMouseOut: stopDrawing\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 25\n          }, this), editingText && /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: text.value,\n            onChange: handleTextChange,\n            onBlur: disableEditingText,\n            onMouseDown: handleTextDrag,\n            style: {\n              position: 'absolute',\n              left: `${text.x}px`,\n              top: `${text.y}px`,\n              color: 'red',\n              fontSize: '30px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Main, \"XUBVD2qYJN2+TaEsmlLuXCja17U=\");\n\n_c = Main;\nexport default Main; /////\n// import React, { useState, useRef, useEffect } from 'react';\n// import './style/main.scss';\n// import ReactCrop from 'react-image-crop';\n// import 'react-image-crop/dist/ReactCrop.css';\n// import { GrRotateLeft, GrRotateRight, GrEdit, GrSuperscript, GrDown } from 'react-icons/gr';\n// import { CgMergeVertical, CgMergeHorizontal } from 'react-icons/cg';\n// import { IoMdUndo, IoMdRedo, IoIosSave, IoIosImage } from 'react-icons/io';\n// import storeData from './LinkedList';\n// import logo from './style/logo.png';\n// const Main = () => {\n//     const filterElement = [\n//         { name: 'brightness', maxValue: 200 },\n//         { name: 'grayscale', maxValue: 100 },\n//         { name: 'sepia', maxValue: 100 },\n//         { name: 'saturate', maxValue: 200 },\n//         { name: 'contrast', maxValue: 200 },\n//         { name: 'hueRotate', maxValue: 360 }\n//     ];\n//     const shape = [\n//         { name: 'circle', maxValue: 500 },\n//         { name: 'rectangle', maxValue: 500 },\n//         { name: 'triangle', maxValue: 500 },\n//         { name: 'square', maxValue: 500 },\n//     ];\n//     const [showDropdown, setShowDropdown] = useState(false);\n//     const toggleDropdown = () => setShowDropdown(!showDropdown);\n//     const [property, setProperty] = useState({ name: 'brightness', maxValue: 200 });\n//     const [showShapeDropdown, setShowShapeDropdown] = useState(false);\n//     const toggleShapeDropdown = () => setShowShapeDropdown(!showShapeDropdown);\n//     const [shapeProperty, setShapeProperty] = useState({ name: 'circle', maxValue: 200 });\n//     const [details, setDetails] = useState(null);\n//     const [crop, setCrop] = useState({});\n//     const [drawing, setDrawing] = useState(false);\n//     const [drawingEnabled, setDrawingEnabled] = useState(false);\n//     const [text, setText] = useState({ value: '', x: 50, y: 50 });\n//     const [editingText, setEditingText] = useState(false);\n//     const canvasRef = useRef(null);\n//     const [state, setState] = useState({\n//         image: '',\n//         brightness: 100,\n//         grayscale: 0,\n//         sepia: 0,\n//         saturate: 100,\n//         contrast: 100,\n//         hueRotate: 0,\n//         rotate: 0,\n//         vartical: 1,\n//         horizental: 1\n//     });\n//     const handleShapeSelect = (shape) => {\n//         console.log(`Selected shape: ${shape}`);\n//     };\n//     useEffect(() => {\n//         chrome.storage.local.get(\"screenshotDataUrl\", (result) => {\n//             if (result.screenshotDataUrl) {\n//                 const img = new Image();\n//                 img.src = result.screenshotDataUrl;\n//                 img.onload = () => {\n//                     setDetails(img);\n//                     setState((prevState) => ({\n//                         ...prevState,\n//                         image: result.screenshotDataUrl\n//                     }));\n//                     storeData.insert({\n//                         image: result.screenshotDataUrl,\n//                         brightness: 100,\n//                         grayscale: 0,\n//                         sepia: 0,\n//                         saturate: 100,\n//                         contrast: 100,\n//                         hueRotate: 0,\n//                         rotate: 0,\n//                         vartical: 1,\n//                         horizental: 1\n//                     });\n//                 };\n//             }\n//         });\n//     }, []);\n//     useEffect(() => {\n//         if (details) {\n//             drawImage();\n//         }\n//     }, [state, details, crop, text]);\n//     const drawImage = () => {\n//         const canvas = canvasRef.current;\n//         const ctx = canvas.getContext('2d');\n//         if (!details || !canvas) return;\n//         canvas.width = details.naturalWidth;\n//         canvas.height = details.naturalHeight;\n//         ctx.clearRect(0, 0, canvas.width, canvas.height);\n//         ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\n//         ctx.translate(canvas.width / 2, canvas.height / 2);\n//         ctx.rotate(state.rotate * Math.PI / 180);\n//         ctx.scale(state.vartical, state.horizental);\n//         ctx.drawImage(details, -canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);\n//         ctx.resetTransform();\n//         if (text.value) {\n//             ctx.font = '30px Arial';\n//             ctx.fillStyle = 'red';\n//             ctx.fillText(text.value, text.x, text.y);\n//         }\n//     };\n//     const inputHandle = (e) => {\n//         setState({\n//             ...state,\n//             [e.target.name]: e.target.value\n//         });\n//     };\n//     const leftRotate = () => {\n//         setState(prevState => ({\n//             ...prevState,\n//             rotate: prevState.rotate - 90\n//         }));\n//         storeData.insert({ ...state, rotate: state.rotate - 90 });\n//     };\n//     const rightRotate = () => {\n//         setState(prevState => ({\n//             ...prevState,\n//             rotate: prevState.rotate + 90\n//         }));\n//         storeData.insert({ ...state, rotate: state.rotate + 90 });\n//     };\n//     const varticalFlip = () => {\n//         setState(prevState => ({\n//             ...prevState,\n//             vartical: prevState.vartical === 1 ? -1 : 1\n//         }));\n//         storeData.insert({ ...state, vartical: state.vartical === 1 ? -1 : 1 });\n//     };\n//     const horizentalFlip = () => {\n//         setState(prevState => ({\n//             ...prevState,\n//             horizental: prevState.horizental === 1 ? -1 : 1\n//         }));\n//         storeData.insert({ ...state, horizental: state.horizental === 1 ? -1 : 1 });\n//     };\n//     const redo = () => {\n//         const data = storeData.redoEdit();\n//         if (data) {\n//             setState(data);\n//         }\n//     };\n//     const undo = () => {\n//         const data = storeData.undoEdit();\n//         if (data) {\n//             setState(data);\n//         }\n//     };\n//     const imageHandle = (e) => {\n//         if (e.target.files.length !== 0) {\n//             const reader = new FileReader();\n//             reader.onload = () => {\n//                 const img = new Image();\n//                 img.src = reader.result;\n//                 img.onload = () => {\n//                     setDetails(img);\n//                     setState({\n//                         ...state,\n//                         image: reader.result\n//                     });\n//                     storeData.insert({\n//                         image: reader.result,\n//                         brightness: 100,\n//                         grayscale: 0,\n//                         sepia: 0,\n//                         saturate: 100,\n//                         contrast: 100,\n//                         hueRotate: 0,\n//                         rotate: 0,\n//                         vartical: 1,\n//                         horizental: 1\n//                     });\n//                 };\n//             };\n//             reader.readAsDataURL(e.target.files[0]);\n//         }\n//     };\n//     const imageCrop = () => {\n//         if (!details || !crop || !canvasRef.current) return;\n//         const canvas = document.createElement('canvas');\n//         const ctx = canvas.getContext('2d');\n//         const scaleX = details.naturalWidth / details.width;\n//         const scaleY = details.naturalHeight / details.height;\n//         canvas.width = crop.width;\n//         canvas.height = crop.height;\n//         ctx.drawImage(\n//             details,\n//             crop.x * scaleX,\n//             crop.y * scaleY,\n//             crop.width * scaleX,\n//             crop.height * scaleY,\n//             0,\n//             0,\n//             crop.width,\n//             crop.height\n//         );\n//         const base64Url = canvas.toDataURL('image/jpeg');\n//         setState({\n//             ...state,\n//             image: base64Url\n//         });\n//     };\n//     const saveImage = () => {\n//         if (!details) return;\n//         const canvas = document.createElement('canvas');\n//         const ctx = canvas.getContext('2d');\n//         canvas.width = details.naturalWidth;\n//         canvas.height = details.naturalHeight;\n//         ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\n//         ctx.translate(canvas.width / 2, canvas.height / 2);\n//         ctx.rotate(state.rotate * Math.PI / 180);\n//         ctx.scale(state.vartical, state.horizental);\n//         ctx.drawImage(details, -canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);\n//         ctx.resetTransform();\n//         if (text.value) {\n//             ctx.font = '30px Arial';\n//             ctx.fillStyle = 'red';\n//             ctx.fillText(text.value, text.x, text.y);\n//         }\n//         const link = document.createElement('a');\n//         link.download = 'image.png';\n//         link.href = canvas.toDataURL();\n//         link.click();\n//     };\n//     const handleMouseDown = (e) => {\n//         if (drawingEnabled) {\n//             setDrawing(true);\n//             const canvas = canvasRef.current;\n//             const ctx = canvas.getContext('2d');\n//             ctx.beginPath();\n//             ctx.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n//         }\n//     };\n//     const handleMouseMove = (e) => {\n//         if (drawing && drawingEnabled) {\n//             const canvas = canvasRef.current;\n//             const ctx = canvas.getContext('2d');\n//             ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n//             ctx.stroke();\n//         }\n//     };\n//     const handleMouseUp = () => {\n//         if (drawing && drawingEnabled) {\n//             setDrawing(false);\n//             storeData.insert(state);\n//         }\n//     };\n//     const enableDrawing = () => {\n//         setDrawingEnabled(!drawingEnabled);\n//     };\n//     const handleTextChange = (e) => {\n//         setText({\n//             ...text,\n//             value: e.target.value\n//         });\n//     };\n//     const handleTextMouseDown = (e) => {\n//         setEditingText(true);\n//     };\n//     const handleTextMouseMove = (e) => {\n//         if (editingText) {\n//             setText({\n//                 ...text,\n//                 x: e.nativeEvent.offsetX,\n//                 y: e.nativeEvent.offsetY\n//             });\n//         }\n//     };\n//     const handleTextMouseUp = () => {\n//         setEditingText(false);\n//         storeData.insert(state);\n//     };\n//     const handleTextClick = () => {\n//         setText({\n//             ...text,\n//             value: ''\n//         });\n//     };\n//     const handleReset = () => {\n//         setState({\n//             ...state,\n//             brightness: 100,\n//             grayscale: 0,\n//             sepia: 0,\n//             saturate: 100,\n//             contrast: 100,\n//             hueRotate: 0,\n//             rotate: 0,\n//             vartical: 1,\n//             horizental: 1\n//         });\n//         setCrop({});\n//         setText({ value: '', x: 50, y: 50 });\n//         setDrawingEnabled(false);\n//     };\n//     return (\n//         <div className=\"app\">\n//             <header>\n//                 <div className=\"header-content\">\n//                     <img src={logo} alt=\"Logo\" />\n//                     <button className=\"save\" onClick={saveImage}>\n//                         <IoIosSave size={20} />\n//                     </button>\n//                 </div>\n//             </header>\n//             <div className=\"main-content\">\n//                 <aside>\n//                     <div className=\"filter-controls\">\n//                         <div className=\"filter-dropdown\">\n//                             <button className=\"filter-btn\" onClick={toggleDropdown}>\n//                                 {property.name} <GrDown size={10} />\n//                             </button>\n//                             {showDropdown && (\n//                                 <div className=\"filter-dropdown-content\">\n//                                     {filterElement.map((elem, index) => (\n//                                         <button\n//                                             key={index}\n//                                             onClick={() => {\n//                                                 setProperty(elem);\n//                                                 toggleDropdown();\n//                                             }}\n//                                         >\n//                                             {elem.name}\n//                                         </button>\n//                                     ))}\n//                                 </div>\n//                             )}\n//                         </div>\n//                         <input\n//                             type=\"range\"\n//                             min=\"0\"\n//                             max={property.maxValue}\n//                             value={state[property.name]}\n//                             name={property.name}\n//                             onChange={inputHandle}\n//                         />\n//                     </div>\n//                     <div className=\"shape-controls\">\n//                         <div className=\"shape-dropdown\">\n//                             <button className=\"shape-btn\" onClick={toggleShapeDropdown}>\n//                                 {shapeProperty.name} <GrDown size={10} />\n//                             </button>\n//                             {showShapeDropdown && (\n//                                 <div className=\"shape-dropdown-content\">\n//                                     {shape.map((elem, index) => (\n//                                         <button\n//                                             key={index}\n//                                             onClick={() => {\n//                                                 setShapeProperty(elem);\n//                                                 toggleShapeDropdown();\n//                                             }}\n//                                         >\n//                                             {elem.name}\n//                                         </button>\n//                                     ))}\n//                                 </div>\n//                             )}\n//                         </div>\n//                         <input\n//                             type=\"range\"\n//                             min=\"0\"\n//                             max={shapeProperty.maxValue}\n//                             value={state[shapeProperty.name]}\n//                             name={shapeProperty.name}\n//                             onChange={inputHandle}\n//                         />\n//                     </div>\n//                     <div className=\"rotate-controls\">\n//                         <button onClick={leftRotate}>\n//                             <GrRotateLeft size={20} />\n//                         </button>\n//                         <button onClick={rightRotate}>\n//                             <GrRotateRight size={20} />\n//                         </button>\n//                     </div>\n//                     <div className=\"flip-controls\">\n//                         <button onClick={varticalFlip}>\n//                             <CgMergeVertical size={20} />\n//                         </button>\n//                         <button onClick={horizentalFlip}>\n//                             <CgMergeHorizontal size={20} />\n//                         </button>\n//                     </div>\n//                     <div className=\"history-controls\">\n//                         <button onClick={undo}>\n//                             <IoMdUndo size={20} />\n//                         </button>\n//                         <button onClick={redo}>\n//                             <IoMdRedo size={20} />\n//                         </button>\n//                     </div>\n//                     <div className=\"image-controls\">\n//                         <input type=\"file\" accept=\"image/*\" onChange={imageHandle} />\n//                         <button className=\"crop\" onClick={imageCrop}>\n//                             <IoIosImage size={20} />\n//                         </button>\n//                         <button className=\"reset\" onClick={handleReset}>\n//                             <IoIosImage size={20} />\n//                         </button>\n//                     </div>\n//                 </aside>\n//                 <div className=\"app-content\">\n//                     <div className=\"image-container\">\n//                         {details && (\n//                             <canvas\n//                                 ref={canvasRef}\n//                                 onMouseDown={handleMouseDown}\n//                                 onMouseMove={handleMouseMove}\n//                                 onMouseUp={handleMouseUp}\n//                                 className=\"image-canvas\"\n//                             />\n//                         )}\n//                         {drawingEnabled && <div className=\"drawing-overlay\" />}\n//                     </div>\n//                     <div\n//                         className=\"text-input\"\n//                         style={{\n//                             position: 'absolute',\n//                             top: `${text.y}px`,\n//                             left: `${text.x}px`,\n//                         }}\n//                         onMouseDown={handleTextMouseDown}\n//                         onMouseMove={handleTextMouseMove}\n//                         onMouseUp={handleTextMouseUp}\n//                     >\n//                         <input\n//                             type=\"text\"\n//                             value={text.value}\n//                             onChange={handleTextChange}\n//                             onClick={handleTextClick}\n//                         />\n//                     </div>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n// export default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ReactCrop","GrRotateLeft","GrRotateRight","GrEdit","GrSuperscript","GrDown","CgMergeVertical","CgMergeHorizontal","IoMdUndo","IoMdRedo","IoIosSave","IoIosImage","storeData","logo","Main","filterElement","name","maxValue","showDropdown","setShowDropdown","toggleDropdown","property","setProperty","details","setDetails","crop","setCrop","drawing","setDrawing","drawingEnabled","setDrawingEnabled","text","setText","value","x","y","editingText","setEditingText","canvasRef","state","setState","image","brightness","grayscale","sepia","saturate","contrast","hueRotate","rotate","vartical","horizental","handleShapeSelect","shape","console","log","drawImage","canvas","current","ctx","getContext","width","naturalWidth","height","naturalHeight","clearRect","filter","translate","Math","PI","scale","resetTransform","font","fillStyle","fillText","inputHandle","e","target","leftRotate","prevState","insert","rightRotate","varticalFlip","horizentalFlip","redo","data","redoEdit","undo","undoEdit","imageHandle","files","length","reader","FileReader","onload","img","Image","src","result","readAsDataURL","imageCrop","document","createElement","scaleX","scaleY","base64Url","toDataURL","saveImage","mainCanvas","link","download","href","click","startDrawing","beginPath","moveTo","nativeEvent","offsetX","offsetY","draw","lineTo","strokeStyle","lineWidth","lineCap","stroke","stopDrawing","closePath","enableDrawing","textAdd","handleTextChange","handleTextDrag","disableEditingText","map","v","i","position","left","top","color","fontSize"],"sources":["D:/screenshort-extension/new1/react-image-editor/src/component/Main.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './style/main.scss';\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport { GrRotateLeft, GrRotateRight, GrEdit, GrSuperscript, GrDown } from 'react-icons/gr';\r\nimport { CgMergeVertical, CgMergeHorizontal } from 'react-icons/cg';\r\nimport { IoMdUndo, IoMdRedo, IoIosSave, IoIosImage } from 'react-icons/io';\r\nimport storeData from './LinkedList';\r\nimport logo from './style/logo.png';\r\n\r\nconst Main = () => {\r\n    const filterElement = [\r\n        { name: 'brightness', maxValue: 200 },\r\n        { name: 'grayscale', maxValue: 100 },\r\n        { name: 'sepia', maxValue: 100 },\r\n        { name: 'saturate', maxValue: 200 },\r\n        { name: 'contrast', maxValue: 200 },\r\n        { name: 'hueRotate', maxValue: 360 }\r\n    ];\r\n\r\n    const [showDropdown, setShowDropdown] = useState(false);\r\n    const toggleDropdown = () => setShowDropdown(!showDropdown);\r\n    const [property, setProperty] = useState({ name: 'brightness', maxValue: 200 });\r\n    const [details, setDetails] = useState(null);\r\n    const [crop, setCrop] = useState({});\r\n    const [drawing, setDrawing] = useState(false);\r\n    const [drawingEnabled, setDrawingEnabled] = useState(false);\r\n    const [text, setText] = useState({ value: '', x: 50, y: 50 });\r\n    const [editingText, setEditingText] = useState(false);\r\n    const canvasRef = useRef(null);\r\n\r\n    const [state, setState] = useState({\r\n        image: '',\r\n        brightness: 100,\r\n        grayscale: 0,\r\n        sepia: 0,\r\n        saturate: 100,\r\n        contrast: 100,\r\n        hueRotate: 0,\r\n        rotate: 0,\r\n        vartical: 1,\r\n        horizental: 1\r\n    });\r\n\r\n    const handleShapeSelect = (shape) => {\r\n        // Handle shape selection logic here\r\n        console.log(`Selected shape: ${shape}`);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (details) {\r\n            drawImage();\r\n        }\r\n    }, [state, details, crop, text]);\r\n\r\n    const drawImage = () => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        if (!details || !canvas) return;\r\n    \r\n        // Adjust the canvas size to match the image size\r\n        canvas.width = details.naturalWidth;\r\n        canvas.height = details.naturalHeight;\r\n    \r\n        // Clear the canvas before drawing\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    \r\n        // Apply filters and transformations\r\n        ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\r\n        ctx.translate(canvas.width / 2, canvas.height / 2);\r\n        ctx.rotate(state.rotate * Math.PI / 180);\r\n        ctx.scale(state.vartical, state.horizental);\r\n        ctx.drawImage(details, -canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);\r\n        ctx.resetTransform();\r\n    \r\n        // Draw the text if any\r\n        if (text.value) {\r\n            ctx.font = '30px Arial';\r\n            ctx.fillStyle = 'red';\r\n            ctx.fillText(text.value, text.x, text.y);\r\n        }\r\n    };\r\n    \r\n    const inputHandle = (e) => {\r\n        setState({\r\n            ...state,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    const leftRotate = () => {\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            rotate: prevState.rotate - 90\r\n        }));\r\n        storeData.insert({ ...state, rotate: state.rotate - 90 });\r\n    };\r\n\r\n    const rightRotate = () => {\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            rotate: prevState.rotate + 90\r\n        }));\r\n        storeData.insert({ ...state, rotate: state.rotate + 90 });\r\n    };\r\n\r\n    const varticalFlip = () => {\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            vartical: prevState.vartical === 1 ? -1 : 1\r\n        }));\r\n        storeData.insert({ ...state, vartical: state.vartical === 1 ? -1 : 1 });\r\n    };\r\n\r\n    const horizentalFlip = () => {\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            horizental: prevState.horizental === 1 ? -1 : 1\r\n        }));\r\n        storeData.insert({ ...state, horizental: state.horizental === 1 ? -1 : 1 });\r\n    };\r\n\r\n    const redo = () => {\r\n        const data = storeData.redoEdit();\r\n        if (data) {\r\n            setState(data);\r\n        }\r\n    };\r\n\r\n    const undo = () => {\r\n        const data = storeData.undoEdit();\r\n        if (data) {\r\n            setState(data);\r\n        }\r\n    };\r\n\r\n    const imageHandle = (e) => {\r\n        if (e.target.files.length !== 0) {\r\n            const reader = new FileReader();\r\n            reader.onload = () => {\r\n                const img = new Image();\r\n                img.src = reader.result;\r\n                img.onload = () => {\r\n                    setDetails(img);\r\n                    setState({\r\n                        ...state,\r\n                        image: reader.result\r\n                    });\r\n                    storeData.insert({\r\n                        image: reader.result,\r\n                        brightness: 100,\r\n                        grayscale: 0,\r\n                        sepia: 0,\r\n                        saturate: 100,\r\n                        contrast: 100,\r\n                        hueRotate: 0,\r\n                        rotate: 0,\r\n                        vartical: 1,\r\n                        horizental: 1\r\n                    });\r\n                };\r\n            };\r\n            reader.readAsDataURL(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    const imageCrop = () => {\r\n        if (!details || !crop || !canvasRef.current) return;\r\n\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        const scaleX = details.naturalWidth / details.width;\r\n        const scaleY = details.naturalHeight / details.height;\r\n\r\n        canvas.width = crop.width;\r\n        canvas.height = crop.height;\r\n\r\n        ctx.drawImage(\r\n            details,\r\n            crop.x * scaleX,\r\n            crop.y * scaleY,\r\n            crop.width * scaleX,\r\n            crop.height * scaleY,\r\n            0,\r\n            0,\r\n            crop.width,\r\n            crop.height\r\n        );\r\n\r\n        const base64Url = canvas.toDataURL('image/jpeg');\r\n        setState({\r\n            ...state,\r\n            image: base64Url\r\n        });\r\n    };\r\n\r\n    const saveImage = () => {\r\n        if (!details) return;\r\n    \r\n        // Create an offscreen canvas for final image processing\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n    \r\n        // Set canvas dimensions to match the original image dimensions\r\n        canvas.width = details.naturalWidth;\r\n        canvas.height = details.naturalHeight;\r\n    \r\n        // Apply filters and transformations\r\n        ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\r\n        ctx.translate(canvas.width / 2, canvas.height / 2);\r\n        ctx.rotate(state.rotate * Math.PI / 180);\r\n        ctx.scale(state.vartical, state.horizental);\r\n        ctx.drawImage(details, -canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);\r\n        ctx.resetTransform();\r\n    \r\n        // Draw the text if any\r\n        if (text.value) {\r\n            ctx.font = '30px Arial';\r\n            ctx.fillStyle = 'red';\r\n            ctx.fillText(text.value, text.x, text.y);\r\n        }\r\n    \r\n        // Draw the current content of the main canvas (lines, etc.)\r\n        const mainCanvas = canvasRef.current;\r\n        if (mainCanvas) {\r\n            ctx.drawImage(mainCanvas, 0, 0, canvas.width, canvas.height);\r\n        }\r\n    \r\n        // Create a link to download the image\r\n        const link = document.createElement('a');\r\n        link.download = 'image_edit.jpg';\r\n        link.href = canvas.toDataURL();\r\n        link.click();\r\n    };\r\n    \r\n    const startDrawing = (e) => {\r\n        if (drawingEnabled) {\r\n            setDrawing(true);\r\n            const canvas = canvasRef.current;\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.beginPath();\r\n            ctx.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\r\n        }\r\n    };\r\n\r\n    const draw = (e) => {\r\n        if (drawing && drawingEnabled) {\r\n            const canvas = canvasRef.current;\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\r\n            ctx.strokeStyle = '#000000'; // Set the pencil color (black)\r\n            ctx.lineWidth = 2; // Set the pencil width\r\n            ctx.lineCap = 'round'; // Set the line cap for smoother lines\r\n            ctx.stroke();\r\n        }\r\n    };\r\n\r\n    const stopDrawing = () => {\r\n        if (drawing) {\r\n            const canvas = canvasRef.current;\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.closePath();\r\n            setDrawing(false);\r\n            // Save the current drawing state\r\n            storeData.insert({ ...state });\r\n        }\r\n    };\r\n\r\n    const enableDrawing = () => {\r\n        setDrawingEnabled(!drawingEnabled);\r\n    };\r\n\r\n    const textAdd = () => {\r\n        setText({ value: 'Hello World', x: 50, y: 50 });\r\n        setEditingText(true);\r\n    };\r\n\r\n    const handleTextChange = (e) => {\r\n        setText({ ...text, value: e.target.value });\r\n    };\r\n\r\n    const handleTextDrag = (e) => {\r\n        if (editingText) {\r\n            const canvas = canvasRef.current;\r\n            const { offsetX, offsetY } = e.nativeEvent;\r\n            setText({\r\n                ...text,\r\n                x: offsetX,\r\n                y: offsetY\r\n            });\r\n        }\r\n    };\r\n\r\n    const disableEditingText = () => {\r\n        setEditingText(false);\r\n    };\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className=\"header\">\r\n                <div className=\"logo\">\r\n                    <img src={logo} alt=\"Logo\" />\r\n                </div>\r\n                <div className=\"nav\">\r\n                    <div className=\"inputImage\">\r\n                        <label htmlFor=\"inputImage\">\r\n                            <IoIosImage />\r\n                        </label>\r\n                        <input type=\"file\" id=\"inputImage\" accept='image/*' onChange={imageHandle} />\r\n                    </div>\r\n                    <button onClick={saveImage}><IoIosSave /></button>\r\n                </div>\r\n            </div>\r\n            <div className=\"app\">\r\n                <div className=\"app-sidebar\">\r\n                    {filterElement.map((v, i) =>\r\n                        <button key={i} onClick={() => setProperty(v)}>{v.name}</button>\r\n                    )}\r\n                    <div className=\"slider\">\r\n                        <input\r\n                            type=\"range\"\r\n                            name={property.name}\r\n                            max={property.maxValue}\r\n                            value={state[property.name]}\r\n                            onChange={inputHandle}\r\n                        />\r\n                    </div>\r\n                    <button onClick={leftRotate}><GrRotateLeft /></button>\r\n                    <button onClick={rightRotate}><GrRotateRight /></button>\r\n                    <button onClick={varticalFlip}><CgMergeVertical /></button>\r\n                    <button onClick={horizentalFlip}><CgMergeHorizontal /></button>\r\n                    <button onClick={undo}><IoMdUndo /></button>\r\n                    <button onClick={redo}><IoMdRedo /></button>\r\n                    <button onClick={enableDrawing}><GrEdit />Draw</button>\r\n                    <button onClick={textAdd}><GrSuperscript />Text</button>\r\n                    <div className=\"dropdown\">\r\n                        <button className=\"dropdown-btn\" onClick={toggleDropdown}>\r\n                            <GrDown /> Shapes\r\n                        </button>\r\n                        {showDropdown && (\r\n                            <div className=\"dropdown-content\">\r\n                                <button onClick={() => handleShapeSelect('triangle')}>Triangle</button>\r\n                                <button onClick={() => handleShapeSelect('circle')}>Circle</button>\r\n                                <button onClick={() => handleShapeSelect('quadratic')}>Quadratic</button>\r\n                                <button onClick={() => handleShapeSelect('cubic')}>Cubic</button>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"app-content\">\r\n                    <div className=\"canvas-container\">\r\n                        <canvas\r\n                            ref={canvasRef}\r\n                            width=\"800\"\r\n                            height=\"500\"\r\n                            onMouseDown={startDrawing}\r\n                            onMouseMove={draw}\r\n                            onMouseUp={stopDrawing}\r\n                            onMouseOut={stopDrawing}\r\n                        ></canvas>\r\n                        {editingText && (\r\n                            <input\r\n                                type=\"text\"\r\n                                value={text.value}\r\n                                onChange={handleTextChange}\r\n                                onBlur={disableEditingText}\r\n                                onMouseDown={handleTextDrag}\r\n                                style={{\r\n                                    position: 'absolute',\r\n                                    left: `${text.x}px`,\r\n                                    top: `${text.y}px`,\r\n                                    color: 'red',\r\n                                    fontSize: '30px'\r\n                                }}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Main;\r\n\r\n\r\n/////\r\n// import React, { useState, useRef, useEffect } from 'react';\r\n// import './style/main.scss';\r\n// import ReactCrop from 'react-image-crop';\r\n// import 'react-image-crop/dist/ReactCrop.css';\r\n// import { GrRotateLeft, GrRotateRight, GrEdit, GrSuperscript, GrDown } from 'react-icons/gr';\r\n// import { CgMergeVertical, CgMergeHorizontal } from 'react-icons/cg';\r\n// import { IoMdUndo, IoMdRedo, IoIosSave, IoIosImage } from 'react-icons/io';\r\n// import storeData from './LinkedList';\r\n// import logo from './style/logo.png';\r\n\r\n// const Main = () => {\r\n//     const filterElement = [\r\n//         { name: 'brightness', maxValue: 200 },\r\n//         { name: 'grayscale', maxValue: 100 },\r\n//         { name: 'sepia', maxValue: 100 },\r\n//         { name: 'saturate', maxValue: 200 },\r\n//         { name: 'contrast', maxValue: 200 },\r\n//         { name: 'hueRotate', maxValue: 360 }\r\n//     ];\r\n\r\n//     const shape = [\r\n//         { name: 'circle', maxValue: 500 },\r\n//         { name: 'rectangle', maxValue: 500 },\r\n//         { name: 'triangle', maxValue: 500 },\r\n//         { name: 'square', maxValue: 500 },\r\n//     ];\r\n//     const [showDropdown, setShowDropdown] = useState(false);\r\n//     const toggleDropdown = () => setShowDropdown(!showDropdown);\r\n//     const [property, setProperty] = useState({ name: 'brightness', maxValue: 200 });\r\n//     const [showShapeDropdown, setShowShapeDropdown] = useState(false);\r\n//     const toggleShapeDropdown = () => setShowShapeDropdown(!showShapeDropdown);\r\n//     const [shapeProperty, setShapeProperty] = useState({ name: 'circle', maxValue: 200 });\r\n\r\n//     const [details, setDetails] = useState(null);\r\n//     const [crop, setCrop] = useState({});\r\n//     const [drawing, setDrawing] = useState(false);\r\n//     const [drawingEnabled, setDrawingEnabled] = useState(false);\r\n//     const [text, setText] = useState({ value: '', x: 50, y: 50 });\r\n//     const [editingText, setEditingText] = useState(false);\r\n//     const canvasRef = useRef(null);\r\n\r\n//     const [state, setState] = useState({\r\n//         image: '',\r\n//         brightness: 100,\r\n//         grayscale: 0,\r\n//         sepia: 0,\r\n//         saturate: 100,\r\n//         contrast: 100,\r\n//         hueRotate: 0,\r\n//         rotate: 0,\r\n//         vartical: 1,\r\n//         horizental: 1\r\n//     });\r\n\r\n//     const handleShapeSelect = (shape) => {\r\n//         console.log(`Selected shape: ${shape}`);\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         chrome.storage.local.get(\"screenshotDataUrl\", (result) => {\r\n//             if (result.screenshotDataUrl) {\r\n//                 const img = new Image();\r\n//                 img.src = result.screenshotDataUrl;\r\n//                 img.onload = () => {\r\n//                     setDetails(img);\r\n//                     setState((prevState) => ({\r\n//                         ...prevState,\r\n//                         image: result.screenshotDataUrl\r\n//                     }));\r\n//                     storeData.insert({\r\n//                         image: result.screenshotDataUrl,\r\n//                         brightness: 100,\r\n//                         grayscale: 0,\r\n//                         sepia: 0,\r\n//                         saturate: 100,\r\n//                         contrast: 100,\r\n//                         hueRotate: 0,\r\n//                         rotate: 0,\r\n//                         vartical: 1,\r\n//                         horizental: 1\r\n//                     });\r\n//                 };\r\n//             }\r\n//         });\r\n//     }, []);\r\n\r\n//     useEffect(() => {\r\n//         if (details) {\r\n//             drawImage();\r\n//         }\r\n//     }, [state, details, crop, text]);\r\n\r\n//     const drawImage = () => {\r\n//         const canvas = canvasRef.current;\r\n//         const ctx = canvas.getContext('2d');\r\n//         if (!details || !canvas) return;\r\n\r\n//         canvas.width = details.naturalWidth;\r\n//         canvas.height = details.naturalHeight;\r\n\r\n//         ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n//         ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\r\n//         ctx.translate(canvas.width / 2, canvas.height / 2);\r\n//         ctx.rotate(state.rotate * Math.PI / 180);\r\n//         ctx.scale(state.vartical, state.horizental);\r\n//         ctx.drawImage(details, -canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);\r\n//         ctx.resetTransform();\r\n\r\n//         if (text.value) {\r\n//             ctx.font = '30px Arial';\r\n//             ctx.fillStyle = 'red';\r\n//             ctx.fillText(text.value, text.x, text.y);\r\n//         }\r\n//     };\r\n\r\n//     const inputHandle = (e) => {\r\n//         setState({\r\n//             ...state,\r\n//             [e.target.name]: e.target.value\r\n//         });\r\n//     };\r\n\r\n//     const leftRotate = () => {\r\n//         setState(prevState => ({\r\n//             ...prevState,\r\n//             rotate: prevState.rotate - 90\r\n//         }));\r\n//         storeData.insert({ ...state, rotate: state.rotate - 90 });\r\n//     };\r\n\r\n//     const rightRotate = () => {\r\n//         setState(prevState => ({\r\n//             ...prevState,\r\n//             rotate: prevState.rotate + 90\r\n//         }));\r\n//         storeData.insert({ ...state, rotate: state.rotate + 90 });\r\n//     };\r\n\r\n//     const varticalFlip = () => {\r\n//         setState(prevState => ({\r\n//             ...prevState,\r\n//             vartical: prevState.vartical === 1 ? -1 : 1\r\n//         }));\r\n//         storeData.insert({ ...state, vartical: state.vartical === 1 ? -1 : 1 });\r\n//     };\r\n\r\n//     const horizentalFlip = () => {\r\n//         setState(prevState => ({\r\n//             ...prevState,\r\n//             horizental: prevState.horizental === 1 ? -1 : 1\r\n//         }));\r\n//         storeData.insert({ ...state, horizental: state.horizental === 1 ? -1 : 1 });\r\n//     };\r\n\r\n//     const redo = () => {\r\n//         const data = storeData.redoEdit();\r\n//         if (data) {\r\n//             setState(data);\r\n//         }\r\n//     };\r\n\r\n//     const undo = () => {\r\n//         const data = storeData.undoEdit();\r\n//         if (data) {\r\n//             setState(data);\r\n//         }\r\n//     };\r\n\r\n//     const imageHandle = (e) => {\r\n//         if (e.target.files.length !== 0) {\r\n//             const reader = new FileReader();\r\n//             reader.onload = () => {\r\n//                 const img = new Image();\r\n//                 img.src = reader.result;\r\n//                 img.onload = () => {\r\n//                     setDetails(img);\r\n//                     setState({\r\n//                         ...state,\r\n//                         image: reader.result\r\n//                     });\r\n//                     storeData.insert({\r\n//                         image: reader.result,\r\n//                         brightness: 100,\r\n//                         grayscale: 0,\r\n//                         sepia: 0,\r\n//                         saturate: 100,\r\n//                         contrast: 100,\r\n//                         hueRotate: 0,\r\n//                         rotate: 0,\r\n//                         vartical: 1,\r\n//                         horizental: 1\r\n//                     });\r\n//                 };\r\n//             };\r\n//             reader.readAsDataURL(e.target.files[0]);\r\n//         }\r\n//     };\r\n\r\n//     const imageCrop = () => {\r\n//         if (!details || !crop || !canvasRef.current) return;\r\n\r\n//         const canvas = document.createElement('canvas');\r\n//         const ctx = canvas.getContext('2d');\r\n//         const scaleX = details.naturalWidth / details.width;\r\n//         const scaleY = details.naturalHeight / details.height;\r\n\r\n//         canvas.width = crop.width;\r\n//         canvas.height = crop.height;\r\n\r\n//         ctx.drawImage(\r\n//             details,\r\n//             crop.x * scaleX,\r\n//             crop.y * scaleY,\r\n//             crop.width * scaleX,\r\n//             crop.height * scaleY,\r\n//             0,\r\n//             0,\r\n//             crop.width,\r\n//             crop.height\r\n//         );\r\n\r\n//         const base64Url = canvas.toDataURL('image/jpeg');\r\n//         setState({\r\n//             ...state,\r\n//             image: base64Url\r\n//         });\r\n//     };\r\n\r\n//     const saveImage = () => {\r\n//         if (!details) return;\r\n\r\n//         const canvas = document.createElement('canvas');\r\n//         const ctx = canvas.getContext('2d');\r\n\r\n//         canvas.width = details.naturalWidth;\r\n//         canvas.height = details.naturalHeight;\r\n\r\n//         ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\r\n//         ctx.translate(canvas.width / 2, canvas.height / 2);\r\n//         ctx.rotate(state.rotate * Math.PI / 180);\r\n//         ctx.scale(state.vartical, state.horizental);\r\n//         ctx.drawImage(details, -canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);\r\n//         ctx.resetTransform();\r\n\r\n//         if (text.value) {\r\n//             ctx.font = '30px Arial';\r\n//             ctx.fillStyle = 'red';\r\n//             ctx.fillText(text.value, text.x, text.y);\r\n//         }\r\n\r\n//         const link = document.createElement('a');\r\n//         link.download = 'image.png';\r\n//         link.href = canvas.toDataURL();\r\n//         link.click();\r\n//     };\r\n\r\n//     const handleMouseDown = (e) => {\r\n//         if (drawingEnabled) {\r\n//             setDrawing(true);\r\n//             const canvas = canvasRef.current;\r\n//             const ctx = canvas.getContext('2d');\r\n//             ctx.beginPath();\r\n//             ctx.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\r\n//         }\r\n//     };\r\n\r\n//     const handleMouseMove = (e) => {\r\n//         if (drawing && drawingEnabled) {\r\n//             const canvas = canvasRef.current;\r\n//             const ctx = canvas.getContext('2d');\r\n//             ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\r\n//             ctx.stroke();\r\n//         }\r\n//     };\r\n\r\n//     const handleMouseUp = () => {\r\n//         if (drawing && drawingEnabled) {\r\n//             setDrawing(false);\r\n//             storeData.insert(state);\r\n//         }\r\n//     };\r\n\r\n//     const enableDrawing = () => {\r\n//         setDrawingEnabled(!drawingEnabled);\r\n//     };\r\n\r\n//     const handleTextChange = (e) => {\r\n//         setText({\r\n//             ...text,\r\n//             value: e.target.value\r\n//         });\r\n//     };\r\n\r\n//     const handleTextMouseDown = (e) => {\r\n//         setEditingText(true);\r\n//     };\r\n\r\n//     const handleTextMouseMove = (e) => {\r\n//         if (editingText) {\r\n//             setText({\r\n//                 ...text,\r\n//                 x: e.nativeEvent.offsetX,\r\n//                 y: e.nativeEvent.offsetY\r\n//             });\r\n//         }\r\n//     };\r\n\r\n//     const handleTextMouseUp = () => {\r\n//         setEditingText(false);\r\n//         storeData.insert(state);\r\n//     };\r\n\r\n//     const handleTextClick = () => {\r\n//         setText({\r\n//             ...text,\r\n//             value: ''\r\n//         });\r\n//     };\r\n\r\n//     const handleReset = () => {\r\n//         setState({\r\n//             ...state,\r\n//             brightness: 100,\r\n//             grayscale: 0,\r\n//             sepia: 0,\r\n//             saturate: 100,\r\n//             contrast: 100,\r\n//             hueRotate: 0,\r\n//             rotate: 0,\r\n//             vartical: 1,\r\n//             horizental: 1\r\n//         });\r\n//         setCrop({});\r\n//         setText({ value: '', x: 50, y: 50 });\r\n//         setDrawingEnabled(false);\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"app\">\r\n//             <header>\r\n//                 <div className=\"header-content\">\r\n//                     <img src={logo} alt=\"Logo\" />\r\n//                     <button className=\"save\" onClick={saveImage}>\r\n//                         <IoIosSave size={20} />\r\n//                     </button>\r\n//                 </div>\r\n//             </header>\r\n//             <div className=\"main-content\">\r\n//                 <aside>\r\n//                     <div className=\"filter-controls\">\r\n//                         <div className=\"filter-dropdown\">\r\n//                             <button className=\"filter-btn\" onClick={toggleDropdown}>\r\n//                                 {property.name} <GrDown size={10} />\r\n//                             </button>\r\n//                             {showDropdown && (\r\n//                                 <div className=\"filter-dropdown-content\">\r\n//                                     {filterElement.map((elem, index) => (\r\n//                                         <button\r\n//                                             key={index}\r\n//                                             onClick={() => {\r\n//                                                 setProperty(elem);\r\n//                                                 toggleDropdown();\r\n//                                             }}\r\n//                                         >\r\n//                                             {elem.name}\r\n//                                         </button>\r\n//                                     ))}\r\n//                                 </div>\r\n//                             )}\r\n//                         </div>\r\n//                         <input\r\n//                             type=\"range\"\r\n//                             min=\"0\"\r\n//                             max={property.maxValue}\r\n//                             value={state[property.name]}\r\n//                             name={property.name}\r\n//                             onChange={inputHandle}\r\n//                         />\r\n//                     </div>\r\n//                     <div className=\"shape-controls\">\r\n//                         <div className=\"shape-dropdown\">\r\n//                             <button className=\"shape-btn\" onClick={toggleShapeDropdown}>\r\n//                                 {shapeProperty.name} <GrDown size={10} />\r\n//                             </button>\r\n//                             {showShapeDropdown && (\r\n//                                 <div className=\"shape-dropdown-content\">\r\n//                                     {shape.map((elem, index) => (\r\n//                                         <button\r\n//                                             key={index}\r\n//                                             onClick={() => {\r\n//                                                 setShapeProperty(elem);\r\n//                                                 toggleShapeDropdown();\r\n//                                             }}\r\n//                                         >\r\n//                                             {elem.name}\r\n//                                         </button>\r\n//                                     ))}\r\n//                                 </div>\r\n//                             )}\r\n//                         </div>\r\n//                         <input\r\n//                             type=\"range\"\r\n//                             min=\"0\"\r\n//                             max={shapeProperty.maxValue}\r\n//                             value={state[shapeProperty.name]}\r\n//                             name={shapeProperty.name}\r\n//                             onChange={inputHandle}\r\n//                         />\r\n//                     </div>\r\n//                     <div className=\"rotate-controls\">\r\n//                         <button onClick={leftRotate}>\r\n//                             <GrRotateLeft size={20} />\r\n//                         </button>\r\n//                         <button onClick={rightRotate}>\r\n//                             <GrRotateRight size={20} />\r\n//                         </button>\r\n//                     </div>\r\n//                     <div className=\"flip-controls\">\r\n//                         <button onClick={varticalFlip}>\r\n//                             <CgMergeVertical size={20} />\r\n//                         </button>\r\n//                         <button onClick={horizentalFlip}>\r\n//                             <CgMergeHorizontal size={20} />\r\n//                         </button>\r\n//                     </div>\r\n//                     <div className=\"history-controls\">\r\n//                         <button onClick={undo}>\r\n//                             <IoMdUndo size={20} />\r\n//                         </button>\r\n//                         <button onClick={redo}>\r\n//                             <IoMdRedo size={20} />\r\n//                         </button>\r\n//                     </div>\r\n//                     <div className=\"image-controls\">\r\n//                         <input type=\"file\" accept=\"image/*\" onChange={imageHandle} />\r\n//                         <button className=\"crop\" onClick={imageCrop}>\r\n//                             <IoIosImage size={20} />\r\n//                         </button>\r\n//                         <button className=\"reset\" onClick={handleReset}>\r\n//                             <IoIosImage size={20} />\r\n//                         </button>\r\n//                     </div>\r\n//                 </aside>\r\n//                 <div className=\"app-content\">\r\n//                     <div className=\"image-container\">\r\n//                         {details && (\r\n//                             <canvas\r\n//                                 ref={canvasRef}\r\n//                                 onMouseDown={handleMouseDown}\r\n//                                 onMouseMove={handleMouseMove}\r\n//                                 onMouseUp={handleMouseUp}\r\n//                                 className=\"image-canvas\"\r\n//                             />\r\n//                         )}\r\n//                         {drawingEnabled && <div className=\"drawing-overlay\" />}\r\n//                     </div>\r\n//                     <div\r\n//                         className=\"text-input\"\r\n//                         style={{\r\n//                             position: 'absolute',\r\n//                             top: `${text.y}px`,\r\n//                             left: `${text.x}px`,\r\n//                         }}\r\n//                         onMouseDown={handleTextMouseDown}\r\n//                         onMouseMove={handleTextMouseMove}\r\n//                         onMouseUp={handleTextMouseUp}\r\n//                     >\r\n//                         <input\r\n//                             type=\"text\"\r\n//                             value={text.value}\r\n//                             onChange={handleTextChange}\r\n//                             onClick={handleTextClick}\r\n//                         />\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Main;"],"mappings":"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},"metadata":{},"sourceType":"module"}