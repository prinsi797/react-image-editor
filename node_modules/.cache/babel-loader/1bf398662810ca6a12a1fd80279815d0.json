{"ast":null,"code":"import * as React from \"react\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nvar _a, _b;\n\nconst useIsomorphicLayoutEffect = typeof window !== \"undefined\" && (((_a = window.document) == null ? void 0 : _a.createElement) || ((_b = window.navigator) == null ? void 0 : _b.product) === \"ReactNative\") ? React.useLayoutEffect : React.useEffect;\n\nfunction traverseFiber(fiber, ascending, selector) {\n  if (!fiber) return;\n  if (selector(fiber) === true) return fiber;\n  let child = ascending ? fiber.return : fiber.child;\n\n  while (child) {\n    const match = traverseFiber(child, ascending, selector);\n    if (match) return match;\n    child = ascending ? null : child.sibling;\n  }\n}\n\nfunction wrapContext(context) {\n  try {\n    return Object.defineProperties(context, {\n      _currentRenderer: {\n        get() {\n          return null;\n        },\n\n        set() {}\n\n      },\n      _currentRenderer2: {\n        get() {\n          return null;\n        },\n\n        set() {}\n\n      }\n    });\n  } catch (_) {\n    return context;\n  }\n}\n\nconst error = console.error;\n\nconsole.error = function () {\n  const message = [...arguments].join(\"\");\n\n  if ((message == null ? void 0 : message.startsWith(\"Warning:\")) && message.includes(\"useContext\")) {\n    console.error = error;\n    return;\n  }\n\n  return error.apply(this, arguments);\n};\n\nconst FiberContext = wrapContext(React.createContext(null));\n\nclass FiberProvider extends React.Component {\n  render() {\n    return /* @__PURE__ */React.createElement(FiberContext.Provider, {\n      value: this._reactInternals\n    }, this.props.children);\n  }\n\n}\n\nfunction useFiber() {\n  const root = React.useContext(FiberContext);\n  if (root === null) throw new Error(\"its-fine: useFiber must be called within a <FiberProvider />!\");\n  const id = React.useId();\n  const fiber = React.useMemo(() => {\n    for (const maybeFiber of [root, root == null ? void 0 : root.alternate]) {\n      if (!maybeFiber) continue;\n      const fiber2 = traverseFiber(maybeFiber, false, node => {\n        let state = node.memoizedState;\n\n        while (state) {\n          if (state.memoizedState === id) return true;\n          state = state.next;\n        }\n      });\n      if (fiber2) return fiber2;\n    }\n  }, [root, id]);\n  return fiber;\n}\n\nfunction useContainer() {\n  const fiber = useFiber();\n  const root = React.useMemo(() => traverseFiber(fiber, true, node => {\n    var _a2;\n\n    return ((_a2 = node.stateNode) == null ? void 0 : _a2.containerInfo) != null;\n  }), [fiber]);\n  return root == null ? void 0 : root.stateNode.containerInfo;\n}\n\nfunction useNearestChild(type) {\n  const fiber = useFiber();\n  const childRef = React.useRef();\n  useIsomorphicLayoutEffect(() => {\n    var _a2;\n\n    childRef.current = (_a2 = traverseFiber(fiber, false, node => typeof node.type === \"string\" && (type === void 0 || node.type === type))) == null ? void 0 : _a2.stateNode;\n  }, [fiber]);\n  return childRef;\n}\n\nfunction useNearestParent(type) {\n  const fiber = useFiber();\n  const parentRef = React.useRef();\n  useIsomorphicLayoutEffect(() => {\n    var _a2;\n\n    parentRef.current = (_a2 = traverseFiber(fiber, true, node => typeof node.type === \"string\" && (type === void 0 || node.type === type))) == null ? void 0 : _a2.stateNode;\n  }, [fiber]);\n  return parentRef;\n}\n\nfunction useContextMap() {\n  const fiber = useFiber();\n  const [contextMap] = React.useState(() => /* @__PURE__ */new Map());\n  contextMap.clear();\n  let node = fiber;\n\n  while (node) {\n    if (node.type && typeof node.type === \"object\") {\n      const enableRenderableContext = node.type._context === void 0 && node.type.Provider === node.type;\n      const context = enableRenderableContext ? node.type : node.type._context;\n\n      if (context && context !== FiberContext && !contextMap.has(context)) {\n        contextMap.set(context, React.useContext(wrapContext(context)));\n      }\n    }\n\n    node = node.return;\n  }\n\n  return contextMap;\n}\n\nfunction useContextBridge() {\n  const contextMap = useContextMap();\n  return React.useMemo(() => Array.from(contextMap.keys()).reduce((Prev, context) => props => /* @__PURE__ */React.createElement(Prev, null, /* @__PURE__ */React.createElement(context.Provider, __spreadProps(__spreadValues({}, props), {\n    value: contextMap.get(context)\n  }))), props => /* @__PURE__ */React.createElement(FiberProvider, __spreadValues({}, props))), [contextMap]);\n}\n\nexport { FiberProvider, traverseFiber, useContainer, useContextBridge, useContextMap, useFiber, useNearestChild, useNearestParent };","map":{"version":3,"mappings":"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","names":["useIsomorphicLayoutEffect","window","_a","document","createElement","_b","navigator","React","useLayoutEffect","useEffect","fiber","ascending","selector","child","return","match","traverseFiber","sibling","wrapContext","context","defineProperties","_currentRenderer","get","set","_currentRenderer2","_","error","console","message","arguments","join","startsWith","includes","apply","FiberContext","createContext","Component","render","Provider","value","_reactInternals","props","children","useFiber","useContext","root","Error","useId","useMemo","maybeFiber","alternate","node","state","memoizedState","id","next","useContainer","stateNode","containerInfo","useNearestChild","type","useRef","childRef","current","useNearestParent","parentRef","useContextMap","contextMap","useState","Map","clear","_context","enableRenderableContext","has","useContextBridge","Array","from","keys","reduce","Prev"],"sources":["D:\\screenshort-extension\\image-editor-react\\node_modules\\its-fine\\src\\index.tsx"],"sourcesContent":["import * as React from 'react'\r\nimport type ReactReconciler from 'react-reconciler'\r\n\r\n/**\r\n * An SSR-friendly useLayoutEffect.\r\n *\r\n * React currently throws a warning when using useLayoutEffect on the server.\r\n * To get around it, we can conditionally useEffect on the server (no-op) and\r\n * useLayoutEffect elsewhere.\r\n *\r\n * @see https://github.com/facebook/react/issues/14927\r\n */\r\nconst useIsomorphicLayoutEffect =\r\n  typeof window !== 'undefined' && (window.document?.createElement || window.navigator?.product === 'ReactNative')\r\n    ? React.useLayoutEffect\r\n    : React.useEffect\r\n\r\n/**\r\n * Represents a react-internal Fiber node.\r\n */\r\nexport type Fiber<T = any> = Omit<ReactReconciler.Fiber, 'stateNode'> & { stateNode: T }\r\n\r\n/**\r\n * Represents a {@link Fiber} node selector for traversal.\r\n */\r\nexport type FiberSelector<T = any> = (\r\n  /** The current {@link Fiber} node. */\r\n  node: Fiber<T | null>,\r\n) => boolean | void\r\n\r\n/**\r\n * Traverses up or down a {@link Fiber}, return `true` to stop and select a node.\r\n */\r\nexport function traverseFiber<T = any>(\r\n  /** Input {@link Fiber} to traverse. */\r\n  fiber: Fiber | undefined,\r\n  /** Whether to ascend and walk up the tree. Will walk down if `false`. */\r\n  ascending: boolean,\r\n  /** A {@link Fiber} node selector, returns the first match when `true` is passed. */\r\n  selector: FiberSelector<T>,\r\n): Fiber<T> | undefined {\r\n  if (!fiber) return\r\n  if (selector(fiber) === true) return fiber\r\n\r\n  let child = ascending ? fiber.return : fiber.child\r\n  while (child) {\r\n    const match = traverseFiber(child, ascending, selector)\r\n    if (match) return match\r\n\r\n    child = ascending ? null : child.sibling\r\n  }\r\n}\r\n\r\n// In development, React will warn about using contexts between renderers.\r\n// Hide the warning because its-fine fixes this issue\r\n// https://github.com/facebook/react/pull/12779\r\nfunction wrapContext<T>(context: React.Context<T>): React.Context<T> {\r\n  try {\r\n    return Object.defineProperties(context, {\r\n      _currentRenderer: {\r\n        get() {\r\n          return null\r\n        },\r\n        set() {},\r\n      },\r\n      _currentRenderer2: {\r\n        get() {\r\n          return null\r\n        },\r\n        set() {},\r\n      },\r\n    })\r\n  } catch (_) {\r\n    return context\r\n  }\r\n}\r\n\r\nconst error = console.error\r\nconsole.error = function () {\r\n  const message = [...arguments].join('')\r\n  if (message?.startsWith('Warning:') && message.includes('useContext')) {\r\n    console.error = error\r\n    return\r\n  }\r\n\r\n  return error.apply(this, arguments as any)\r\n}\r\n\r\nconst FiberContext = wrapContext(React.createContext<Fiber>(null!))\r\n\r\n/**\r\n * A react-internal {@link Fiber} provider. This component binds React children to the React Fiber tree. Call its-fine hooks within this.\r\n */\r\nexport class FiberProvider extends React.Component<{ children?: React.ReactNode }> {\r\n  private _reactInternals!: Fiber\r\n\r\n  render() {\r\n    return <FiberContext.Provider value={this._reactInternals}>{this.props.children}</FiberContext.Provider>\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the current react-internal {@link Fiber}. This is an implementation detail of [react-reconciler](https://github.com/facebook/react/tree/main/packages/react-reconciler).\r\n */\r\nexport function useFiber(): Fiber<null> | undefined {\r\n  const root = React.useContext(FiberContext)\r\n  if (root === null) throw new Error('its-fine: useFiber must be called within a <FiberProvider />!')\r\n\r\n  const id = React.useId()\r\n  const fiber = React.useMemo(() => {\r\n    for (const maybeFiber of [root, root?.alternate]) {\r\n      if (!maybeFiber) continue\r\n      const fiber = traverseFiber<null>(maybeFiber, false, (node) => {\r\n        let state = node.memoizedState\r\n        while (state) {\r\n          if (state.memoizedState === id) return true\r\n          state = state.next\r\n        }\r\n      })\r\n      if (fiber) return fiber\r\n    }\r\n  }, [root, id])\r\n\r\n  return fiber\r\n}\r\n\r\n/**\r\n * Represents a react-reconciler container instance.\r\n */\r\nexport interface ContainerInstance<T = any> {\r\n  containerInfo: T\r\n}\r\n\r\n/**\r\n * Returns the current react-reconciler container info passed to {@link ReactReconciler.Reconciler.createContainer}.\r\n *\r\n * In react-dom, a container will point to the root DOM element; in react-three-fiber, it will point to the root Zustand store.\r\n */\r\nexport function useContainer<T = any>(): T | undefined {\r\n  const fiber = useFiber()\r\n  const root = React.useMemo(\r\n    () => traverseFiber<ContainerInstance<T>>(fiber, true, (node) => node.stateNode?.containerInfo != null),\r\n    [fiber],\r\n  )\r\n\r\n  return root?.stateNode.containerInfo\r\n}\r\n\r\n/**\r\n * Returns the nearest react-reconciler child instance or the node created from {@link ReactReconciler.HostConfig.createInstance}.\r\n *\r\n * In react-dom, this would be a DOM element; in react-three-fiber this would be an instance descriptor.\r\n */\r\nexport function useNearestChild<T = any>(\r\n  /** An optional element type to filter to. */\r\n  type?: keyof JSX.IntrinsicElements,\r\n): React.MutableRefObject<T | undefined> {\r\n  const fiber = useFiber()\r\n  const childRef = React.useRef<T>()\r\n\r\n  useIsomorphicLayoutEffect(() => {\r\n    childRef.current = traverseFiber<T>(\r\n      fiber,\r\n      false,\r\n      (node) => typeof node.type === 'string' && (type === undefined || node.type === type),\r\n    )?.stateNode\r\n  }, [fiber])\r\n\r\n  return childRef\r\n}\r\n\r\n/**\r\n * Returns the nearest react-reconciler parent instance or the node created from {@link ReactReconciler.HostConfig.createInstance}.\r\n *\r\n * In react-dom, this would be a DOM element; in react-three-fiber this would be an instance descriptor.\r\n */\r\nexport function useNearestParent<T = any>(\r\n  /** An optional element type to filter to. */\r\n  type?: keyof JSX.IntrinsicElements,\r\n): React.MutableRefObject<T | undefined> {\r\n  const fiber = useFiber()\r\n  const parentRef = React.useRef<T>()\r\n\r\n  useIsomorphicLayoutEffect(() => {\r\n    parentRef.current = traverseFiber<T>(\r\n      fiber,\r\n      true,\r\n      (node) => typeof node.type === 'string' && (type === undefined || node.type === type),\r\n    )?.stateNode\r\n  }, [fiber])\r\n\r\n  return parentRef\r\n}\r\n\r\nexport type ContextMap = Map<React.Context<any>, any> & {\r\n  get<T>(context: React.Context<T>): T | undefined\r\n}\r\n\r\n/**\r\n * Returns a map of all contexts and their values.\r\n */\r\nexport function useContextMap(): ContextMap {\r\n  const fiber = useFiber()\r\n  const [contextMap] = React.useState(() => new Map<React.Context<any>, any>())\r\n\r\n  // Collect live context\r\n  contextMap.clear()\r\n  let node = fiber\r\n  while (node) {\r\n    if (node.type && typeof node.type === 'object') {\r\n      // https://github.com/facebook/react/pull/28226\r\n      const enableRenderableContext = node.type._context === undefined && node.type.Provider === node.type\r\n      const context = enableRenderableContext ? node.type : node.type._context\r\n      if (context && context !== FiberContext && !contextMap.has(context)) {\r\n        contextMap.set(context, React.useContext(wrapContext(context)))\r\n      }\r\n    }\r\n\r\n    node = node.return!\r\n  }\r\n\r\n  return contextMap\r\n}\r\n\r\n/**\r\n * Represents a react-context bridge provider component.\r\n */\r\nexport type ContextBridge = React.FC<React.PropsWithChildren<{}>>\r\n\r\n/**\r\n * React Context currently cannot be shared across [React renderers](https://reactjs.org/docs/codebase-overview.html#renderers) but explicitly forwarded between providers (see [react#17275](https://github.com/facebook/react/issues/17275)). This hook returns a {@link ContextBridge} of live context providers to pierce Context across renderers.\r\n *\r\n * Pass {@link ContextBridge} as a component to a secondary renderer to enable context-sharing within its children.\r\n */\r\nexport function useContextBridge(): ContextBridge {\r\n  const contextMap = useContextMap()\r\n\r\n  // Flatten context and their memoized values into a `ContextBridge` provider\r\n  return React.useMemo(\r\n    () =>\r\n      Array.from(contextMap.keys()).reduce(\r\n        (Prev, context) => (props) =>\r\n          (\r\n            <Prev>\r\n              <context.Provider {...props} value={contextMap.get(context)} />\r\n            </Prev>\r\n          ),\r\n        (props) => <FiberProvider {...props} />,\r\n      ),\r\n    [contextMap],\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}