{"ast":null,"code":"// import React, { useState, useRef, useEffect } from 'react';\n// import './style/main.scss';\n// import ReactCrop from 'react-image-crop';\n// import 'react-image-crop/dist/ReactCrop.css';\n// import { GrRotateLeft, GrRotateRight, GrEdit, GrSuperscript } from 'react-icons/gr';\n// import { CgMergeVertical, CgMergeHorizontal } from 'react-icons/cg';\n// import { IoMdUndo, IoMdRedo, IoIosSave, IoIosImage } from 'react-icons/io';\n// import storeData from './LinkedList';\n// import logo from './style/logo.jpeg';\n// const Main = () => {\n//     const filterElement = [\n//         { name: 'brightness', maxValue: 200 },\n//         { name: 'grayscale', maxValue: 100 },\n//         { name: 'sepia', maxValue: 100 },\n//         { name: 'saturate', maxValue: 200 },\n//         { name: 'contrast', maxValue: 200 },\n//         { name: 'hueRotate', maxValue: 360 }\n//     ];\n//     const [property, setProperty] = useState({ name: 'brightness', maxValue: 200 });\n//     const [details, setDetails] = useState(null);\n//     const [crop, setCrop] = useState({});\n//     const [drawing, setDrawing] = useState(false);\n//     const [text, setText] = useState({ value: '', x: 50, y: 50 });\n//     const [editingText, setEditingText] = useState(false);\n//     const canvasRef = useRef(null);\n//     const [state, setState] = useState({\n//         image: '',\n//         brightness: 100,\n//         grayscale: 0,\n//         sepia: 0,\n//         saturate: 100,\n//         contrast: 100,\n//         hueRotate: 0,\n//         rotate: 0,\n//         vartical: 1,\n//         horizental: 1\n//     });\n//     useEffect(() => {\n//         if (details) {\n//             drawImage();\n//         }\n//     }, [state, details, crop, text]);\n//     const drawImage = () => {\n//         const canvas = canvasRef.current;\n//         const ctx = canvas.getContext('2d');\n//         if (!details || !canvas) return;\n//         const { width, height } = canvas;\n//         // Adjust the canvas size to match the image size\n//         canvas.width = details.naturalWidth;\n//         canvas.height = details.naturalHeight;\n//         ctx.clearRect(0, 0, width, height);\n//         ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\n//         ctx.translate(width / 2, height / 2);\n//         ctx.rotate(state.rotate * Math.PI / 180);\n//         ctx.scale(state.vartical, state.horizental);\n//         ctx.drawImage(details, -width / 2, -height / 2, width, height);\n//         ctx.resetTransform();\n//         if (text.value) {\n//             ctx.font = '30px Arial';\n//             ctx.fillStyle = 'red';\n//             ctx.fillText(text.value, text.x, text.y);\n//         }\n//     };\n//     const inputHandle = (e) => {\n//         setState({\n//             ...state,\n//             [e.target.name]: e.target.value\n//         });\n//     };\n//     const leftRotate = () => {\n//         setState(prevState => ({\n//             ...prevState,\n//             rotate: prevState.rotate - 90\n//         }));\n//         storeData.insert({ ...state, rotate: state.rotate - 90 });\n//     };\n//     const rightRotate = () => {\n//         setState(prevState => ({\n//             ...prevState,\n//             rotate: prevState.rotate + 90\n//         }));\n//         storeData.insert({ ...state, rotate: state.rotate + 90 });\n//     };\n//     const varticalFlip = () => {\n//         setState(prevState => ({\n//             ...prevState,\n//             vartical: prevState.vartical === 1 ? -1 : 1\n//         }));\n//         storeData.insert({ ...state, vartical: state.vartical === 1 ? -1 : 1 });\n//     };\n//     const horizentalFlip = () => {\n//         setState(prevState => ({\n//             ...prevState,\n//             horizental: prevState.horizental === 1 ? -1 : 1\n//         }));\n//         storeData.insert({ ...state, horizental: state.horizental === 1 ? -1 : 1 });\n//     };\n//     const redo = () => {\n//         const data = storeData.redoEdit();\n//         if (data) {\n//             setState(data);\n//         }\n//     };\n//     const undo = () => {\n//         const data = storeData.undoEdit();\n//         if (data) {\n//             setState(data);\n//         }\n//     };\n//     const imageHandle = (e) => {\n//         if (e.target.files.length !== 0) {\n//             const reader = new FileReader();\n//             reader.onload = () => {\n//                 const img = new Image();\n//                 img.src = reader.result;\n//                 img.onload = () => {\n//                     setDetails(img);\n//                     setState({\n//                         ...state,\n//                         image: reader.result\n//                     });\n//                     storeData.insert({\n//                         image: reader.result,\n//                         brightness: 100,\n//                         grayscale: 0,\n//                         sepia: 0,\n//                         saturate: 100,\n//                         contrast: 100,\n//                         hueRotate: 0,\n//                         rotate: 0,\n//                         vartical: 1,\n//                         horizental: 1\n//                     });\n//                 };\n//             };\n//             reader.readAsDataURL(e.target.files[0]);\n//         }\n//     };\n//     const imageCrop = () => {\n//         if (!details || !crop || !canvasRef.current) return;\n//         const canvas = document.createElement('canvas');\n//         const ctx = canvas.getContext('2d');\n//         const scaleX = details.naturalWidth / details.width;\n//         const scaleY = details.naturalHeight / details.height;\n//         canvas.width = crop.width;\n//         canvas.height = crop.height;\n//         ctx.drawImage(\n//             details,\n//             crop.x * scaleX,\n//             crop.y * scaleY,\n//             crop.width * scaleX,\n//             crop.height * scaleY,\n//             0,\n//             0,\n//             crop.width,\n//             crop.height\n//         );\n//         const base64Url = canvas.toDataURL('image/jpeg');\n//         setState({\n//             ...state,\n//             image: base64Url\n//         });\n//     };\n//     const saveImage = () => {\n//         const canvas = document.createElement('canvas');\n//         const ctx = canvas.getContext('2d');\n//         if (!details) return;\n//         canvas.width = details.naturalWidth;\n//         canvas.height = details.naturalHeight;\n//         ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\n//         ctx.translate(canvas.width / 2, canvas.height / 2);\n//         ctx.rotate(state.rotate * Math.PI / 180);\n//         ctx.scale(state.vartical, state.horizental);\n//         ctx.drawImage(\n//             details,\n//             -canvas.width / 2,\n//             -canvas.height / 2,\n//             canvas.width,\n//             canvas.height\n//         );\n//         ctx.resetTransform();\n//         if (text.value) {\n//             ctx.font = '30px Arial';\n//             ctx.fillStyle = 'red';\n//             ctx.fillText(text.value, text.x, text.y);\n//         }\n//         const link = document.createElement('a');\n//         link.download = 'image_edit.jpg';\n//         link.href = canvas.toDataURL();\n//         link.click();\n//     };\n//     const startDrawing = (e) => {\n//         if (drawing) {\n//             const canvas = canvasRef.current;\n//             const ctx = canvas.getContext('2d');\n//             ctx.beginPath();\n//             ctx.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n//         }\n//     };\n//     const draw = (e) => {\n//         if (drawing) {\n//             const canvas = canvasRef.current;\n//             const ctx = canvas.getContext('2d');\n//             ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n//             ctx.strokeStyle = '#000000'; // Set the pencil color (black)\n//             ctx.lineWidth = 2; // Set the pencil width\n//             ctx.lineCap = 'round'; // Set the line cap for smoother lines\n//             ctx.stroke();\n//         }\n//     };\n//     const stopDrawing = () => {\n//         if (drawing) {\n//             const canvas = canvasRef.current;\n//             const ctx = canvas.getContext('2d');\n//             ctx.closePath();\n//         }\n//     };\n//     const enableDrawing = () => {\n//         setDrawing(!drawing);\n//     };\n//     const textAdd = () => {\n//         setText({ value: 'Hello World', x: 50, y: 50 });\n//         setEditingText(true);\n//     };\n//     const handleTextChange = (e) => {\n//         setText({ ...text, value: e.target.value });\n//     };\n//     const handleTextDrag = (e) => {\n//         if (editingText) {\n//             const canvas = canvasRef.current;\n//             const { offsetX, offsetY } = e.nativeEvent;\n//             // Ensure the text input remains within the canvas bounds\n//             const x = Math.max(0, Math.min(offsetX, canvas.width));\n//             const y = Math.max(0, Math.min(offsetY, canvas.height));\n//             setText({ ...text, x, y });\n//         }\n//     };\n//     const stopEditingText = () => {\n//         setEditingText(false);\n//     };\n//     return (\n//         <div className=\"image-editor\">\n//             <header className=\"header\">\n//                 {/* <img src={logo} alt=\"Logo\" className=\"logo\" /> */}\n//                 <h2 className=\"logo\">E D I T O R</h2>\n//                 <div className=\"header-buttons\">\n//                     <button onClick={saveImage}><IoIosSave />Save</button>\n//                     <button onClick={undo}><IoMdUndo />Undo</button>\n//                     <button onClick={redo}><IoMdRedo />Redo</button>\n//                 </div>\n//             </header>\n//             <div className=\"sidebar\">\n//                 <div className=\"sidebar-buttons\">\n//                     <label htmlFor=\"choose\" className=\"image-upload\">\n//                         <IoIosImage />\n//                         <span>Choose Image</span>\n//                         <input type=\"file\" accept=\"image/*\" id=\"choose\" onChange={imageHandle} />\n//                     </label>\n//                 </div>\n//                 <div className=\"draw-text-buttons\">\n//                     <button onClick={enableDrawing}><GrEdit />Draw</button>\n//                     <button onClick={textAdd}><GrSuperscript />Text</button>\n//                 </div>\n//                 <div className=\"adjustment-sliders\">\n//                     {filterElement.map((v, i) => (\n//                         <button key={i} onClick={() => setProperty(v)}>{v.name}</button>\n//                     ))}\n//                 </div>\n//                 <div className=\"slider\">\n//                     <input\n//                         type=\"range\"\n//                         name={property.name}\n//                         max={property.maxValue}\n//                         value={state[property.name]}\n//                         onChange={inputHandle}\n//                     />\n//                 </div>\n//                 <div className=\"rotation-buttons\">\n//                     <button onClick={leftRotate}><GrRotateLeft /></button>\n//                     <button onClick={rightRotate}><GrRotateRight /></button>\n//                     <button onClick={varticalFlip}><CgMergeVertical /></button>\n//                     <button onClick={horizentalFlip}><CgMergeHorizontal /></button>\n//                 </div>\n//                 <div className=\"history-buttons\">\n//                     {/* Removed from sidebar */}\n//                 </div>\n//             </div>\n//             <div className=\"app-content\">\n//                 <div className=\"canvas-container\">\n//                     <canvas\n//                         className=\"responsive-canvas\"\n//                         ref={canvasRef}\n//                         onMouseDown={startDrawing}\n//                         onMouseMove={draw}\n//                         onMouseUp={stopDrawing}\n//                         onMouseLeave={stopDrawing}\n//                         onClick={handleTextDrag}\n//                         onDoubleClick={stopEditingText}\n//                     />\n//                     {editingText && (\n//                         <input\n//                             type=\"text\"\n//                             value={text.value}\n//                             onChange={handleTextChange}\n//                             onMouseDown={(e) => e.stopPropagation()}\n//                         />\n//                     )}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n// export default Main;","map":{"version":3,"names":[],"sources":["D:/screenshort-extension/image-editor-react/src/component/Main.jsx"],"sourcesContent":["// import React, { useState, useRef, useEffect } from 'react';\r\n// import './style/main.scss';\r\n// import ReactCrop from 'react-image-crop';\r\n// import 'react-image-crop/dist/ReactCrop.css';\r\n// import { GrRotateLeft, GrRotateRight, GrEdit, GrSuperscript } from 'react-icons/gr';\r\n// import { CgMergeVertical, CgMergeHorizontal } from 'react-icons/cg';\r\n// import { IoMdUndo, IoMdRedo, IoIosSave, IoIosImage } from 'react-icons/io';\r\n// import storeData from './LinkedList';\r\n// import logo from './style/logo.jpeg';\r\n\r\n// const Main = () => {\r\n//     const filterElement = [\r\n//         { name: 'brightness', maxValue: 200 },\r\n//         { name: 'grayscale', maxValue: 100 },\r\n//         { name: 'sepia', maxValue: 100 },\r\n//         { name: 'saturate', maxValue: 200 },\r\n//         { name: 'contrast', maxValue: 200 },\r\n//         { name: 'hueRotate', maxValue: 360 }\r\n//     ];\r\n\r\n//     const [property, setProperty] = useState({ name: 'brightness', maxValue: 200 });\r\n//     const [details, setDetails] = useState(null);\r\n//     const [crop, setCrop] = useState({});\r\n//     const [drawing, setDrawing] = useState(false);\r\n//     const [text, setText] = useState({ value: '', x: 50, y: 50 });\r\n//     const [editingText, setEditingText] = useState(false);\r\n//     const canvasRef = useRef(null);\r\n\r\n//     const [state, setState] = useState({\r\n//         image: '',\r\n//         brightness: 100,\r\n//         grayscale: 0,\r\n//         sepia: 0,\r\n//         saturate: 100,\r\n//         contrast: 100,\r\n//         hueRotate: 0,\r\n//         rotate: 0,\r\n//         vartical: 1,\r\n//         horizental: 1\r\n//     });\r\n\r\n//     useEffect(() => {\r\n//         if (details) {\r\n//             drawImage();\r\n//         }\r\n//     }, [state, details, crop, text]);\r\n\r\n//     const drawImage = () => {\r\n//         const canvas = canvasRef.current;\r\n//         const ctx = canvas.getContext('2d');\r\n//         if (!details || !canvas) return;\r\n    \r\n//         const { width, height } = canvas;\r\n    \r\n//         // Adjust the canvas size to match the image size\r\n//         canvas.width = details.naturalWidth;\r\n//         canvas.height = details.naturalHeight;\r\n    \r\n//         ctx.clearRect(0, 0, width, height);\r\n    \r\n//         ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\r\n//         ctx.translate(width / 2, height / 2);\r\n//         ctx.rotate(state.rotate * Math.PI / 180);\r\n//         ctx.scale(state.vartical, state.horizental);\r\n//         ctx.drawImage(details, -width / 2, -height / 2, width, height);\r\n//         ctx.resetTransform();\r\n    \r\n//         if (text.value) {\r\n//             ctx.font = '30px Arial';\r\n//             ctx.fillStyle = 'red';\r\n//             ctx.fillText(text.value, text.x, text.y);\r\n//         }\r\n//     };\r\n    \r\n\r\n//     const inputHandle = (e) => {\r\n//         setState({\r\n//             ...state,\r\n//             [e.target.name]: e.target.value\r\n//         });\r\n//     };\r\n\r\n//     const leftRotate = () => {\r\n//         setState(prevState => ({\r\n//             ...prevState,\r\n//             rotate: prevState.rotate - 90\r\n//         }));\r\n//         storeData.insert({ ...state, rotate: state.rotate - 90 });\r\n//     };\r\n\r\n//     const rightRotate = () => {\r\n//         setState(prevState => ({\r\n//             ...prevState,\r\n//             rotate: prevState.rotate + 90\r\n//         }));\r\n//         storeData.insert({ ...state, rotate: state.rotate + 90 });\r\n//     };\r\n\r\n//     const varticalFlip = () => {\r\n//         setState(prevState => ({\r\n//             ...prevState,\r\n//             vartical: prevState.vartical === 1 ? -1 : 1\r\n//         }));\r\n//         storeData.insert({ ...state, vartical: state.vartical === 1 ? -1 : 1 });\r\n//     };\r\n\r\n//     const horizentalFlip = () => {\r\n//         setState(prevState => ({\r\n//             ...prevState,\r\n//             horizental: prevState.horizental === 1 ? -1 : 1\r\n//         }));\r\n//         storeData.insert({ ...state, horizental: state.horizental === 1 ? -1 : 1 });\r\n//     };\r\n\r\n//     const redo = () => {\r\n//         const data = storeData.redoEdit();\r\n//         if (data) {\r\n//             setState(data);\r\n//         }\r\n//     };\r\n\r\n//     const undo = () => {\r\n//         const data = storeData.undoEdit();\r\n//         if (data) {\r\n//             setState(data);\r\n//         }\r\n//     };\r\n\r\n//     const imageHandle = (e) => {\r\n//         if (e.target.files.length !== 0) {\r\n//             const reader = new FileReader();\r\n//             reader.onload = () => {\r\n//                 const img = new Image();\r\n//                 img.src = reader.result;\r\n//                 img.onload = () => {\r\n//                     setDetails(img);\r\n//                     setState({\r\n//                         ...state,\r\n//                         image: reader.result\r\n//                     });\r\n//                     storeData.insert({\r\n//                         image: reader.result,\r\n//                         brightness: 100,\r\n//                         grayscale: 0,\r\n//                         sepia: 0,\r\n//                         saturate: 100,\r\n//                         contrast: 100,\r\n//                         hueRotate: 0,\r\n//                         rotate: 0,\r\n//                         vartical: 1,\r\n//                         horizental: 1\r\n//                     });\r\n//                 };\r\n//             };\r\n//             reader.readAsDataURL(e.target.files[0]);\r\n//         }\r\n//     };\r\n\r\n//     const imageCrop = () => {\r\n//         if (!details || !crop || !canvasRef.current) return;\r\n\r\n//         const canvas = document.createElement('canvas');\r\n//         const ctx = canvas.getContext('2d');\r\n//         const scaleX = details.naturalWidth / details.width;\r\n//         const scaleY = details.naturalHeight / details.height;\r\n\r\n//         canvas.width = crop.width;\r\n//         canvas.height = crop.height;\r\n\r\n//         ctx.drawImage(\r\n//             details,\r\n//             crop.x * scaleX,\r\n//             crop.y * scaleY,\r\n//             crop.width * scaleX,\r\n//             crop.height * scaleY,\r\n//             0,\r\n//             0,\r\n//             crop.width,\r\n//             crop.height\r\n//         );\r\n\r\n//         const base64Url = canvas.toDataURL('image/jpeg');\r\n//         setState({\r\n//             ...state,\r\n//             image: base64Url\r\n//         });\r\n//     };\r\n\r\n//     const saveImage = () => {\r\n//         const canvas = document.createElement('canvas');\r\n//         const ctx = canvas.getContext('2d');\r\n\r\n//         if (!details) return;\r\n\r\n//         canvas.width = details.naturalWidth;\r\n//         canvas.height = details.naturalHeight;\r\n\r\n//         ctx.filter = `brightness(${state.brightness}%) sepia(${state.sepia}%) saturate(${state.saturate}%) contrast(${state.contrast}%) grayscale(${state.grayscale}%) hue-rotate(${state.hueRotate}deg)`;\r\n//         ctx.translate(canvas.width / 2, canvas.height / 2);\r\n//         ctx.rotate(state.rotate * Math.PI / 180);\r\n//         ctx.scale(state.vartical, state.horizental);\r\n//         ctx.drawImage(\r\n//             details,\r\n//             -canvas.width / 2,\r\n//             -canvas.height / 2,\r\n//             canvas.width,\r\n//             canvas.height\r\n//         );\r\n//         ctx.resetTransform();\r\n\r\n//         if (text.value) {\r\n//             ctx.font = '30px Arial';\r\n//             ctx.fillStyle = 'red';\r\n//             ctx.fillText(text.value, text.x, text.y);\r\n//         }\r\n\r\n//         const link = document.createElement('a');\r\n//         link.download = 'image_edit.jpg';\r\n//         link.href = canvas.toDataURL();\r\n//         link.click();\r\n//     };\r\n\r\n//     const startDrawing = (e) => {\r\n//         if (drawing) {\r\n//             const canvas = canvasRef.current;\r\n//             const ctx = canvas.getContext('2d');\r\n//             ctx.beginPath();\r\n//             ctx.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\r\n//         }\r\n//     };\r\n\r\n//     const draw = (e) => {\r\n//         if (drawing) {\r\n//             const canvas = canvasRef.current;\r\n//             const ctx = canvas.getContext('2d');\r\n//             ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\r\n//             ctx.strokeStyle = '#000000'; // Set the pencil color (black)\r\n//             ctx.lineWidth = 2; // Set the pencil width\r\n//             ctx.lineCap = 'round'; // Set the line cap for smoother lines\r\n//             ctx.stroke();\r\n//         }\r\n//     };\r\n\r\n//     const stopDrawing = () => {\r\n//         if (drawing) {\r\n//             const canvas = canvasRef.current;\r\n//             const ctx = canvas.getContext('2d');\r\n//             ctx.closePath();\r\n//         }\r\n//     };\r\n\r\n//     const enableDrawing = () => {\r\n//         setDrawing(!drawing);\r\n//     };\r\n\r\n//     const textAdd = () => {\r\n//         setText({ value: 'Hello World', x: 50, y: 50 });\r\n//         setEditingText(true);\r\n//     };\r\n\r\n//     const handleTextChange = (e) => {\r\n//         setText({ ...text, value: e.target.value });\r\n//     };\r\n\r\n//     const handleTextDrag = (e) => {\r\n//         if (editingText) {\r\n//             const canvas = canvasRef.current;\r\n//             const { offsetX, offsetY } = e.nativeEvent;\r\n            \r\n//             // Ensure the text input remains within the canvas bounds\r\n//             const x = Math.max(0, Math.min(offsetX, canvas.width));\r\n//             const y = Math.max(0, Math.min(offsetY, canvas.height));\r\n            \r\n//             setText({ ...text, x, y });\r\n//         }\r\n//     };\r\n\r\n//     const stopEditingText = () => {\r\n//         setEditingText(false);\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"image-editor\">\r\n//             <header className=\"header\">\r\n//                 {/* <img src={logo} alt=\"Logo\" className=\"logo\" /> */}\r\n//                 <h2 className=\"logo\">E D I T O R</h2>\r\n//                 <div className=\"header-buttons\">\r\n//                     <button onClick={saveImage}><IoIosSave />Save</button>\r\n//                     <button onClick={undo}><IoMdUndo />Undo</button>\r\n//                     <button onClick={redo}><IoMdRedo />Redo</button>\r\n//                 </div>\r\n//             </header>\r\n//             <div className=\"sidebar\">\r\n//                 <div className=\"sidebar-buttons\">\r\n//                     <label htmlFor=\"choose\" className=\"image-upload\">\r\n//                         <IoIosImage />\r\n//                         <span>Choose Image</span>\r\n//                         <input type=\"file\" accept=\"image/*\" id=\"choose\" onChange={imageHandle} />\r\n//                     </label>\r\n//                 </div>\r\n//                 <div className=\"draw-text-buttons\">\r\n//                     <button onClick={enableDrawing}><GrEdit />Draw</button>\r\n//                     <button onClick={textAdd}><GrSuperscript />Text</button>\r\n//                 </div>\r\n//                 <div className=\"adjustment-sliders\">\r\n//                     {filterElement.map((v, i) => (\r\n//                         <button key={i} onClick={() => setProperty(v)}>{v.name}</button>\r\n//                     ))}\r\n//                 </div>\r\n//                 <div className=\"slider\">\r\n//                     <input\r\n//                         type=\"range\"\r\n//                         name={property.name}\r\n//                         max={property.maxValue}\r\n//                         value={state[property.name]}\r\n//                         onChange={inputHandle}\r\n//                     />\r\n//                 </div>\r\n//                 <div className=\"rotation-buttons\">\r\n//                     <button onClick={leftRotate}><GrRotateLeft /></button>\r\n//                     <button onClick={rightRotate}><GrRotateRight /></button>\r\n//                     <button onClick={varticalFlip}><CgMergeVertical /></button>\r\n//                     <button onClick={horizentalFlip}><CgMergeHorizontal /></button>\r\n//                 </div>\r\n//                 <div className=\"history-buttons\">\r\n//                     {/* Removed from sidebar */}\r\n//                 </div>\r\n//             </div>\r\n//             <div className=\"app-content\">\r\n//                 <div className=\"canvas-container\">\r\n//                     <canvas\r\n//                         className=\"responsive-canvas\"\r\n//                         ref={canvasRef}\r\n//                         onMouseDown={startDrawing}\r\n//                         onMouseMove={draw}\r\n//                         onMouseUp={stopDrawing}\r\n//                         onMouseLeave={stopDrawing}\r\n//                         onClick={handleTextDrag}\r\n//                         onDoubleClick={stopEditingText}\r\n//                     />\r\n//                     {editingText && (\r\n//                         <input\r\n//                             type=\"text\"\r\n//                             value={text.value}\r\n//                             onChange={handleTextChange}\r\n//                             onMouseDown={(e) => e.stopPropagation()}\r\n//                         />\r\n//                     )}\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n// export default Main;"],"mappings},"metadata":{},"sourceType":"module"}