{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Text = exports.stringToArray = void 0;\n\nconst Util_1 = require(\"../Util\");\n\nconst Factory_1 = require(\"../Factory\");\n\nconst Shape_1 = require(\"../Shape\");\n\nconst Global_1 = require(\"../Global\");\n\nconst Validators_1 = require(\"../Validators\");\n\nconst Global_2 = require(\"../Global\");\n\nfunction stringToArray(string) {\n  return Array.from(string);\n}\n\nexports.stringToArray = stringToArray;\nvar AUTO = 'auto',\n    CENTER = 'center',\n    INHERIT = 'inherit',\n    JUSTIFY = 'justify',\n    CHANGE_KONVA = 'Change.konva',\n    CONTEXT_2D = '2d',\n    DASH = '-',\n    LEFT = 'left',\n    LTR = 'ltr',\n    TEXT = 'text',\n    TEXT_UPPER = 'Text',\n    TOP = 'top',\n    BOTTOM = 'bottom',\n    MIDDLE = 'middle',\n    NORMAL = 'normal',\n    PX_SPACE = 'px ',\n    SPACE = ' ',\n    RIGHT = 'right',\n    RTL = 'rtl',\n    WORD = 'word',\n    CHAR = 'char',\n    NONE = 'none',\n    ELLIPSIS = 'â€¦',\n    ATTR_CHANGE_LIST = ['direction', 'fontFamily', 'fontSize', 'fontStyle', 'fontVariant', 'padding', 'align', 'verticalAlign', 'lineHeight', 'text', 'width', 'height', 'wrap', 'ellipsis', 'letterSpacing'],\n    attrChangeListLen = ATTR_CHANGE_LIST.length;\n\nfunction normalizeFontFamily(fontFamily) {\n  return fontFamily.split(',').map(family => {\n    family = family.trim();\n    const hasSpace = family.indexOf(' ') >= 0;\n    const hasQuotes = family.indexOf('\"') >= 0 || family.indexOf(\"'\") >= 0;\n\n    if (hasSpace && !hasQuotes) {\n      family = `\"${family}\"`;\n    }\n\n    return family;\n  }).join(', ');\n}\n\nvar dummyContext;\n\nfunction getDummyContext() {\n  if (dummyContext) {\n    return dummyContext;\n  }\n\n  dummyContext = Util_1.Util.createCanvasElement().getContext(CONTEXT_2D);\n  return dummyContext;\n}\n\nfunction _fillFunc(context) {\n  context.fillText(this._partialText, this._partialTextX, this._partialTextY);\n}\n\nfunction _strokeFunc(context) {\n  context.setAttr('miterLimit', 2);\n  context.strokeText(this._partialText, this._partialTextX, this._partialTextY);\n}\n\nfunction checkDefaultFill(config) {\n  config = config || {};\n\n  if (!config.fillLinearGradientColorStops && !config.fillRadialGradientColorStops && !config.fillPatternImage) {\n    config.fill = config.fill || 'black';\n  }\n\n  return config;\n}\n\nclass Text extends Shape_1.Shape {\n  constructor(config) {\n    super(checkDefaultFill(config));\n    this._partialTextX = 0;\n    this._partialTextY = 0;\n\n    for (var n = 0; n < attrChangeListLen; n++) {\n      this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, this._setTextData);\n    }\n\n    this._setTextData();\n  }\n\n  _sceneFunc(context) {\n    var textArr = this.textArr,\n        textArrLen = textArr.length;\n\n    if (!this.text()) {\n      return;\n    }\n\n    var padding = this.padding(),\n        fontSize = this.fontSize(),\n        lineHeightPx = this.lineHeight() * fontSize,\n        verticalAlign = this.verticalAlign(),\n        direction = this.direction(),\n        alignY = 0,\n        align = this.align(),\n        totalWidth = this.getWidth(),\n        letterSpacing = this.letterSpacing(),\n        fill = this.fill(),\n        textDecoration = this.textDecoration(),\n        shouldUnderline = textDecoration.indexOf('underline') !== -1,\n        shouldLineThrough = textDecoration.indexOf('line-through') !== -1,\n        n;\n    direction = direction === INHERIT ? context.direction : direction;\n    var translateY = lineHeightPx / 2;\n    var baseline = MIDDLE;\n\n    if (Global_1.Konva._fixTextRendering) {\n      var metrics = this.measureSize('M');\n      baseline = 'alphabetic';\n      translateY = (metrics.fontBoundingBoxAscent - metrics.fontBoundingBoxDescent) / 2 + lineHeightPx / 2;\n    }\n\n    var lineTranslateX = 0;\n    var lineTranslateY = 0;\n\n    if (direction === RTL) {\n      context.setAttr('direction', direction);\n    }\n\n    context.setAttr('font', this._getContextFont());\n    context.setAttr('textBaseline', baseline);\n    context.setAttr('textAlign', LEFT);\n\n    if (verticalAlign === MIDDLE) {\n      alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;\n    } else if (verticalAlign === BOTTOM) {\n      alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;\n    }\n\n    context.translate(padding, alignY + padding);\n\n    for (n = 0; n < textArrLen; n++) {\n      var lineTranslateX = 0;\n      var lineTranslateY = 0;\n      var obj = textArr[n],\n          text = obj.text,\n          width = obj.width,\n          lastLine = obj.lastInParagraph,\n          spacesNumber,\n          oneWord,\n          lineWidth;\n      context.save();\n\n      if (align === RIGHT) {\n        lineTranslateX += totalWidth - width - padding * 2;\n      } else if (align === CENTER) {\n        lineTranslateX += (totalWidth - width - padding * 2) / 2;\n      }\n\n      if (shouldUnderline) {\n        context.save();\n        context.beginPath();\n        let yOffset = Global_1.Konva._fixTextRendering ? Math.round(fontSize / 4) : Math.round(fontSize / 2);\n        const x = lineTranslateX;\n        const y = translateY + lineTranslateY + yOffset;\n        context.moveTo(x, y);\n        spacesNumber = text.split(' ').length - 1;\n        oneWord = spacesNumber === 0;\n        lineWidth = align === JUSTIFY && !lastLine ? totalWidth - padding * 2 : width;\n        context.lineTo(x + Math.round(lineWidth), y);\n        context.lineWidth = fontSize / 15;\n\n        const gradient = this._getLinearGradient();\n\n        context.strokeStyle = gradient || fill;\n        context.stroke();\n        context.restore();\n      }\n\n      if (shouldLineThrough) {\n        context.save();\n        context.beginPath();\n        let yOffset = Global_1.Konva._fixTextRendering ? -Math.round(fontSize / 4) : 0;\n        context.moveTo(lineTranslateX, translateY + lineTranslateY + yOffset);\n        spacesNumber = text.split(' ').length - 1;\n        oneWord = spacesNumber === 0;\n        lineWidth = align === JUSTIFY && lastLine && !oneWord ? totalWidth - padding * 2 : width;\n        context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + yOffset);\n        context.lineWidth = fontSize / 15;\n\n        const gradient = this._getLinearGradient();\n\n        context.strokeStyle = gradient || fill;\n        context.stroke();\n        context.restore();\n      }\n\n      if (direction !== RTL && (letterSpacing !== 0 || align === JUSTIFY)) {\n        spacesNumber = text.split(' ').length - 1;\n        var array = stringToArray(text);\n\n        for (var li = 0; li < array.length; li++) {\n          var letter = array[li];\n\n          if (letter === ' ' && !lastLine && align === JUSTIFY) {\n            lineTranslateX += (totalWidth - padding * 2 - width) / spacesNumber;\n          }\n\n          this._partialTextX = lineTranslateX;\n          this._partialTextY = translateY + lineTranslateY;\n          this._partialText = letter;\n          context.fillStrokeShape(this);\n          lineTranslateX += this.measureSize(letter).width + letterSpacing;\n        }\n      } else {\n        if (letterSpacing !== 0) {\n          context.setAttr('letterSpacing', `${letterSpacing}px`);\n        }\n\n        this._partialTextX = lineTranslateX;\n        this._partialTextY = translateY + lineTranslateY;\n        this._partialText = text;\n        context.fillStrokeShape(this);\n      }\n\n      context.restore();\n\n      if (textArrLen > 1) {\n        translateY += lineHeightPx;\n      }\n    }\n  }\n\n  _hitFunc(context) {\n    var width = this.getWidth(),\n        height = this.getHeight();\n    context.beginPath();\n    context.rect(0, 0, width, height);\n    context.closePath();\n    context.fillStrokeShape(this);\n  }\n\n  setText(text) {\n    var str = Util_1.Util._isString(text) ? text : text === null || text === undefined ? '' : text + '';\n\n    this._setAttr(TEXT, str);\n\n    return this;\n  }\n\n  getWidth() {\n    var isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;\n    return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;\n  }\n\n  getHeight() {\n    var isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;\n    return isAuto ? this.fontSize() * this.textArr.length * this.lineHeight() + this.padding() * 2 : this.attrs.height;\n  }\n\n  getTextWidth() {\n    return this.textWidth;\n  }\n\n  getTextHeight() {\n    Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n    return this.textHeight;\n  }\n\n  measureSize(text) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n\n    var _context = getDummyContext(),\n        fontSize = this.fontSize(),\n        metrics;\n\n    _context.save();\n\n    _context.font = this._getContextFont();\n    metrics = _context.measureText(text);\n\n    _context.restore();\n\n    const scaleFactor = fontSize / 100;\n    return {\n      actualBoundingBoxAscent: (_a = metrics.actualBoundingBoxAscent) !== null && _a !== void 0 ? _a : 71.58203125 * scaleFactor,\n      actualBoundingBoxDescent: (_b = metrics.actualBoundingBoxDescent) !== null && _b !== void 0 ? _b : 0,\n      actualBoundingBoxLeft: (_c = metrics.actualBoundingBoxLeft) !== null && _c !== void 0 ? _c : -7.421875 * scaleFactor,\n      actualBoundingBoxRight: (_d = metrics.actualBoundingBoxRight) !== null && _d !== void 0 ? _d : 75.732421875 * scaleFactor,\n      alphabeticBaseline: (_e = metrics.alphabeticBaseline) !== null && _e !== void 0 ? _e : 0,\n      emHeightAscent: (_f = metrics.emHeightAscent) !== null && _f !== void 0 ? _f : 100 * scaleFactor,\n      emHeightDescent: (_g = metrics.emHeightDescent) !== null && _g !== void 0 ? _g : -20 * scaleFactor,\n      fontBoundingBoxAscent: (_h = metrics.fontBoundingBoxAscent) !== null && _h !== void 0 ? _h : 91 * scaleFactor,\n      fontBoundingBoxDescent: (_j = metrics.fontBoundingBoxDescent) !== null && _j !== void 0 ? _j : 21 * scaleFactor,\n      hangingBaseline: (_k = metrics.hangingBaseline) !== null && _k !== void 0 ? _k : 72.80000305175781 * scaleFactor,\n      ideographicBaseline: (_l = metrics.ideographicBaseline) !== null && _l !== void 0 ? _l : -21 * scaleFactor,\n      width: metrics.width,\n      height: fontSize\n    };\n  }\n\n  _getContextFont() {\n    return this.fontStyle() + SPACE + this.fontVariant() + SPACE + (this.fontSize() + PX_SPACE) + normalizeFontFamily(this.fontFamily());\n  }\n\n  _addTextLine(line) {\n    const align = this.align();\n\n    if (align === JUSTIFY) {\n      line = line.trim();\n    }\n\n    var width = this._getTextWidth(line);\n\n    return this.textArr.push({\n      text: line,\n      width: width,\n      lastInParagraph: false\n    });\n  }\n\n  _getTextWidth(text) {\n    var letterSpacing = this.letterSpacing();\n    var length = text.length;\n    return getDummyContext().measureText(text).width + (length ? letterSpacing * (length - 1) : 0);\n  }\n\n  _setTextData() {\n    var lines = this.text().split('\\n'),\n        fontSize = +this.fontSize(),\n        textWidth = 0,\n        lineHeightPx = this.lineHeight() * fontSize,\n        width = this.attrs.width,\n        height = this.attrs.height,\n        fixedWidth = width !== AUTO && width !== undefined,\n        fixedHeight = height !== AUTO && height !== undefined,\n        padding = this.padding(),\n        maxWidth = width - padding * 2,\n        maxHeightPx = height - padding * 2,\n        currentHeightPx = 0,\n        wrap = this.wrap(),\n        shouldWrap = wrap !== NONE,\n        wrapAtWord = wrap !== CHAR && shouldWrap,\n        shouldAddEllipsis = this.ellipsis();\n    this.textArr = [];\n    getDummyContext().font = this._getContextFont();\n    var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;\n\n    for (var i = 0, max = lines.length; i < max; ++i) {\n      var line = lines[i];\n\n      var lineWidth = this._getTextWidth(line);\n\n      if (fixedWidth && lineWidth > maxWidth) {\n        while (line.length > 0) {\n          var low = 0,\n              high = line.length,\n              match = '',\n              matchWidth = 0;\n\n          while (low < high) {\n            var mid = low + high >>> 1,\n                substr = line.slice(0, mid + 1),\n                substrWidth = this._getTextWidth(substr) + additionalWidth;\n\n            if (substrWidth <= maxWidth) {\n              low = mid + 1;\n              match = substr;\n              matchWidth = substrWidth;\n            } else {\n              high = mid;\n            }\n          }\n\n          if (match) {\n            if (wrapAtWord) {\n              var wrapIndex;\n              var nextChar = line[match.length];\n              var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;\n\n              if (nextIsSpaceOrDash && matchWidth <= maxWidth) {\n                wrapIndex = match.length;\n              } else {\n                wrapIndex = Math.max(match.lastIndexOf(SPACE), match.lastIndexOf(DASH)) + 1;\n              }\n\n              if (wrapIndex > 0) {\n                low = wrapIndex;\n                match = match.slice(0, low);\n                matchWidth = this._getTextWidth(match);\n              }\n            }\n\n            match = match.trimRight();\n\n            this._addTextLine(match);\n\n            textWidth = Math.max(textWidth, matchWidth);\n            currentHeightPx += lineHeightPx;\n\n            var shouldHandleEllipsis = this._shouldHandleEllipsis(currentHeightPx);\n\n            if (shouldHandleEllipsis) {\n              this._tryToAddEllipsisToLastLine();\n\n              break;\n            }\n\n            line = line.slice(low);\n            line = line.trimLeft();\n\n            if (line.length > 0) {\n              lineWidth = this._getTextWidth(line);\n\n              if (lineWidth <= maxWidth) {\n                this._addTextLine(line);\n\n                currentHeightPx += lineHeightPx;\n                textWidth = Math.max(textWidth, lineWidth);\n                break;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n      } else {\n        this._addTextLine(line);\n\n        currentHeightPx += lineHeightPx;\n        textWidth = Math.max(textWidth, lineWidth);\n\n        if (this._shouldHandleEllipsis(currentHeightPx) && i < max - 1) {\n          this._tryToAddEllipsisToLastLine();\n        }\n      }\n\n      if (this.textArr[this.textArr.length - 1]) {\n        this.textArr[this.textArr.length - 1].lastInParagraph = true;\n      }\n\n      if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n        break;\n      }\n    }\n\n    this.textHeight = fontSize;\n    this.textWidth = textWidth;\n  }\n\n  _shouldHandleEllipsis(currentHeightPx) {\n    var fontSize = +this.fontSize(),\n        lineHeightPx = this.lineHeight() * fontSize,\n        height = this.attrs.height,\n        fixedHeight = height !== AUTO && height !== undefined,\n        padding = this.padding(),\n        maxHeightPx = height - padding * 2,\n        wrap = this.wrap(),\n        shouldWrap = wrap !== NONE;\n    return !shouldWrap || fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx;\n  }\n\n  _tryToAddEllipsisToLastLine() {\n    var width = this.attrs.width,\n        fixedWidth = width !== AUTO && width !== undefined,\n        padding = this.padding(),\n        maxWidth = width - padding * 2,\n        shouldAddEllipsis = this.ellipsis();\n    var lastLine = this.textArr[this.textArr.length - 1];\n\n    if (!lastLine || !shouldAddEllipsis) {\n      return;\n    }\n\n    if (fixedWidth) {\n      var haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;\n\n      if (!haveSpace) {\n        lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);\n      }\n    }\n\n    this.textArr.splice(this.textArr.length - 1, 1);\n\n    this._addTextLine(lastLine.text + ELLIPSIS);\n  }\n\n  getStrokeScaleEnabled() {\n    return true;\n  }\n\n  _useBufferCanvas() {\n    const hasLine = this.textDecoration().indexOf('underline') !== -1 || this.textDecoration().indexOf('line-through') !== -1;\n    const hasShadow = this.hasShadow();\n\n    if (hasLine && hasShadow) {\n      return true;\n    }\n\n    return super._useBufferCanvas();\n  }\n\n}\n\nexports.Text = Text;\nText.prototype._fillFunc = _fillFunc;\nText.prototype._strokeFunc = _strokeFunc;\nText.prototype.className = TEXT_UPPER;\nText.prototype._attrsAffectingSize = ['text', 'fontSize', 'padding', 'wrap', 'lineHeight', 'letterSpacing'];\n(0, Global_2._registerNode)(Text);\nFactory_1.Factory.overWriteSetter(Text, 'width', (0, Validators_1.getNumberOrAutoValidator)());\nFactory_1.Factory.overWriteSetter(Text, 'height', (0, Validators_1.getNumberOrAutoValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'direction', INHERIT);\nFactory_1.Factory.addGetterSetter(Text, 'fontFamily', 'Arial');\nFactory_1.Factory.addGetterSetter(Text, 'fontSize', 12, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'fontStyle', NORMAL);\nFactory_1.Factory.addGetterSetter(Text, 'fontVariant', NORMAL);\nFactory_1.Factory.addGetterSetter(Text, 'padding', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'align', LEFT);\nFactory_1.Factory.addGetterSetter(Text, 'verticalAlign', TOP);\nFactory_1.Factory.addGetterSetter(Text, 'lineHeight', 1, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'wrap', WORD);\nFactory_1.Factory.addGetterSetter(Text, 'ellipsis', false, (0, Validators_1.getBooleanValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'letterSpacing', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'text', '', (0, Validators_1.getStringValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'textDecoration', '');","map":{"version":3,"names":["Object","defineProperty","exports","value","Text","stringToArray","Util_1","require","Factory_1","Shape_1","Global_1","Validators_1","Global_2","string","Array","from","AUTO","CENTER","INHERIT","JUSTIFY","CHANGE_KONVA","CONTEXT_2D","DASH","LEFT","LTR","TEXT","TEXT_UPPER","TOP","BOTTOM","MIDDLE","NORMAL","PX_SPACE","SPACE","RIGHT","RTL","WORD","CHAR","NONE","ELLIPSIS","ATTR_CHANGE_LIST","attrChangeListLen","length","normalizeFontFamily","fontFamily","split","map","family","trim","hasSpace","indexOf","hasQuotes","join","dummyContext","getDummyContext","Util","createCanvasElement","getContext","_fillFunc","context","fillText","_partialText","_partialTextX","_partialTextY","_strokeFunc","setAttr","strokeText","checkDefaultFill","config","fillLinearGradientColorStops","fillRadialGradientColorStops","fillPatternImage","fill","Shape","constructor","n","on","_setTextData","_sceneFunc","textArr","textArrLen","text","padding","fontSize","lineHeightPx","lineHeight","verticalAlign","direction","alignY","align","totalWidth","getWidth","letterSpacing","textDecoration","shouldUnderline","shouldLineThrough","translateY","baseline","Konva","_fixTextRendering","metrics","measureSize","fontBoundingBoxAscent","fontBoundingBoxDescent","lineTranslateX","lineTranslateY","_getContextFont","getHeight","translate","obj","width","lastLine","lastInParagraph","spacesNumber","oneWord","lineWidth","save","beginPath","yOffset","Math","round","x","y","moveTo","lineTo","gradient","_getLinearGradient","strokeStyle","stroke","restore","array","li","letter","fillStrokeShape","_hitFunc","height","rect","closePath","setText","str","_isString","undefined","_setAttr","isAuto","attrs","getTextWidth","textWidth","getTextHeight","warn","textHeight","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_context","font","measureText","scaleFactor","actualBoundingBoxAscent","actualBoundingBoxDescent","actualBoundingBoxLeft","actualBoundingBoxRight","alphabeticBaseline","emHeightAscent","emHeightDescent","hangingBaseline","ideographicBaseline","fontStyle","fontVariant","_addTextLine","line","_getTextWidth","push","lines","fixedWidth","fixedHeight","maxWidth","maxHeightPx","currentHeightPx","wrap","shouldWrap","wrapAtWord","shouldAddEllipsis","ellipsis","additionalWidth","i","max","low","high","match","matchWidth","mid","substr","slice","substrWidth","wrapIndex","nextChar","nextIsSpaceOrDash","lastIndexOf","trimRight","shouldHandleEllipsis","_shouldHandleEllipsis","_tryToAddEllipsisToLastLine","trimLeft","haveSpace","splice","getStrokeScaleEnabled","_useBufferCanvas","hasLine","hasShadow","prototype","className","_attrsAffectingSize","_registerNode","Factory","overWriteSetter","getNumberOrAutoValidator","addGetterSetter","getNumberValidator","getBooleanValidator","getStringValidator"],"sources":["D:/screenshort-extension/image-editor-react/node_modules/konva/lib/shapes/Text.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Text = exports.stringToArray = void 0;\nconst Util_1 = require(\"../Util\");\nconst Factory_1 = require(\"../Factory\");\nconst Shape_1 = require(\"../Shape\");\nconst Global_1 = require(\"../Global\");\nconst Validators_1 = require(\"../Validators\");\nconst Global_2 = require(\"../Global\");\nfunction stringToArray(string) {\n    return Array.from(string);\n}\nexports.stringToArray = stringToArray;\nvar AUTO = 'auto', CENTER = 'center', INHERIT = 'inherit', JUSTIFY = 'justify', CHANGE_KONVA = 'Change.konva', CONTEXT_2D = '2d', DASH = '-', LEFT = 'left', LTR = 'ltr', TEXT = 'text', TEXT_UPPER = 'Text', TOP = 'top', BOTTOM = 'bottom', MIDDLE = 'middle', NORMAL = 'normal', PX_SPACE = 'px ', SPACE = ' ', RIGHT = 'right', RTL = 'rtl', WORD = 'word', CHAR = 'char', NONE = 'none', ELLIPSIS = 'â€¦', ATTR_CHANGE_LIST = [\n    'direction',\n    'fontFamily',\n    'fontSize',\n    'fontStyle',\n    'fontVariant',\n    'padding',\n    'align',\n    'verticalAlign',\n    'lineHeight',\n    'text',\n    'width',\n    'height',\n    'wrap',\n    'ellipsis',\n    'letterSpacing',\n], attrChangeListLen = ATTR_CHANGE_LIST.length;\nfunction normalizeFontFamily(fontFamily) {\n    return fontFamily\n        .split(',')\n        .map((family) => {\n        family = family.trim();\n        const hasSpace = family.indexOf(' ') >= 0;\n        const hasQuotes = family.indexOf('\"') >= 0 || family.indexOf(\"'\") >= 0;\n        if (hasSpace && !hasQuotes) {\n            family = `\"${family}\"`;\n        }\n        return family;\n    })\n        .join(', ');\n}\nvar dummyContext;\nfunction getDummyContext() {\n    if (dummyContext) {\n        return dummyContext;\n    }\n    dummyContext = Util_1.Util.createCanvasElement().getContext(CONTEXT_2D);\n    return dummyContext;\n}\nfunction _fillFunc(context) {\n    context.fillText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction _strokeFunc(context) {\n    context.setAttr('miterLimit', 2);\n    context.strokeText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction checkDefaultFill(config) {\n    config = config || {};\n    if (!config.fillLinearGradientColorStops &&\n        !config.fillRadialGradientColorStops &&\n        !config.fillPatternImage) {\n        config.fill = config.fill || 'black';\n    }\n    return config;\n}\nclass Text extends Shape_1.Shape {\n    constructor(config) {\n        super(checkDefaultFill(config));\n        this._partialTextX = 0;\n        this._partialTextY = 0;\n        for (var n = 0; n < attrChangeListLen; n++) {\n            this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, this._setTextData);\n        }\n        this._setTextData();\n    }\n    _sceneFunc(context) {\n        var textArr = this.textArr, textArrLen = textArr.length;\n        if (!this.text()) {\n            return;\n        }\n        var padding = this.padding(), fontSize = this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, verticalAlign = this.verticalAlign(), direction = this.direction(), alignY = 0, align = this.align(), totalWidth = this.getWidth(), letterSpacing = this.letterSpacing(), fill = this.fill(), textDecoration = this.textDecoration(), shouldUnderline = textDecoration.indexOf('underline') !== -1, shouldLineThrough = textDecoration.indexOf('line-through') !== -1, n;\n        direction = direction === INHERIT ? context.direction : direction;\n        var translateY = lineHeightPx / 2;\n        var baseline = MIDDLE;\n        if (Global_1.Konva._fixTextRendering) {\n            var metrics = this.measureSize('M');\n            baseline = 'alphabetic';\n            translateY =\n                (metrics.fontBoundingBoxAscent - metrics.fontBoundingBoxDescent) / 2 +\n                    lineHeightPx / 2;\n        }\n        var lineTranslateX = 0;\n        var lineTranslateY = 0;\n        if (direction === RTL) {\n            context.setAttr('direction', direction);\n        }\n        context.setAttr('font', this._getContextFont());\n        context.setAttr('textBaseline', baseline);\n        context.setAttr('textAlign', LEFT);\n        if (verticalAlign === MIDDLE) {\n            alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;\n        }\n        else if (verticalAlign === BOTTOM) {\n            alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;\n        }\n        context.translate(padding, alignY + padding);\n        for (n = 0; n < textArrLen; n++) {\n            var lineTranslateX = 0;\n            var lineTranslateY = 0;\n            var obj = textArr[n], text = obj.text, width = obj.width, lastLine = obj.lastInParagraph, spacesNumber, oneWord, lineWidth;\n            context.save();\n            if (align === RIGHT) {\n                lineTranslateX += totalWidth - width - padding * 2;\n            }\n            else if (align === CENTER) {\n                lineTranslateX += (totalWidth - width - padding * 2) / 2;\n            }\n            if (shouldUnderline) {\n                context.save();\n                context.beginPath();\n                let yOffset = Global_1.Konva._fixTextRendering\n                    ? Math.round(fontSize / 4)\n                    : Math.round(fontSize / 2);\n                const x = lineTranslateX;\n                const y = translateY + lineTranslateY + yOffset;\n                context.moveTo(x, y);\n                spacesNumber = text.split(' ').length - 1;\n                oneWord = spacesNumber === 0;\n                lineWidth =\n                    align === JUSTIFY && !lastLine ? totalWidth - padding * 2 : width;\n                context.lineTo(x + Math.round(lineWidth), y);\n                context.lineWidth = fontSize / 15;\n                const gradient = this._getLinearGradient();\n                context.strokeStyle = gradient || fill;\n                context.stroke();\n                context.restore();\n            }\n            if (shouldLineThrough) {\n                context.save();\n                context.beginPath();\n                let yOffset = Global_1.Konva._fixTextRendering ? -Math.round(fontSize / 4) : 0;\n                context.moveTo(lineTranslateX, translateY + lineTranslateY + yOffset);\n                spacesNumber = text.split(' ').length - 1;\n                oneWord = spacesNumber === 0;\n                lineWidth =\n                    align === JUSTIFY && lastLine && !oneWord\n                        ? totalWidth - padding * 2\n                        : width;\n                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + yOffset);\n                context.lineWidth = fontSize / 15;\n                const gradient = this._getLinearGradient();\n                context.strokeStyle = gradient || fill;\n                context.stroke();\n                context.restore();\n            }\n            if (direction !== RTL && (letterSpacing !== 0 || align === JUSTIFY)) {\n                spacesNumber = text.split(' ').length - 1;\n                var array = stringToArray(text);\n                for (var li = 0; li < array.length; li++) {\n                    var letter = array[li];\n                    if (letter === ' ' && !lastLine && align === JUSTIFY) {\n                        lineTranslateX += (totalWidth - padding * 2 - width) / spacesNumber;\n                    }\n                    this._partialTextX = lineTranslateX;\n                    this._partialTextY = translateY + lineTranslateY;\n                    this._partialText = letter;\n                    context.fillStrokeShape(this);\n                    lineTranslateX += this.measureSize(letter).width + letterSpacing;\n                }\n            }\n            else {\n                if (letterSpacing !== 0) {\n                    context.setAttr('letterSpacing', `${letterSpacing}px`);\n                }\n                this._partialTextX = lineTranslateX;\n                this._partialTextY = translateY + lineTranslateY;\n                this._partialText = text;\n                context.fillStrokeShape(this);\n            }\n            context.restore();\n            if (textArrLen > 1) {\n                translateY += lineHeightPx;\n            }\n        }\n    }\n    _hitFunc(context) {\n        var width = this.getWidth(), height = this.getHeight();\n        context.beginPath();\n        context.rect(0, 0, width, height);\n        context.closePath();\n        context.fillStrokeShape(this);\n    }\n    setText(text) {\n        var str = Util_1.Util._isString(text)\n            ? text\n            : text === null || text === undefined\n                ? ''\n                : text + '';\n        this._setAttr(TEXT, str);\n        return this;\n    }\n    getWidth() {\n        var isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;\n        return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;\n    }\n    getHeight() {\n        var isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;\n        return isAuto\n            ? this.fontSize() * this.textArr.length * this.lineHeight() +\n                this.padding() * 2\n            : this.attrs.height;\n    }\n    getTextWidth() {\n        return this.textWidth;\n    }\n    getTextHeight() {\n        Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n        return this.textHeight;\n    }\n    measureSize(text) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n        var _context = getDummyContext(), fontSize = this.fontSize(), metrics;\n        _context.save();\n        _context.font = this._getContextFont();\n        metrics = _context.measureText(text);\n        _context.restore();\n        const scaleFactor = fontSize / 100;\n        return {\n            actualBoundingBoxAscent: (_a = metrics.actualBoundingBoxAscent) !== null && _a !== void 0 ? _a : 71.58203125 * scaleFactor,\n            actualBoundingBoxDescent: (_b = metrics.actualBoundingBoxDescent) !== null && _b !== void 0 ? _b : 0,\n            actualBoundingBoxLeft: (_c = metrics.actualBoundingBoxLeft) !== null && _c !== void 0 ? _c : -7.421875 * scaleFactor,\n            actualBoundingBoxRight: (_d = metrics.actualBoundingBoxRight) !== null && _d !== void 0 ? _d : 75.732421875 * scaleFactor,\n            alphabeticBaseline: (_e = metrics.alphabeticBaseline) !== null && _e !== void 0 ? _e : 0,\n            emHeightAscent: (_f = metrics.emHeightAscent) !== null && _f !== void 0 ? _f : 100 * scaleFactor,\n            emHeightDescent: (_g = metrics.emHeightDescent) !== null && _g !== void 0 ? _g : -20 * scaleFactor,\n            fontBoundingBoxAscent: (_h = metrics.fontBoundingBoxAscent) !== null && _h !== void 0 ? _h : 91 * scaleFactor,\n            fontBoundingBoxDescent: (_j = metrics.fontBoundingBoxDescent) !== null && _j !== void 0 ? _j : 21 * scaleFactor,\n            hangingBaseline: (_k = metrics.hangingBaseline) !== null && _k !== void 0 ? _k : 72.80000305175781 * scaleFactor,\n            ideographicBaseline: (_l = metrics.ideographicBaseline) !== null && _l !== void 0 ? _l : -21 * scaleFactor,\n            width: metrics.width,\n            height: fontSize,\n        };\n    }\n    _getContextFont() {\n        return (this.fontStyle() +\n            SPACE +\n            this.fontVariant() +\n            SPACE +\n            (this.fontSize() + PX_SPACE) +\n            normalizeFontFamily(this.fontFamily()));\n    }\n    _addTextLine(line) {\n        const align = this.align();\n        if (align === JUSTIFY) {\n            line = line.trim();\n        }\n        var width = this._getTextWidth(line);\n        return this.textArr.push({\n            text: line,\n            width: width,\n            lastInParagraph: false,\n        });\n    }\n    _getTextWidth(text) {\n        var letterSpacing = this.letterSpacing();\n        var length = text.length;\n        return (getDummyContext().measureText(text).width +\n            (length ? letterSpacing * (length - 1) : 0));\n    }\n    _setTextData() {\n        var lines = this.text().split('\\n'), fontSize = +this.fontSize(), textWidth = 0, lineHeightPx = this.lineHeight() * fontSize, width = this.attrs.width, height = this.attrs.height, fixedWidth = width !== AUTO && width !== undefined, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxWidth = width - padding * 2, maxHeightPx = height - padding * 2, currentHeightPx = 0, wrap = this.wrap(), shouldWrap = wrap !== NONE, wrapAtWord = wrap !== CHAR && shouldWrap, shouldAddEllipsis = this.ellipsis();\n        this.textArr = [];\n        getDummyContext().font = this._getContextFont();\n        var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;\n        for (var i = 0, max = lines.length; i < max; ++i) {\n            var line = lines[i];\n            var lineWidth = this._getTextWidth(line);\n            if (fixedWidth && lineWidth > maxWidth) {\n                while (line.length > 0) {\n                    var low = 0, high = line.length, match = '', matchWidth = 0;\n                    while (low < high) {\n                        var mid = (low + high) >>> 1, substr = line.slice(0, mid + 1), substrWidth = this._getTextWidth(substr) + additionalWidth;\n                        if (substrWidth <= maxWidth) {\n                            low = mid + 1;\n                            match = substr;\n                            matchWidth = substrWidth;\n                        }\n                        else {\n                            high = mid;\n                        }\n                    }\n                    if (match) {\n                        if (wrapAtWord) {\n                            var wrapIndex;\n                            var nextChar = line[match.length];\n                            var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;\n                            if (nextIsSpaceOrDash && matchWidth <= maxWidth) {\n                                wrapIndex = match.length;\n                            }\n                            else {\n                                wrapIndex =\n                                    Math.max(match.lastIndexOf(SPACE), match.lastIndexOf(DASH)) +\n                                        1;\n                            }\n                            if (wrapIndex > 0) {\n                                low = wrapIndex;\n                                match = match.slice(0, low);\n                                matchWidth = this._getTextWidth(match);\n                            }\n                        }\n                        match = match.trimRight();\n                        this._addTextLine(match);\n                        textWidth = Math.max(textWidth, matchWidth);\n                        currentHeightPx += lineHeightPx;\n                        var shouldHandleEllipsis = this._shouldHandleEllipsis(currentHeightPx);\n                        if (shouldHandleEllipsis) {\n                            this._tryToAddEllipsisToLastLine();\n                            break;\n                        }\n                        line = line.slice(low);\n                        line = line.trimLeft();\n                        if (line.length > 0) {\n                            lineWidth = this._getTextWidth(line);\n                            if (lineWidth <= maxWidth) {\n                                this._addTextLine(line);\n                                currentHeightPx += lineHeightPx;\n                                textWidth = Math.max(textWidth, lineWidth);\n                                break;\n                            }\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n            else {\n                this._addTextLine(line);\n                currentHeightPx += lineHeightPx;\n                textWidth = Math.max(textWidth, lineWidth);\n                if (this._shouldHandleEllipsis(currentHeightPx) && i < max - 1) {\n                    this._tryToAddEllipsisToLastLine();\n                }\n            }\n            if (this.textArr[this.textArr.length - 1]) {\n                this.textArr[this.textArr.length - 1].lastInParagraph = true;\n            }\n            if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n                break;\n            }\n        }\n        this.textHeight = fontSize;\n        this.textWidth = textWidth;\n    }\n    _shouldHandleEllipsis(currentHeightPx) {\n        var fontSize = +this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, height = this.attrs.height, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxHeightPx = height - padding * 2, wrap = this.wrap(), shouldWrap = wrap !== NONE;\n        return (!shouldWrap ||\n            (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx));\n    }\n    _tryToAddEllipsisToLastLine() {\n        var width = this.attrs.width, fixedWidth = width !== AUTO && width !== undefined, padding = this.padding(), maxWidth = width - padding * 2, shouldAddEllipsis = this.ellipsis();\n        var lastLine = this.textArr[this.textArr.length - 1];\n        if (!lastLine || !shouldAddEllipsis) {\n            return;\n        }\n        if (fixedWidth) {\n            var haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;\n            if (!haveSpace) {\n                lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);\n            }\n        }\n        this.textArr.splice(this.textArr.length - 1, 1);\n        this._addTextLine(lastLine.text + ELLIPSIS);\n    }\n    getStrokeScaleEnabled() {\n        return true;\n    }\n    _useBufferCanvas() {\n        const hasLine = this.textDecoration().indexOf('underline') !== -1 ||\n            this.textDecoration().indexOf('line-through') !== -1;\n        const hasShadow = this.hasShadow();\n        if (hasLine && hasShadow) {\n            return true;\n        }\n        return super._useBufferCanvas();\n    }\n}\nexports.Text = Text;\nText.prototype._fillFunc = _fillFunc;\nText.prototype._strokeFunc = _strokeFunc;\nText.prototype.className = TEXT_UPPER;\nText.prototype._attrsAffectingSize = [\n    'text',\n    'fontSize',\n    'padding',\n    'wrap',\n    'lineHeight',\n    'letterSpacing',\n];\n(0, Global_2._registerNode)(Text);\nFactory_1.Factory.overWriteSetter(Text, 'width', (0, Validators_1.getNumberOrAutoValidator)());\nFactory_1.Factory.overWriteSetter(Text, 'height', (0, Validators_1.getNumberOrAutoValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'direction', INHERIT);\nFactory_1.Factory.addGetterSetter(Text, 'fontFamily', 'Arial');\nFactory_1.Factory.addGetterSetter(Text, 'fontSize', 12, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'fontStyle', NORMAL);\nFactory_1.Factory.addGetterSetter(Text, 'fontVariant', NORMAL);\nFactory_1.Factory.addGetterSetter(Text, 'padding', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'align', LEFT);\nFactory_1.Factory.addGetterSetter(Text, 'verticalAlign', TOP);\nFactory_1.Factory.addGetterSetter(Text, 'lineHeight', 1, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'wrap', WORD);\nFactory_1.Factory.addGetterSetter(Text, 'ellipsis', false, (0, Validators_1.getBooleanValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'letterSpacing', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'text', '', (0, Validators_1.getStringValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'textDecoration', '');\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}